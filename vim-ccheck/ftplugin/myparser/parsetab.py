
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "translation_unitAUTO BREAK CASE CHAR CONST CONTINUE DEFAULT DOUBLE DO ELSE ENUM EXTERN FLOAT FOR GOTO IF INLINE INT LONG REGISTER RESTRICT RETURN SHORT SIGNED SIZEOF STATIC STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE ID TYPEID STRING_LITERAL INT_CONST_DEC INT_CONST_OCT INT_CONST_HEX FLOAT_CONST HEX_XFLOAT_CONST PLUS MINUS TIMES DIVIDE MOD LT LEQ GT GEQ EQ NEQ BOR BAND BNOT XOR LSHIFT RSHIFT LOR LAND LNOT ASSIGN RSHIFT_ASSIGN LSHIFT_ASSIGN ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN INC DEC PTR_OP IS_TRUE DOT COLON SEMICOLON COMMA LPAREN RPAREN LBRACE RBRACE LSQUARE RSQUARE ELLIPSISprimary_expression : IDprimary_expression : INT_CONST_DECprimary_expression : STRING_LITERALprimary_expression : LPAREN expression RPARENpostfix_expression : primary_expressionpostfix_expression : postfix_expression LSQUARE expression RSQUAREpostfix_expression : postfix_expression LPAREN RPARENpostfix_expression : postfix_expression LPAREN argument_expression_list RPARENpostfix_expression : postfix_expression DOT IDpostfix_expression : postfix_expression PTR_OP IDpostfix_expression : postfix_expression INCpostfix_expression : postfix_expression DECargument_expression_list : assignment_expressionargument_expression_list : argument_expression_list COMMA assignment_expressionunary_expression : postfix_expressionunary_expression : INC unary_expressionunary_expression : DEC unary_expressionunary_expression : unary_operator cast_expressionunary_expression : SIZEOF unary_expressionunary_expression : SIZEOF LPAREN type_name RPARENunary_operator : BANDunary_operator : TIMESunary_operator : PLUSunary_operator : MINUSunary_operator : BNOTunary_operator : LNOTcast_expression : unary_expressioncast_expression : LPAREN type_name RPAREN cast_expressionmultiplicative_expression : cast_expressionmultiplicative_expression : multiplicative_expression TIMES cast_expressionmultiplicative_expression : multiplicative_expression DIVIDE cast_expressionmultiplicative_expression : multiplicative_expression MOD cast_expressionadditive_expression : multiplicative_expressionadditive_expression : additive_expression PLUS multiplicative_expressionadditive_expression : additive_expression MINUS multiplicative_expressionshift_expression : additive_expressionshift_expression : shift_expression LSHIFT additive_expressionshift_expression : shift_expression RSHIFT additive_expressionrelational_expression : shift_expressionrelational_expression : relational_expression LT shift_expressionrelational_expression : relational_expression GT shift_expressionrelational_expression : relational_expression LEQ shift_expressionrelational_expression : relational_expression GEQ shift_expressionequality_expression : relational_expressionequality_expression : equality_expression EQ relational_expressionequality_expression : equality_expression NEQ relational_expressionand_expression : equality_expressionand_expression : and_expression BAND equality_expressionexclusive_or_expression : and_expressionexclusive_or_expression : exclusive_or_expression XOR and_expressioninclusive_or_expression : exclusive_or_expressioninclusive_or_expression : inclusive_or_expression BOR exclusive_or_expressionlogical_and_expression : inclusive_or_expressionlogical_and_expression : logical_and_expression LAND inclusive_or_expressionlogical_or_expression : logical_and_expressionlogical_or_expression : logical_or_expression LOR logical_and_expressionconditional_expression : logical_or_expressionconditional_expression : logical_or_expression IS_TRUE expression COLON conditional_expressionassignment_expression : conditional_expressionassignment_expression : unary_expression assignment_operator assignment_expressionassignment_operator : ASSIGNassignment_operator : MUL_ASSIGNassignment_operator : DIV_ASSIGNassignment_operator : MOD_ASSIGNassignment_operator : ADD_ASSIGNassignment_operator : SUB_ASSIGNassignment_operator : LSHIFT_ASSIGNassignment_operator : RSHIFT_ASSIGNassignment_operator : AND_ASSIGNassignment_operator : XOR_ASSIGNassignment_operator : OR_ASSIGNexpression : assignment_expressionexpression : expression COMMA assignment_expressionconstant_expression : conditional_expressiondeclaration : declaration_specifiers SEMICOLONdeclaration : declaration_specifiers init_declarator_list SEMICOLONdeclaration_specifiers : storage_class_specifierdeclaration_specifiers : storage_class_specifier declaration_specifiersdeclaration_specifiers : type_specifierdeclaration_specifiers : type_specifier declaration_specifiersdeclaration_specifiers : type_qualifierdeclaration_specifiers : type_qualifier declaration_specifiersinit_declarator_list : init_declaratorinit_declarator_list : init_declarator_list COMMA init_declaratorinit_declarator : declaratorinit_declarator : declarator ASSIGN initializerstorage_class_specifier : TYPEDEFstorage_class_specifier : EXTERNstorage_class_specifier : STATICstorage_class_specifier : AUTOstorage_class_specifier : REGISTERtype_specifier : VOIDtype_specifier : CHARtype_specifier : SHORTtype_specifier : INTtype_specifier : LONGtype_specifier : FLOATtype_specifier : DOUBLEtype_specifier : SIGNEDtype_specifier : UNSIGNEDtype_specifier : struct_or_union_specifiertype_specifier : enum_specifierstruct_or_union_specifier : struct_or_union ID LBRACE struct_declaration_list RBRACEstruct_or_union_specifier : struct_or_union LBRACE struct_declaration_list RBRACEstruct_or_union_specifier : struct_or_union IDstruct_or_union : STRUCTstruct_or_union : UNIONstruct_declaration_list : struct_declarationstruct_declaration_list : struct_declaration_list struct_declarationstruct_declaration : specifier_qualifier_list struct_declarator_list SEMICOLONspecifier_qualifier_list : type_specifier specifier_qualifier_listspecifier_qualifier_list : type_specifierspecifier_qualifier_list : type_qualifier specifier_qualifier_listspecifier_qualifier_list : type_qualifierstruct_declarator_list : struct_declaratorstruct_declarator_list : struct_declarator_list COMMA struct_declaratorstruct_declarator : declaratorstruct_declarator : COLON constant_expressionstruct_declarator : declarator COLON constant_expressionenum_specifier : ENUM LBRACE enumerator_list RBRACEenum_specifier : ENUM ID LBRACE enumerator_list RBRACEenum_specifier : ENUM IDenumerator_list : enumeratorenumerator_list : enumerator_list COMMA enumeratorenumerator : IDenumerator : ID ASSIGN constant_expressiontype_qualifier : CONSTtype_qualifier : VOLATILEdeclarator : pointer direct_declaratordeclarator : direct_declaratordirect_declarator : IDdirect_declarator : LPAREN declarator RPARENdirect_declarator : direct_declarator '[' constant_expression RSQUAREdirect_declarator : direct_declarator '[' RSQUAREdirect_declarator : direct_declarator LPAREN parameter_type_list RPARENdirect_declarator : direct_declarator LPAREN identifier_list RPARENdirect_declarator : direct_declarator LPAREN RPARENpointer : TIMESpointer : '*' type_qualifier_listpointer : '*' pointerpointer : '*' type_qualifier_list pointertype_qualifier_list : type_qualifiertype_qualifier_list : type_qualifier_list type_qualifierparameter_type_list : parameter_listparameter_type_list : parameter_list COMMA ELLIPSISparameter_list : parameter_declarationparameter_list : parameter_list COMMA parameter_declarationparameter_declaration : declaration_specifiers declaratorparameter_declaration : declaration_specifiers abstract_declaratorparameter_declaration : declaration_specifiersidentifier_list : IDidentifier_list : identifier_list COMMA IDtype_name : specifier_qualifier_listtype_name : specifier_qualifier_list abstract_declaratorabstract_declarator : pointerabstract_declarator : direct_abstract_declaratorabstract_declarator : pointer direct_abstract_declaratordirect_abstract_declarator : LPAREN abstract_declarator RPARENdirect_abstract_declarator : '[' RSQUAREdirect_abstract_declarator : '[' constant_expression RSQUAREdirect_abstract_declarator : direct_abstract_declarator '[' RSQUAREdirect_abstract_declarator : direct_abstract_declarator '[' constant_expression RSQUAREdirect_abstract_declarator : LPAREN RPARENdirect_abstract_declarator : LPAREN parameter_type_list RPARENdirect_abstract_declarator : direct_abstract_declarator LPAREN RPARENdirect_abstract_declarator : direct_abstract_declarator LPAREN parameter_type_list RPARENinitializer : assignment_expressioninitializer : LBRACE initializer_list RBRACEinitializer : LBRACE initializer_list COMMA RBRACEinitializer_list : initializerinitializer_list : initializer_list COMMA initializerstatement : labeled_statementstatement : compound_statementstatement : expression_statementstatement : selection_statementstatement : iteration_statementstatement : jump_statementlabeled_statement : ID COLON statementlabeled_statement : CASE constant_expression COLON statementlabeled_statement : DEFAULT COLON statementcompound_statement : LBRACE RBRACEcompound_statement : LBRACE statement_list RBRACEcompound_statement : LBRACE declaration_list RBRACEcompound_statement : LBRACE declaration_list statement_list RBRACEdeclaration_list : declarationdeclaration_list : declaration_list declarationstatement_list : statementstatement_list : statement_list statementexpression_statement : SEMICOLONexpression_statement : expression SEMICOLONselection_statement : IF LPAREN expression RPAREN statementselection_statement : SWITCH LPAREN expression RPAREN statementiteration_statement : WHILE LPAREN expression RPAREN statementiteration_statement : DO statement WHILE LPAREN expression RPAREN SEMICOLONiteration_statement : FOR LPAREN expression_statement expression_statement RPAREN statementiteration_statement : FOR LPAREN expression_statement expression_statement expression RPAREN statementjump_statement : GOTO ID SEMICOLONjump_statement : CONTINUE SEMICOLONjump_statement : BREAK SEMICOLONjump_statement : RETURN SEMICOLONjump_statement : RETURN expression SEMICOLONtranslation_unit : external_declarationtranslation_unit : translation_unit external_declarationexternal_declaration : function_definitionexternal_declaration : declarationfunction_definition : declaration_specifiers declarator declaration_list compound_statementfunction_definition : declaration_specifiers declarator compound_statementfunction_definition : declarator declaration_list compound_statementfunction_definition : declarator compound_statement"
    
_lr_action_items = {'LSQUARE':([89,99,100,104,107,144,181,183,266,269,270,282,318,319,],[178,-2,-5,-1,-3,-1,-12,-11,-7,-10,-9,-4,-6,-8,]),'DO':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,139,-76,-174,-176,-172,139,-173,139,-189,-187,-177,139,-181,-175,-186,139,-183,-200,-198,-188,-182,-190,139,-199,139,-197,-184,-201,-180,139,-178,139,-179,139,139,139,-193,-192,-191,-195,139,-196,-194,]),'DIVIDE':([83,89,99,100,102,104,107,108,125,144,173,175,181,183,205,206,266,269,270,276,277,282,288,289,290,317,318,319,321,],[-27,-15,-2,-5,-29,-1,-3,201,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,201,201,-4,-32,-31,-30,-20,-6,-8,-28,]),'SHORT':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[2,2,-94,-127,-101,-92,-93,-89,-88,-202,2,-91,-100,-96,2,-87,-90,-130,-205,-131,-97,-204,-95,-98,2,-99,-102,-128,2,2,-105,-129,-203,-122,2,-75,2,-209,-185,2,2,-132,2,2,-108,2,2,-137,-134,2,-76,-207,2,2,-181,2,-208,-186,-109,-104,2,-120,-135,2,-136,2,2,-133,-206,-183,-182,-110,-103,-121,2,2,-184,]),'CONST':([0,1,2,3,5,6,7,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,40,41,43,44,45,47,48,50,53,55,57,59,60,61,62,63,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[3,3,-94,-127,-101,-92,3,-93,-89,-88,-202,3,-91,-100,-96,3,-87,-90,-130,-205,-131,-97,-204,-95,-98,3,-99,-102,-128,3,3,-142,3,-105,-129,-203,-122,3,-75,3,-209,-185,3,3,-132,-143,3,3,-108,3,3,-137,-134,3,-76,-207,3,3,-181,3,-208,-186,-109,-104,3,-120,-135,3,-136,3,3,-133,-206,-183,-182,-110,-103,-121,3,3,-184,]),'ADD_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,222,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'DEFAULT':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,131,-76,-174,-176,-172,131,-173,131,-189,-187,-177,131,-181,-175,-186,131,-183,-200,-198,-188,-182,-190,131,-199,131,-197,-184,-201,-180,131,-178,131,-179,131,131,131,-193,-192,-191,-195,131,-196,-194,]),'VOID':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[6,6,-94,-127,-101,-92,-93,-89,-88,-202,6,-91,-100,-96,6,-87,-90,-130,-205,-131,-97,-204,-95,-98,6,-99,-102,-128,6,6,-105,-129,-203,-122,6,-75,6,-209,-185,6,6,-132,6,6,-108,6,6,-137,-134,6,-76,-207,6,6,-181,6,-208,-186,-109,-104,6,-120,-135,6,-136,6,6,-133,-206,-183,-182,-110,-103,-121,6,6,-184,]),'DIV_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,226,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'CHAR':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[8,8,-94,-127,-101,-92,-93,-89,-88,-202,8,-91,-100,-96,8,-87,-90,-130,-205,-131,-97,-204,-95,-98,8,-99,-102,-128,8,8,-105,-129,-203,-122,8,-75,8,-209,-185,8,8,-132,8,8,-108,8,8,-137,-134,8,-76,-207,8,8,-181,8,-208,-186,-109,-104,8,-120,-135,8,-136,8,8,-133,-206,-183,-182,-110,-103,-121,8,8,-184,]),'LSHIFT_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,223,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'WHILE':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,240,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,132,-76,-174,-176,-172,132,-173,132,-189,-187,-177,132,-181,-175,-186,132,-183,-200,-198,-188,-182,-190,132,-199,305,132,-197,-184,-201,-180,132,-178,132,-179,132,132,132,-193,-192,-191,-195,132,-196,-194,]),'LNOT':([51,53,59,60,82,84,85,90,92,95,96,97,101,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,148,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,278,295,296,297,299,301,303,306,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[82,-75,-185,82,-26,82,82,-24,-23,-25,-22,-21,82,82,82,-76,82,-174,-176,-172,82,82,-173,82,82,-189,-187,-177,82,-181,-175,82,-186,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,82,82,-198,-188,-182,82,-190,82,82,82,-199,82,82,82,82,82,-197,-184,-201,82,-180,82,-178,82,82,82,82,82,-179,82,82,82,82,-193,-192,-191,-195,82,-196,-194,]),'STATIC':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,44,45,47,48,50,53,55,57,59,60,61,62,75,87,114,115,117,123,140,147,148,150,159,162,163,169,171,189,211,214,232,247,248,254,279,296,],[9,9,-94,-127,-101,-92,-93,-89,-88,-202,9,-91,-100,-96,9,-87,-90,-130,-205,-131,-97,-204,-95,-98,9,-99,-102,-128,9,-105,-129,-203,-122,9,-75,9,-209,-185,9,9,-132,-137,-134,-76,-207,9,9,-181,-208,-186,-104,-120,-135,9,-136,9,-133,-206,-183,-182,-103,-121,9,9,-184,]),'BNOT':([51,53,59,60,82,84,85,90,92,95,96,97,101,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,148,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,278,295,296,297,299,301,303,306,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[95,-75,-185,95,-26,95,95,-24,-23,-25,-22,-21,95,95,95,-76,95,-174,-176,-172,95,95,-173,95,95,-189,-187,-177,95,-181,-175,95,-186,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,95,95,-198,-188,-182,95,-190,95,95,95,-199,95,95,95,95,95,-197,-184,-201,95,-180,95,-178,95,95,95,95,95,-179,95,95,95,95,-193,-192,-191,-195,95,-196,-194,]),'LSHIFT':([83,89,98,99,100,102,104,105,107,108,125,144,173,175,181,183,205,206,266,269,270,271,272,273,274,276,277,282,284,285,288,289,290,317,318,319,321,],[-27,-15,-36,-2,-5,-29,-1,197,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,197,197,197,197,-34,-35,-4,-38,-37,-32,-31,-30,-20,-6,-8,-28,]),'EXTERN':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,44,45,47,48,50,53,55,57,59,60,61,62,75,87,114,115,117,123,140,147,148,150,159,162,163,169,171,189,211,214,232,247,248,254,279,296,],[10,10,-94,-127,-101,-92,-93,-89,-88,-202,10,-91,-100,-96,10,-87,-90,-130,-205,-131,-97,-204,-95,-98,10,-99,-102,-128,10,-105,-129,-203,-122,10,-75,10,-209,-185,10,10,-132,-137,-134,-76,-207,10,10,-181,-208,-186,-104,-120,-135,10,-136,10,-133,-206,-183,-182,-103,-121,10,10,-184,]),'RETURN':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,124,-76,-174,-176,-172,124,-173,124,-189,-187,-177,124,-181,-175,-186,124,-183,-200,-198,-188,-182,-190,124,-199,124,-197,-184,-201,-180,124,-178,124,-179,124,124,124,-193,-192,-191,-195,124,-196,-194,]),'SIZEOF':([51,53,59,60,82,84,85,90,92,95,96,97,101,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,148,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,278,295,296,297,299,301,303,306,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[84,-75,-185,84,-26,84,84,-24,-23,-25,-22,-21,84,84,84,-76,84,-174,-176,-172,84,84,-173,84,84,-189,-187,-177,84,-181,-175,84,-186,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,84,84,-198,-188,-182,84,-190,84,84,84,-199,84,84,84,84,84,-197,-184,-201,84,-180,84,-178,84,84,84,84,84,-179,84,84,84,84,-193,-192,-191,-195,84,-196,-194,]),'DEC':([51,53,59,60,82,84,85,89,90,92,95,96,97,99,100,101,104,107,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,144,148,155,161,167,172,174,176,177,178,179,181,183,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,266,269,270,278,282,295,296,297,299,301,303,306,318,319,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[85,-75,-185,85,-26,85,85,181,-24,-23,-25,-22,-21,-2,-5,85,-1,-3,85,85,-76,85,-174,-176,-172,85,85,-173,85,85,-189,-187,-177,85,-181,-175,85,-1,-186,85,85,85,85,85,85,85,85,85,-12,-11,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,85,85,-198,-188,-182,85,-190,85,85,85,-199,85,85,85,85,-7,-10,-9,85,-4,-197,-184,-201,85,-180,85,-178,-6,-8,85,85,85,85,85,-179,85,85,85,85,-193,-192,-191,-195,85,-196,-194,]),'MINUS':([51,53,59,60,82,83,84,85,89,90,92,95,96,97,98,99,100,101,102,104,107,108,110,112,114,116,119,120,122,123,124,125,126,129,133,134,136,137,139,140,141,143,144,148,155,161,167,172,173,174,175,176,177,178,179,181,183,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,205,206,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,266,269,270,276,277,278,282,284,285,288,289,290,295,296,297,299,301,303,306,317,318,319,320,321,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[90,-75,-185,90,-26,-27,90,90,-15,-24,-23,-25,-22,-21,191,-2,-5,90,-29,-1,-3,-33,90,90,-76,90,-174,-176,-172,90,90,-27,-173,90,90,-189,-187,-177,90,-181,-175,90,-1,-186,90,90,90,90,-19,90,-17,90,90,90,90,-12,-11,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-18,-16,90,90,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,90,90,-198,-188,-182,90,-190,90,90,90,-199,90,90,90,90,-7,-10,-9,-34,-35,90,-4,191,191,-32,-31,-30,-197,-184,-201,90,-180,90,-178,-20,-6,-8,90,-28,90,90,90,90,-179,90,90,90,90,-193,-192,-191,-195,90,-196,-194,]),'DOT':([89,99,100,104,107,144,181,183,266,269,270,282,318,319,],[182,-2,-5,-1,-3,-1,-12,-11,-7,-10,-9,-4,-6,-8,]),'RBRACE':([53,59,60,65,67,72,73,74,83,86,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,111,114,119,120,122,123,125,126,129,134,136,137,140,141,146,148,149,157,158,173,175,181,183,205,206,209,213,214,215,230,231,232,234,239,246,249,250,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,293,294,295,296,297,298,301,306,317,318,319,321,323,324,327,334,335,336,339,340,342,343,346,347,],[-75,-185,140,150,-108,-123,159,-125,-27,-49,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,-57,-74,-76,-174,-176,-172,214,-27,-173,232,-189,-187,-177,-181,-175,-59,-186,-109,247,248,-19,-17,-12,-11,-18,-16,-167,296,-183,-200,-198,-188,-182,-190,-199,-110,-124,-126,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,-170,324,-197,-184,-201,-60,-180,-178,-20,-6,-8,-28,336,-168,-179,-58,-171,-169,-193,-192,-191,-195,-196,-194,]),'RSQUARE':([51,83,86,88,89,91,93,94,98,99,100,102,103,104,105,106,107,108,109,111,125,142,146,167,173,175,181,183,205,206,255,257,263,264,265,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,298,300,315,317,318,319,321,334,],[87,-27,-49,-53,-15,-44,-51,189,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,-57,-74,-27,-72,-59,256,-19,-17,-12,-11,-18,-16,314,316,-48,-52,318,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,-60,-73,332,-20,-6,-8,-28,-58,]),'BOR':([83,86,88,89,91,93,98,99,100,102,104,105,106,107,108,125,144,173,175,181,183,205,206,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,317,318,319,321,],[-27,-49,177,-15,-44,-51,-36,-2,-5,-29,-1,-39,-47,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,177,-38,-37,-45,-46,-32,-31,-30,-20,-6,-8,-28,]),'LAND':([83,86,88,89,91,93,98,99,100,102,103,104,105,106,107,108,125,144,173,175,181,183,205,206,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,317,318,319,321,],[-27,-49,-53,-15,-44,-51,-36,-2,-5,-29,195,-1,-39,-47,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,195,-20,-6,-8,-28,]),'RPAREN':([1,2,3,5,6,8,9,10,14,15,16,17,20,22,23,24,27,28,31,32,33,34,35,36,38,39,40,41,42,44,45,46,48,50,56,62,63,64,66,68,75,76,77,78,79,80,81,83,86,87,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,125,134,142,146,150,151,152,159,162,163,164,165,166,168,169,173,175,179,181,183,189,192,193,194,205,206,234,247,248,251,252,253,254,256,258,259,260,261,262,263,264,266,267,268,269,270,271,272,273,274,275,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,298,300,302,304,307,310,311,312,313,314,316,317,318,319,321,325,331,332,333,334,338,341,],[-77,-94,-127,-101,-92,-93,-89,-88,-79,-91,-100,-96,-87,-90,-130,-138,-131,-97,-95,-98,-81,-99,-102,-128,-78,62,-139,-142,-140,-105,-129,-80,-122,75,-82,-132,-143,-141,-112,-114,-137,162,-146,-150,169,-151,-144,-27,-49,-134,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,-57,-27,-189,-72,-59,-104,-111,-113,-120,-135,251,-149,-148,-156,-155,-136,-19,-17,266,-12,-11,-133,278,-153,282,-18,-16,-190,-103,-121,-163,310,311,312,-159,-157,-152,-145,-147,317,-48,-52,-7,-13,319,-10,-9,-43,-41,-42,-40,-50,-34,-35,251,-154,-155,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,-60,-73,326,328,330,-164,-158,-165,331,-161,-160,-20,-6,-8,-28,337,-166,-162,-14,-58,344,345,]),'MUL_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,225,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'SEMICOLON':([1,2,3,5,6,8,9,10,14,15,16,17,20,22,23,25,27,28,31,32,33,34,35,36,38,44,45,46,48,52,53,54,55,56,58,59,60,62,75,83,86,87,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,111,114,118,119,120,122,123,124,125,126,128,129,130,134,136,137,138,139,140,141,142,144,146,148,150,153,154,156,159,162,169,173,175,181,183,189,205,206,207,208,209,212,213,214,215,216,229,230,231,232,234,235,239,241,244,247,248,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,295,296,297,298,299,300,301,303,306,308,309,317,318,319,321,324,326,327,328,330,334,336,337,339,340,342,343,344,345,346,347,],[-77,-94,-127,-101,-92,-93,-89,-88,-79,-91,-100,-96,-87,-90,-130,53,-131,-97,-95,-98,-81,-99,-102,-128,-78,-105,-129,-80,-122,114,-75,-83,-85,-82,53,-185,134,-132,-137,-27,-49,-134,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,-57,-74,-76,-85,-174,-176,-172,134,215,-27,-173,230,134,234,-189,-187,-177,239,134,-181,-175,-72,-1,-59,-186,-104,-115,-117,246,-120,-135,-136,-19,-17,-12,-11,-133,-18,-16,-84,-86,-167,295,134,-183,-200,297,134,-198,-188,-182,-190,134,-199,134,-118,-103,-121,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,-197,-184,-201,-60,134,-73,-180,134,-178,-119,-116,-20,-6,-8,-28,-168,134,-179,134,134,-58,-169,134,-193,-192,-191,-195,134,347,-196,-194,]),'*':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,19,20,22,25,26,28,29,31,32,33,34,35,36,38,40,41,44,46,47,48,53,56,57,58,63,66,68,69,78,113,114,115,140,147,150,151,152,159,163,193,211,214,232,245,247,248,279,296,],[7,-77,-94,-127,7,-101,-92,7,-93,-89,-88,-202,-79,-91,-100,-96,7,-87,-90,7,-205,-97,-204,-95,-98,-81,-99,-102,-128,-78,7,-142,-105,-80,-203,-122,-75,-82,-209,7,-143,-112,-114,7,7,7,-76,-207,-181,-208,-104,-111,-113,-120,7,7,-206,-183,-182,7,-103,-121,7,-184,]),'UNSIGNED':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[16,16,-94,-127,-101,-92,-93,-89,-88,-202,16,-91,-100,-96,16,-87,-90,-130,-205,-131,-97,-204,-95,-98,16,-99,-102,-128,16,16,-105,-129,-203,-122,16,-75,16,-209,-185,16,16,-132,16,16,-108,16,16,-137,-134,16,-76,-207,16,16,-181,16,-208,-186,-109,-104,16,-120,-135,16,-136,16,16,-133,-206,-183,-182,-110,-103,-121,16,16,-184,]),'LONG':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[17,17,-94,-127,-101,-92,-93,-89,-88,-202,17,-91,-100,-96,17,-87,-90,-130,-205,-131,-97,-204,-95,-98,17,-99,-102,-128,17,17,-105,-129,-203,-122,17,-75,17,-209,-185,17,17,-132,17,17,-108,17,17,-137,-134,17,-76,-207,17,17,-181,17,-208,-186,-109,-104,17,-120,-135,17,-136,17,17,-133,-206,-183,-182,-110,-103,-121,17,17,-184,]),'PLUS':([51,53,59,60,82,83,84,85,89,90,92,95,96,97,98,99,100,101,102,104,107,108,110,112,114,116,119,120,122,123,124,125,126,129,133,134,136,137,139,140,141,143,144,148,155,161,167,172,173,174,175,176,177,178,179,181,183,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,205,206,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,266,269,270,276,277,278,282,284,285,288,289,290,295,296,297,299,301,303,306,317,318,319,320,321,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[92,-75,-185,92,-26,-27,92,92,-15,-24,-23,-25,-22,-21,190,-2,-5,92,-29,-1,-3,-33,92,92,-76,92,-174,-176,-172,92,92,-27,-173,92,92,-189,-187,-177,92,-181,-175,92,-1,-186,92,92,92,92,-19,92,-17,92,92,92,92,-12,-11,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-18,-16,92,92,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,92,92,-198,-188,-182,92,-190,92,92,92,-199,92,92,92,92,-7,-10,-9,-34,-35,92,-4,190,190,-32,-31,-30,-197,-184,-201,92,-180,92,-178,-20,-6,-8,92,-28,92,92,92,92,-179,92,92,92,92,-193,-192,-191,-195,92,-196,-194,]),'IS_TRUE':([83,86,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,125,144,173,175,181,183,205,206,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,317,318,319,321,],[-27,-49,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,204,-27,-1,-19,-17,-12,-11,-18,-16,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,-20,-6,-8,-28,]),'SWITCH':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,135,-76,-174,-176,-172,135,-173,135,-189,-187,-177,135,-181,-175,-186,135,-183,-200,-198,-188,-182,-190,135,-199,135,-197,-184,-201,-180,135,-178,135,-179,135,135,135,-193,-192,-191,-195,135,-196,-194,]),'AND_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,224,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'COMMA':([1,2,3,5,6,8,9,10,14,15,16,17,20,22,23,24,27,28,31,32,33,34,35,36,38,40,41,42,44,45,46,48,52,54,55,56,62,63,64,72,73,74,75,77,78,79,80,81,83,86,87,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,111,118,125,130,142,144,146,150,153,154,156,158,159,162,164,165,166,168,169,173,175,181,183,189,194,205,206,207,208,209,216,244,247,248,249,250,251,256,258,259,261,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,292,293,294,298,300,302,304,307,308,309,310,311,312,314,316,317,318,319,321,324,331,332,333,334,335,336,338,341,],[-77,-94,-127,-101,-92,-93,-89,-88,-79,-91,-100,-96,-87,-90,-130,-138,-131,-97,-95,-98,-81,-99,-102,-128,-78,-139,-142,-140,-105,-129,-80,-122,113,-83,-85,-82,-132,-143,-141,-123,160,-125,-137,-146,-150,170,-151,171,-27,-49,-134,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,-57,-74,-85,-27,233,-72,-1,-59,-104,-115,-117,245,160,-120,-135,-149,-148,-156,-155,-136,-19,-17,-12,-11,-133,233,-18,-16,-84,-86,-167,233,-118,-103,-121,-124,-126,-163,-159,-157,-152,-147,-48,-52,233,-7,-13,320,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,233,-170,323,-60,-73,233,233,233,-119,-116,-164,-158,-165,-161,-160,-20,-6,-8,-28,-168,-166,-162,-14,-58,-171,-169,233,233,]),'PTR_OP':([89,99,100,104,107,144,181,183,266,269,270,282,318,319,],[180,-2,-5,-1,-3,-1,-12,-11,-7,-10,-9,-4,-6,-8,]),'RSHIFT_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,220,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'COLON':([2,3,5,6,8,16,17,23,27,28,31,32,34,35,36,44,45,48,62,66,68,69,75,83,86,87,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,111,125,131,142,144,146,150,151,152,154,159,162,169,173,175,181,183,189,205,206,237,245,247,248,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,292,298,300,317,318,319,321,334,],[-94,-127,-101,-92,-93,-100,-96,-130,-131,-97,-95,-98,-99,-102,-128,-105,-129,-122,-132,-112,-114,155,-137,-27,-49,-134,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,-57,-74,-27,235,-72,241,-59,-104,-111,-113,243,-120,-135,-136,-19,-17,-12,-11,-133,-18,-16,303,155,-103,-121,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,322,-60,-73,-20,-6,-8,-28,-58,]),'IF':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,145,-76,-174,-176,-172,145,-173,145,-189,-187,-177,145,-181,-175,-186,145,-183,-200,-198,-188,-182,-190,145,-199,145,-197,-184,-201,-180,145,-178,145,-179,145,145,145,-193,-192,-191,-195,145,-196,-194,]),'ASSIGN':([23,27,45,55,62,74,75,83,87,89,99,100,104,107,118,125,144,162,169,173,175,181,183,189,205,206,266,269,270,282,317,318,319,321,],[-130,-131,-129,116,-132,161,-137,-27,-134,-15,-2,-5,-1,-3,116,227,-1,-135,-136,-19,-17,-12,-11,-133,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'$end':([13,19,26,29,47,53,57,114,115,140,147,211,214,232,296,],[-202,0,-205,-204,-203,-75,-209,-76,-207,-181,-208,-206,-183,-182,-184,]),'CASE':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,133,-76,-174,-176,-172,133,-173,133,-189,-187,-177,133,-181,-175,-186,133,-183,-200,-198,-188,-182,-190,133,-199,133,-197,-184,-201,-180,133,-178,133,-179,133,133,133,-193,-192,-191,-195,133,-196,-194,]),'TYPEDEF':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,44,45,47,48,50,53,55,57,59,60,61,62,75,87,114,115,117,123,140,147,148,150,159,162,163,169,171,189,211,214,232,247,248,254,279,296,],[20,20,-94,-127,-101,-92,-93,-89,-88,-202,20,-91,-100,-96,20,-87,-90,-130,-205,-131,-97,-204,-95,-98,20,-99,-102,-128,20,-105,-129,-203,-122,20,-75,20,-209,-185,20,20,-132,-137,-134,-76,-207,20,20,-181,-208,-186,-104,-120,-135,20,-136,20,-133,-206,-183,-182,-103,-121,20,20,-184,]),'GT':([83,89,91,98,99,100,102,104,105,107,108,125,144,173,175,181,183,205,206,266,269,270,271,272,273,274,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-15,185,-36,-2,-5,-29,-1,-39,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-43,-41,-42,-40,-34,-35,-4,-38,-37,185,185,-32,-31,-30,-20,-6,-8,-28,]),'XOR':([83,86,89,91,93,98,99,100,102,104,105,106,107,108,125,144,173,175,181,183,205,206,263,264,266,269,270,271,272,273,274,275,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-49,-15,-44,188,-36,-2,-5,-29,-1,-39,-47,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-48,188,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-38,-37,-45,-46,-32,-31,-30,-20,-6,-8,-28,]),'GOTO':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,121,-76,-174,-176,-172,121,-173,121,-189,-187,-177,121,-181,-175,-186,121,-183,-200,-198,-188,-182,-190,121,-199,121,-197,-184,-201,-180,121,-178,121,-179,121,121,121,-193,-192,-191,-195,121,-196,-194,]),'FOR':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,127,-76,-174,-176,-172,127,-173,127,-189,-187,-177,127,-181,-175,-186,127,-183,-200,-198,-188,-182,-190,127,-199,127,-197,-184,-201,-180,127,-178,127,-179,127,127,127,-193,-192,-191,-195,127,-196,-194,]),'UNION':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[18,18,-94,-127,-101,-92,-93,-89,-88,-202,18,-91,-100,-96,18,-87,-90,-130,-205,-131,-97,-204,-95,-98,18,-99,-102,-128,18,18,-105,-129,-203,-122,18,-75,18,-209,-185,18,18,-132,18,18,-108,18,18,-137,-134,18,-76,-207,18,18,-181,18,-208,-186,-109,-104,18,-120,-135,18,-136,18,18,-133,-206,-183,-182,-110,-103,-121,18,18,-184,]),'AUTO':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,44,45,47,48,50,53,55,57,59,60,61,62,75,87,114,115,117,123,140,147,148,150,159,162,163,169,171,189,211,214,232,247,248,254,279,296,],[22,22,-94,-127,-101,-92,-93,-89,-88,-202,22,-91,-100,-96,22,-87,-90,-130,-205,-131,-97,-204,-95,-98,22,-99,-102,-128,22,-105,-129,-203,-122,22,-75,22,-209,-185,22,22,-132,-137,-134,-76,-207,22,22,-181,-208,-186,-104,-120,-135,22,-136,22,-133,-206,-183,-182,-103,-121,22,22,-184,]),'ENUM':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[21,21,-94,-127,-101,-92,-93,-89,-88,-202,21,-91,-100,-96,21,-87,-90,-130,-205,-131,-97,-204,-95,-98,21,-99,-102,-128,21,21,-105,-129,-203,-122,21,-75,21,-209,-185,21,21,-132,21,21,-108,21,21,-137,-134,21,-76,-207,21,21,-181,21,-208,-186,-109,-104,21,-120,-135,21,-136,21,21,-133,-206,-183,-182,-110,-103,-121,21,21,-184,]),'GEQ':([83,89,91,98,99,100,102,104,105,107,108,125,144,173,175,181,183,205,206,266,269,270,271,272,273,274,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-15,184,-36,-2,-5,-29,-1,-39,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-43,-41,-42,-40,-34,-35,-4,-38,-37,184,184,-32,-31,-30,-20,-6,-8,-28,]),'TIMES':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,19,20,22,25,26,28,29,31,32,33,34,35,36,38,40,41,44,46,47,48,51,53,56,57,58,59,60,63,66,68,69,78,82,83,84,85,89,90,92,95,96,97,99,100,101,102,104,107,108,110,112,113,114,115,116,119,120,122,123,124,125,126,129,133,134,136,137,139,140,141,143,144,147,148,150,151,152,155,159,161,163,167,172,173,174,175,176,177,178,179,181,183,184,185,186,187,188,190,191,193,195,196,197,198,199,200,201,202,203,204,205,206,210,211,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,245,247,248,255,266,269,270,276,277,278,279,282,288,289,290,295,296,297,299,301,303,306,317,318,319,320,321,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[24,-77,-94,-127,24,-101,-92,24,-93,-89,-88,-202,-79,-91,-100,-96,24,-87,-90,24,-205,-97,-204,-95,-98,-81,-99,-102,-128,-78,24,-142,-105,-80,-203,-122,96,-75,-82,-209,24,-185,96,-143,-112,-114,24,24,-26,-27,96,96,-15,-24,-23,-25,-22,-21,-2,-5,96,-29,-1,-3,202,96,96,24,-76,-207,96,-174,-176,-172,96,96,-27,-173,96,96,-189,-187,-177,96,-181,-175,96,-1,-208,-186,-104,-111,-113,96,-120,96,24,96,96,-19,96,-17,96,96,96,96,-12,-11,96,96,96,96,96,96,96,24,96,96,96,96,96,96,96,96,96,96,-18,-16,96,-206,96,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,96,96,-198,-188,-182,96,-190,96,96,96,-199,96,96,96,24,-103,-121,96,-7,-10,-9,202,202,96,24,-4,-32,-31,-30,-197,-184,-201,96,-180,96,-178,-20,-6,-8,96,-28,96,96,96,96,-179,96,96,96,96,-193,-192,-191,-195,96,-196,-194,]),'BAND':([51,53,59,60,82,83,84,85,86,89,90,91,92,95,96,97,98,99,100,101,102,104,105,106,107,108,110,112,114,116,119,120,122,123,124,125,126,129,133,134,136,137,139,140,141,143,144,148,155,161,167,172,173,174,175,176,177,178,179,181,183,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,205,206,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,263,266,269,270,271,272,273,274,275,276,277,278,282,284,285,286,287,288,289,290,295,296,297,299,301,303,306,317,318,319,320,321,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[97,-75,-185,97,-26,-27,97,97,176,-15,-24,-44,-23,-25,-22,-21,-36,-2,-5,97,-29,-1,-39,-47,-3,-33,97,97,-76,97,-174,-176,-172,97,97,-27,-173,97,97,-189,-187,-177,97,-181,-175,97,-1,-186,97,97,97,97,-19,97,-17,97,97,97,97,-12,-11,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-18,-16,97,97,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,97,97,-198,-188,-182,97,-190,97,97,97,-199,97,97,97,97,-48,-7,-10,-9,-43,-41,-42,-40,176,-34,-35,97,-4,-38,-37,-45,-46,-32,-31,-30,-197,-184,-201,97,-180,97,-178,-20,-6,-8,97,-28,97,97,97,97,-179,97,97,97,97,-193,-192,-191,-195,97,-196,-194,]),'INT_CONST_DEC':([51,53,59,60,82,84,85,90,92,95,96,97,101,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,148,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,278,295,296,297,299,301,303,306,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[99,-75,-185,99,-26,99,99,-24,-23,-25,-22,-21,99,99,99,-76,99,-174,-176,-172,99,99,-173,99,99,-189,-187,-177,99,-181,-175,99,-186,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,99,99,-198,-188,-182,99,-190,99,99,99,-199,99,99,99,99,99,-197,-184,-201,99,-180,99,-178,99,99,99,99,99,-179,99,99,99,99,-193,-192,-191,-195,99,-196,-194,]),'LPAREN':([0,1,2,3,4,5,6,8,9,10,12,13,14,15,16,17,19,20,22,23,24,25,26,27,28,29,31,32,33,34,35,36,38,40,41,42,44,45,46,47,48,51,53,56,57,58,59,60,62,63,64,66,68,69,75,78,82,84,85,87,89,90,92,95,96,97,99,100,101,104,107,110,112,113,114,115,116,119,120,122,123,124,126,127,129,132,133,134,135,136,137,139,140,141,143,144,145,147,148,150,151,152,155,159,161,162,163,166,167,168,169,172,174,176,177,178,179,181,183,184,185,186,187,188,189,190,191,193,195,196,197,198,199,200,201,202,203,204,210,211,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,245,247,248,251,255,256,258,266,269,270,278,279,281,282,295,296,297,299,301,303,305,306,310,311,312,314,316,318,319,320,322,323,325,326,327,328,329,330,331,332,337,339,340,342,343,344,346,347,],[4,-77,-94,-127,4,-101,-92,-93,-89,-88,4,-202,-79,-91,-100,-96,4,-87,-90,50,-138,4,-205,-131,-97,-204,-95,-98,-81,-99,-102,-128,-78,-139,-142,-140,-105,50,-80,-203,-122,101,-75,-82,-209,4,-185,143,-132,-143,-141,-112,-114,4,-137,163,-26,172,174,-134,179,-24,-23,-25,-22,-21,-2,-5,143,-1,-3,101,174,4,-76,-207,143,-174,-176,-172,143,143,-173,229,143,236,101,-189,238,-187,-177,143,-181,-175,143,-1,242,-208,-186,-104,-111,-113,101,-120,101,-135,163,254,101,163,-136,143,143,101,101,143,143,-12,-11,101,101,101,101,101,-133,101,101,279,101,101,101,101,101,101,101,101,101,143,143,-206,143,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,143,143,-198,-188,-182,143,-190,143,143,143,-199,143,143,101,4,-103,-121,-163,101,-159,254,-7,-10,-9,101,279,279,-4,-197,-184,-201,143,-180,143,329,-178,-164,-158,-165,-161,-160,-6,-8,143,101,143,143,143,-179,143,143,143,-166,-162,143,-193,-192,-191,-195,143,-196,-194,]),'ELLIPSIS':([171,],[260,]),'[':([1,2,3,5,6,8,9,10,14,15,16,17,20,22,23,24,27,28,31,32,33,34,35,36,38,40,41,42,44,45,46,48,56,62,63,64,66,68,75,78,87,150,151,152,159,162,163,166,168,169,189,193,247,248,251,256,258,279,281,310,311,312,314,316,331,332,],[-77,-94,-127,-101,-92,-93,-89,-88,-79,-91,-100,-96,-87,-90,51,-138,-131,-97,-95,-98,-81,-99,-102,-128,-78,-139,-142,-140,-105,51,-80,-122,-82,-132,-143,-141,-112,-114,-137,167,-134,-104,-111,-113,-120,-135,167,255,167,-136,-133,167,-103,-121,-163,-159,255,167,167,-164,-158,-165,-161,-160,-166,-162,]),'EQ':([83,89,91,98,99,100,102,104,105,106,107,108,125,144,173,175,181,183,205,206,263,266,269,270,271,272,273,274,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-15,-44,-36,-2,-5,-29,-1,-39,198,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,198,-7,-10,-9,-43,-41,-42,-40,-34,-35,-4,-38,-37,-45,-46,-32,-31,-30,-20,-6,-8,-28,]),'ID':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,28,29,30,31,32,33,34,35,36,38,40,41,42,44,46,47,48,49,50,51,53,56,57,58,59,60,63,64,66,68,69,71,78,82,84,85,90,92,95,96,97,101,110,112,113,114,115,116,119,120,121,122,123,124,126,129,133,134,136,137,139,140,141,143,147,148,150,151,152,155,159,160,161,163,167,168,170,172,174,176,177,178,179,180,182,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,211,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,245,247,248,255,278,295,296,297,299,301,303,306,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[27,-77,-94,-127,27,-101,-92,-93,-89,-88,44,27,-202,-79,-91,-100,-96,-107,27,-87,48,-90,-138,27,-205,-97,-204,-106,-95,-98,-81,-99,-102,-128,-78,-139,-142,-140,-105,-80,-203,-122,74,80,104,-75,-82,-209,27,-185,144,-143,-141,-112,-114,27,74,27,-26,104,104,-24,-23,-25,-22,-21,104,104,104,27,-76,-207,104,-174,-176,212,-172,144,104,-173,144,104,-189,-187,-177,144,-181,-175,104,-208,-186,-104,-111,-113,104,-120,74,104,27,104,27,259,104,104,104,104,104,104,269,270,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-206,144,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,104,104,-198,-188,-182,104,-190,144,104,104,-199,144,104,104,27,-103,-121,104,104,-197,-184,-201,104,-180,144,-178,104,104,104,104,144,-179,144,104,144,144,-193,-192,-191,-195,144,-196,-194,]),'STRING_LITERAL':([51,53,59,60,82,84,85,90,92,95,96,97,101,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,148,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,278,295,296,297,299,301,303,306,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[107,-75,-185,107,-26,107,107,-24,-23,-25,-22,-21,107,107,107,-76,107,-174,-176,-172,107,107,-173,107,107,-189,-187,-177,107,-181,-175,107,-186,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,107,107,-198,-188,-182,107,-190,107,107,107,-199,107,107,107,107,107,-197,-184,-201,107,-180,107,-178,107,107,107,107,107,-179,107,107,107,107,-193,-192,-191,-195,107,-196,-194,]),'NEQ':([83,89,91,98,99,100,102,104,105,106,107,108,125,144,173,175,181,183,205,206,263,266,269,270,271,272,273,274,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-15,-44,-36,-2,-5,-29,-1,-39,199,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,199,-7,-10,-9,-43,-41,-42,-40,-34,-35,-4,-38,-37,-45,-46,-32,-31,-30,-20,-6,-8,-28,]),'LOR':([83,86,88,89,91,93,98,99,100,102,103,104,105,106,107,108,109,125,144,173,175,181,183,205,206,263,264,266,269,270,271,272,273,274,275,276,277,282,283,284,285,286,287,288,289,290,291,317,318,319,321,],[-27,-49,-53,-15,-44,-51,-36,-2,-5,-29,-55,-1,-39,-47,-3,-33,203,-27,-1,-19,-17,-12,-11,-18,-16,-48,-52,-7,-10,-9,-43,-41,-42,-40,-50,-34,-35,-4,-54,-38,-37,-45,-46,-32,-31,-30,-56,-20,-6,-8,-28,]),'MOD_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,218,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'LBRACE':([11,18,21,23,27,30,37,44,45,48,53,55,59,60,61,62,75,87,114,116,117,119,120,122,123,126,129,134,136,137,139,140,141,148,162,169,189,210,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,323,326,327,328,330,337,339,340,342,343,344,346,347,],[43,-107,49,-130,-131,-106,60,70,-129,71,-75,60,-185,60,60,-132,-137,-134,-76,210,60,-174,-176,-172,60,-173,60,-189,-187,-177,60,-181,-175,-186,-135,-136,-133,210,60,-183,-200,-198,-188,-182,-190,60,-199,60,-197,-184,-201,-180,60,-178,210,60,-179,60,60,60,-193,-192,-191,-195,60,-196,-194,]),'STRUCT':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[30,30,-94,-127,-101,-92,-93,-89,-88,-202,30,-91,-100,-96,30,-87,-90,-130,-205,-131,-97,-204,-95,-98,30,-99,-102,-128,30,30,-105,-129,-203,-122,30,-75,30,-209,-185,30,30,-132,30,30,-108,30,30,-137,-134,30,-76,-207,30,30,-181,30,-208,-186,-109,-104,30,-120,-135,30,-136,30,30,-133,-206,-183,-182,-110,-103,-121,30,30,-184,]),'RSHIFT':([83,89,98,99,100,102,104,105,107,108,125,144,173,175,181,183,205,206,266,269,270,271,272,273,274,276,277,282,284,285,288,289,290,317,318,319,321,],[-27,-15,-36,-2,-5,-29,-1,196,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,196,196,196,196,-34,-35,-4,-38,-37,-32,-31,-30,-20,-6,-8,-28,]),'XOR_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,219,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'INT':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[31,31,-94,-127,-101,-92,-93,-89,-88,-202,31,-91,-100,-96,31,-87,-90,-130,-205,-131,-97,-204,-95,-98,31,-99,-102,-128,31,31,-105,-129,-203,-122,31,-75,31,-209,-185,31,31,-132,31,31,-108,31,31,-137,-134,31,-76,-207,31,31,-181,31,-208,-186,-109,-104,31,-120,-135,31,-136,31,31,-133,-206,-183,-182,-110,-103,-121,31,31,-184,]),'DOUBLE':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[32,32,-94,-127,-101,-92,-93,-89,-88,-202,32,-91,-100,-96,32,-87,-90,-130,-205,-131,-97,-204,-95,-98,32,-99,-102,-128,32,32,-105,-129,-203,-122,32,-75,32,-209,-185,32,32,-132,32,32,-108,32,32,-137,-134,32,-76,-207,32,32,-181,32,-208,-186,-109,-104,32,-120,-135,32,-136,32,32,-133,-206,-183,-182,-110,-103,-121,32,32,-184,]),'FLOAT':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[28,28,-94,-127,-101,-92,-93,-89,-88,-202,28,-91,-100,-96,28,-87,-90,-130,-205,-131,-97,-204,-95,-98,28,-99,-102,-128,28,28,-105,-129,-203,-122,28,-75,28,-209,-185,28,28,-132,28,28,-108,28,28,-137,-134,28,-76,-207,28,28,-181,28,-208,-186,-109,-104,28,-120,-135,28,-136,28,28,-133,-206,-183,-182,-110,-103,-121,28,28,-184,]),'OR_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,221,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'SIGNED':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,43,44,45,47,48,50,53,55,57,59,60,61,62,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[34,34,-94,-127,-101,-92,-93,-89,-88,-202,34,-91,-100,-96,34,-87,-90,-130,-205,-131,-97,-204,-95,-98,34,-99,-102,-128,34,34,-105,-129,-203,-122,34,-75,34,-209,-185,34,34,-132,34,34,-108,34,34,-137,-134,34,-76,-207,34,34,-181,34,-208,-186,-109,-104,34,-120,-135,34,-136,34,34,-133,-206,-183,-182,-110,-103,-121,34,34,-184,]),'LT':([83,89,91,98,99,100,102,104,105,107,108,125,144,173,175,181,183,205,206,266,269,270,271,272,273,274,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-15,187,-36,-2,-5,-29,-1,-39,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-43,-41,-42,-40,-34,-35,-4,-38,-37,187,187,-32,-31,-30,-20,-6,-8,-28,]),'BREAK':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,138,-76,-174,-176,-172,138,-173,138,-189,-187,-177,138,-181,-175,-186,138,-183,-200,-198,-188,-182,-190,138,-199,138,-197,-184,-201,-180,138,-178,138,-179,138,138,138,-193,-192,-191,-195,138,-196,-194,]),'LEQ':([83,89,91,98,99,100,102,104,105,107,108,125,144,173,175,181,183,205,206,266,269,270,271,272,273,274,276,277,282,284,285,286,287,288,289,290,317,318,319,321,],[-27,-15,186,-36,-2,-5,-29,-1,-39,-3,-33,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-43,-41,-42,-40,-34,-35,-4,-38,-37,186,186,-32,-31,-30,-20,-6,-8,-28,]),'CONTINUE':([53,59,60,114,119,120,122,123,126,129,134,136,137,139,140,141,148,213,214,215,230,231,232,234,235,239,241,295,296,297,301,303,306,326,327,328,330,337,339,340,342,343,344,346,347,],[-75,-185,128,-76,-174,-176,-172,128,-173,128,-189,-187,-177,128,-181,-175,-186,128,-183,-200,-198,-188,-182,-190,128,-199,128,-197,-184,-201,-180,128,-178,128,-179,128,128,128,-193,-192,-191,-195,128,-196,-194,]),'VOLATILE':([0,1,2,3,5,6,7,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,40,41,43,44,45,47,48,50,53,55,57,59,60,61,62,63,65,66,67,68,70,75,87,101,114,115,117,123,140,143,147,148,149,150,157,159,162,163,169,171,172,189,211,214,232,246,247,248,254,279,296,],[36,36,-94,-127,-101,-92,36,-93,-89,-88,-202,36,-91,-100,-96,36,-87,-90,-130,-205,-131,-97,-204,-95,-98,36,-99,-102,-128,36,36,-142,36,-105,-129,-203,-122,36,-75,36,-209,-185,36,36,-132,-143,36,36,-108,36,36,-137,-134,36,-76,-207,36,36,-181,36,-208,-186,-109,-104,36,-120,-135,36,-136,36,36,-133,-206,-183,-182,-110,-103,-121,36,36,-184,]),'REGISTER':([0,1,2,3,5,6,8,9,10,13,14,15,16,17,19,20,22,23,26,27,28,29,31,32,33,34,35,36,37,44,45,47,48,50,53,55,57,59,60,61,62,75,87,114,115,117,123,140,147,148,150,159,162,163,169,171,189,211,214,232,247,248,254,279,296,],[15,15,-94,-127,-101,-92,-93,-89,-88,-202,15,-91,-100,-96,15,-87,-90,-130,-205,-131,-97,-204,-95,-98,15,-99,-102,-128,15,-105,-129,-203,-122,15,-75,15,-209,-185,15,15,-132,-137,-134,-76,-207,15,15,-181,-208,-186,-104,-120,-135,15,-136,15,-133,-206,-183,-182,-103,-121,15,15,-184,]),'MOD':([83,89,99,100,102,104,107,108,125,144,173,175,181,183,205,206,266,269,270,276,277,282,288,289,290,317,318,319,321,],[-27,-15,-2,-5,-29,-1,-3,200,-27,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,200,200,-4,-32,-31,-30,-20,-6,-8,-28,]),'SUB_ASSIGN':([83,89,99,100,104,107,125,144,173,175,181,183,205,206,266,269,270,282,317,318,319,321,],[-27,-15,-2,-5,-1,-3,217,-1,-19,-17,-12,-11,-18,-16,-7,-10,-9,-4,-20,-6,-8,-28,]),'INC':([51,53,59,60,82,84,85,89,90,92,95,96,97,99,100,101,104,107,110,112,114,116,119,120,122,123,124,126,129,133,134,136,137,139,140,141,143,144,148,155,161,167,172,174,176,177,178,179,181,183,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,214,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,238,239,241,242,243,255,266,269,270,278,282,295,296,297,299,301,303,306,318,319,320,322,323,325,326,327,328,329,330,337,339,340,342,343,344,346,347,],[112,-75,-185,112,-26,112,112,183,-24,-23,-25,-22,-21,-2,-5,112,-1,-3,112,112,-76,112,-174,-176,-172,112,112,-173,112,112,-189,-187,-177,112,-181,-175,112,-1,-186,112,112,112,112,112,112,112,112,112,-12,-11,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-183,-200,-66,-64,-70,-68,-71,-65,-67,-69,-62,-63,-61,112,112,-198,-188,-182,112,-190,112,112,112,-199,112,112,112,112,-7,-10,-9,112,-4,-197,-184,-201,112,-180,112,-178,-6,-8,112,112,112,112,112,-179,112,112,112,112,-193,-192,-191,-195,112,-196,-194,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'storage_class_specifier':([0,1,14,19,33,37,50,55,60,61,117,123,163,171,254,279,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'expression_statement':([60,123,129,139,213,229,235,241,299,303,326,328,330,337,344,],[119,119,119,119,119,299,119,119,325,119,119,119,119,119,119,]),'type_name':([101,143,172,],[192,192,262,]),'unary_expression':([51,60,84,85,101,110,112,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,228,229,233,235,236,238,241,242,243,255,278,299,303,320,322,323,325,326,328,329,330,337,344,],[83,125,173,175,125,83,206,125,125,125,125,83,125,125,83,83,83,125,125,83,83,125,125,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,125,125,125,125,125,125,125,125,125,125,125,83,83,83,125,125,125,83,125,125,125,125,125,125,125,125,]),'conditional_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,178,179,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[111,146,146,146,146,146,146,111,146,146,111,111,111,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,111,111,146,146,146,334,146,146,146,146,146,146,146,146,]),'struct_or_union_specifier':([0,1,14,19,33,37,43,50,55,60,61,65,66,68,70,101,117,123,143,157,163,171,172,254,279,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'exclusive_or_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,177,178,179,195,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,264,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'initializer':([116,210,323,],[208,293,335,]),'iteration_statement':([60,123,129,139,213,235,241,303,326,328,330,337,344,],[120,120,120,120,120,120,120,120,120,120,120,120,120,]),'init_declarator_list':([25,58,],[52,52,]),'struct_declaration_list':([43,70,],[65,157,]),'enumerator':([49,71,160,],[72,72,249,]),'abstract_declarator':([78,163,193,279,],[164,253,280,253,]),'pointer':([0,4,7,19,25,40,58,69,78,113,163,193,245,279,],[12,12,42,12,12,64,12,12,168,12,168,281,12,281,]),'and_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,177,178,179,188,195,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,275,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'external_declaration':([0,19,],[13,47,]),'type_specifier':([0,1,14,19,33,37,43,50,55,60,61,65,66,68,70,101,117,123,143,157,163,171,172,254,279,],[14,14,14,14,14,14,66,14,14,14,14,66,66,66,66,66,14,14,66,66,14,14,66,14,14,]),'compound_statement':([37,55,60,61,117,123,129,139,213,235,241,303,326,328,330,337,344,],[57,115,126,147,211,126,126,126,126,126,126,126,126,126,126,126,126,]),'inclusive_or_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,178,179,195,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,283,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'logical_or_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,178,179,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'selection_statement':([60,123,129,139,213,235,241,303,326,328,330,337,344,],[141,141,141,141,141,141,141,141,141,141,141,141,141,]),'postfix_expression':([51,60,84,85,101,110,112,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,228,229,233,235,236,238,241,242,243,255,278,299,303,320,322,323,325,326,328,329,330,337,344,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'relational_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,188,195,198,199,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,286,287,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'statement':([60,123,129,139,213,235,241,303,326,328,330,337,344,],[136,136,231,240,231,301,306,327,339,340,342,343,346,]),'unary_operator':([51,60,84,85,101,110,112,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,228,229,233,235,236,238,241,242,243,255,278,299,303,320,322,323,325,326,328,329,330,337,344,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'cast_expression':([51,60,101,110,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,228,229,233,235,236,238,241,242,243,255,278,299,303,320,322,323,325,326,328,329,330,337,344,],[102,102,102,205,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,288,289,290,102,102,102,102,102,102,102,102,102,102,102,102,102,102,321,102,102,102,102,102,102,102,102,102,102,102,102,]),'initializer_list':([210,],[294,]),'struct_declarator_list':([69,],[156,]),'multiplicative_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,276,277,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'translation_unit':([0,],[19,]),'assignment_operator':([125,],[228,]),'struct_or_union':([0,1,14,19,33,37,43,50,55,60,61,65,66,68,70,101,117,123,143,157,163,171,172,254,279,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'struct_declaration':([43,65,70,157,],[67,149,67,149,]),'assignment_expression':([60,101,116,123,124,129,139,143,172,174,178,179,204,210,213,228,229,233,235,236,238,241,242,299,303,320,323,325,326,328,329,330,337,344,],[142,142,209,142,142,142,142,142,142,142,142,267,142,209,142,298,142,300,142,142,142,142,142,142,142,333,209,142,142,142,142,142,142,142,]),'parameter_type_list':([50,163,254,279,],[76,252,313,252,]),'parameter_declaration':([50,163,171,254,279,],[77,77,261,77,77,]),'direct_declarator':([0,4,12,19,25,58,69,78,113,163,168,245,],[23,23,45,23,23,23,23,23,23,23,45,23,]),'type_qualifier_list':([7,],[40,]),'argument_expression_list':([179,],[268,]),'direct_abstract_declarator':([78,163,168,193,279,281,],[166,166,258,166,166,258,]),'additive_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,195,196,197,198,199,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,284,285,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'equality_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,188,195,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,263,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'primary_expression':([51,60,84,85,101,110,112,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,190,191,195,196,197,198,199,200,201,202,203,204,210,213,228,229,233,235,236,238,241,242,243,255,278,299,303,320,322,323,325,326,328,329,330,337,344,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'declaration_specifiers':([0,1,14,19,33,37,50,55,60,61,117,123,163,171,254,279,],[25,38,46,25,56,58,78,58,58,58,58,58,78,78,78,78,]),'declaration':([0,19,37,55,60,61,117,123,],[26,26,59,59,59,148,148,148,]),'logical_and_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,178,179,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,291,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'declarator':([0,4,19,25,58,69,78,113,163,245,],[37,39,37,55,118,154,165,118,39,154,]),'shift_expression':([51,60,101,116,123,124,129,133,139,143,155,161,167,172,174,176,177,178,179,184,185,186,187,188,195,198,199,203,204,210,213,228,229,233,235,236,238,241,242,243,255,299,303,320,322,323,325,326,328,329,330,337,344,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,271,272,273,274,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'identifier_list':([50,],[79,]),'jump_statement':([60,123,129,139,213,235,241,303,326,328,330,337,344,],[137,137,137,137,137,137,137,137,137,137,137,137,137,]),'struct_declarator':([69,245,],[153,309,]),'function_definition':([0,19,],[29,29,]),'parameter_list':([50,163,254,279,],[81,81,81,81,]),'enum_specifier':([0,1,14,19,33,37,43,50,55,60,61,65,66,68,70,101,117,123,143,157,163,171,172,254,279,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'type_qualifier':([0,1,7,14,19,33,37,40,43,50,55,60,61,65,66,68,70,101,117,123,143,157,163,171,172,254,279,],[33,33,41,33,33,33,33,63,68,33,33,33,33,68,68,68,68,68,33,33,68,68,33,33,68,33,33,]),'enumerator_list':([49,71,],[73,158,]),'labeled_statement':([60,123,129,139,213,235,241,303,326,328,330,337,344,],[122,122,122,122,122,122,122,122,122,122,122,122,122,]),'declaration_list':([37,55,60,],[61,117,123,]),'specifier_qualifier_list':([43,65,66,68,70,101,143,157,172,],[69,69,151,152,69,193,193,69,193,]),'constant_expression':([51,133,155,161,167,243,255,],[94,237,244,250,257,308,315,]),'init_declarator':([25,58,113,],[54,54,207,]),'statement_list':([60,123,],[129,213,]),'expression':([60,101,123,124,129,139,143,172,174,178,204,213,229,235,236,238,241,242,299,303,325,326,328,329,330,337,344,],[130,194,130,216,130,130,194,194,194,265,292,130,130,130,302,304,130,307,130,130,338,130,130,341,130,130,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression_1','myparser.py',15),
  ('primary_expression -> INT_CONST_DEC','primary_expression',1,'p_primary_expression_2','myparser.py',18),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression_3','myparser.py',21),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_4','myparser.py',24),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','myparser.py',27),
  ('postfix_expression -> postfix_expression LSQUARE expression RSQUARE','postfix_expression',4,'p_postfix_expression_2','myparser.py',30),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','myparser.py',33),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression_4','myparser.py',36),
  ('postfix_expression -> postfix_expression DOT ID','postfix_expression',3,'p_postfix_expression_5','myparser.py',39),
  ('postfix_expression -> postfix_expression PTR_OP ID','postfix_expression',3,'p_postfix_expression_6','myparser.py',42),
  ('postfix_expression -> postfix_expression INC','postfix_expression',2,'p_postfix_expression_7','myparser.py',45),
  ('postfix_expression -> postfix_expression DEC','postfix_expression',2,'p_postfix_expression_8','myparser.py',48),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list_1','myparser.py',51),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list_2','myparser.py',54),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','myparser.py',57),
  ('unary_expression -> INC unary_expression','unary_expression',2,'p_unary_expression_2','myparser.py',60),
  ('unary_expression -> DEC unary_expression','unary_expression',2,'p_unary_expression_3','myparser.py',63),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_4','myparser.py',66),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_5','myparser.py',69),
  ('unary_expression -> SIZEOF LPAREN type_name RPAREN','unary_expression',4,'p_unary_expression_6','myparser.py',72),
  ('unary_operator -> BAND','unary_operator',1,'p_unary_operator_1','myparser.py',75),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator_2','myparser.py',78),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator_3','myparser.py',81),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator_4','myparser.py',84),
  ('unary_operator -> BNOT','unary_operator',1,'p_unary_operator_5','myparser.py',87),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator_6','myparser.py',90),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','myparser.py',93),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','myparser.py',96),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression_1','myparser.py',99),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression_2','myparser.py',102),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression_3','myparser.py',105),
  ('multiplicative_expression -> multiplicative_expression MOD cast_expression','multiplicative_expression',3,'p_multiplicative_expression_4','myparser.py',108),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression_1','myparser.py',111),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression_2','myparser.py',114),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression_3','myparser.py',117),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression_1','myparser.py',120),
  ('shift_expression -> shift_expression LSHIFT additive_expression','shift_expression',3,'p_shift_expression_2','myparser.py',123),
  ('shift_expression -> shift_expression RSHIFT additive_expression','shift_expression',3,'p_shift_expression_3','myparser.py',126),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression_1','myparser.py',129),
  ('relational_expression -> relational_expression LT shift_expression','relational_expression',3,'p_relational_expression_2','myparser.py',132),
  ('relational_expression -> relational_expression GT shift_expression','relational_expression',3,'p_relational_expression_3','myparser.py',135),
  ('relational_expression -> relational_expression LEQ shift_expression','relational_expression',3,'p_relational_expression_4','myparser.py',138),
  ('relational_expression -> relational_expression GEQ shift_expression','relational_expression',3,'p_relational_expression_5','myparser.py',141),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','myparser.py',144),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression_2','myparser.py',147),
  ('equality_expression -> equality_expression NEQ relational_expression','equality_expression',3,'p_equality_expression_3','myparser.py',150),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression_1','myparser.py',153),
  ('and_expression -> and_expression BAND equality_expression','and_expression',3,'p_and_expression_2','myparser.py',156),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression_1','myparser.py',159),
  ('exclusive_or_expression -> exclusive_or_expression XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression_2','myparser.py',162),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression_1','myparser.py',165),
  ('inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression_2','myparser.py',168),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression_1','myparser.py',171),
  ('logical_and_expression -> logical_and_expression LAND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression_2','myparser.py',174),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression_1','myparser.py',177),
  ('logical_or_expression -> logical_or_expression LOR logical_and_expression','logical_or_expression',3,'p_logical_or_expression_2','myparser.py',180),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression_1','myparser.py',183),
  ('conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression_2','myparser.py',186),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression_1','myparser.py',189),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression_2','myparser.py',192),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator_1','myparser.py',195),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator_2','myparser.py',198),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator_3','myparser.py',201),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator_4','myparser.py',204),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator_5','myparser.py',207),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator_6','myparser.py',210),
  ('assignment_operator -> LSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator_7','myparser.py',213),
  ('assignment_operator -> RSHIFT_ASSIGN','assignment_operator',1,'p_assignment_operator_8','myparser.py',216),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator_9','myparser.py',219),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator_10','myparser.py',222),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator_11','myparser.py',225),
  ('expression -> assignment_expression','expression',1,'p_expression_1','myparser.py',228),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','myparser.py',231),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression_1','myparser.py',234),
  ('declaration -> declaration_specifiers SEMICOLON','declaration',2,'p_declaration_1','myparser.py',237),
  ('declaration -> declaration_specifiers init_declarator_list SEMICOLON','declaration',3,'p_declaration_2','myparser.py',240),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers_1','myparser.py',243),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_2','myparser.py',246),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers_3','myparser.py',249),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_4','myparser.py',252),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers_5','myparser.py',255),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_6','myparser.py',258),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list_1','myparser.py',261),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list_2','myparser.py',264),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator_1','myparser.py',267),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator_2','myparser.py',270),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier_1','myparser.py',273),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier_2','myparser.py',276),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier_3','myparser.py',279),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier_4','myparser.py',282),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier_5','myparser.py',285),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_1','myparser.py',288),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_2','myparser.py',291),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier_3','myparser.py',294),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_4','myparser.py',297),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier_5','myparser.py',300),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier_6','myparser.py',303),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier_7','myparser.py',306),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier_8','myparser.py',309),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier_9','myparser.py',312),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier_10','myparser.py',315),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier_11','myparser.py',318),
  ('struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',5,'p_struct_or_union_specifier_1','myparser.py',321),
  ('struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE','struct_or_union_specifier',4,'p_struct_or_union_specifier_2','myparser.py',324),
  ('struct_or_union_specifier -> struct_or_union ID','struct_or_union_specifier',2,'p_struct_or_union_specifier_3','myparser.py',327),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union_1','myparser.py',330),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union_2','myparser.py',333),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list_1','myparser.py',336),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list_2','myparser.py',339),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON','struct_declaration',3,'p_struct_declaration_1','myparser.py',342),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list_1','myparser.py',345),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_2','myparser.py',348),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list_3','myparser.py',351),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_4','myparser.py',354),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list_1','myparser.py',357),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list_2','myparser.py',360),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator_1','myparser.py',363),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator_2','myparser.py',366),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator_3','myparser.py',369),
  ('enum_specifier -> ENUM LBRACE enumerator_list RBRACE','enum_specifier',4,'p_enum_specifier_1','myparser.py',372),
  ('enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE','enum_specifier',5,'p_enum_specifier_2','myparser.py',375),
  ('enum_specifier -> ENUM ID','enum_specifier',2,'p_enum_specifier_3','myparser.py',378),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list_1','myparser.py',381),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list_2','myparser.py',384),
  ('enumerator -> ID','enumerator',1,'p_enumerator_1','myparser.py',387),
  ('enumerator -> ID ASSIGN constant_expression','enumerator',3,'p_enumerator_2','myparser.py',390),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier_1','myparser.py',393),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier_2','myparser.py',396),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_1','myparser.py',399),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_2','myparser.py',402),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator_1','myparser.py',405),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','myparser.py',408),
  ('direct_declarator -> direct_declarator [ constant_expression RSQUARE','direct_declarator',4,'p_direct_declarator_3','myparser.py',411),
  ('direct_declarator -> direct_declarator [ RSQUARE','direct_declarator',3,'p_direct_declarator_4','myparser.py',414),
  ('direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN','direct_declarator',4,'p_direct_declarator_5','myparser.py',417),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator_6','myparser.py',420),
  ('direct_declarator -> direct_declarator LPAREN RPAREN','direct_declarator',3,'p_direct_declarator_7','myparser.py',423),
  ('pointer -> TIMES','pointer',1,'p_pointer_1','myparser.py',426),
  ('pointer -> * type_qualifier_list','pointer',2,'p_pointer_2','myparser.py',429),
  ('pointer -> * pointer','pointer',2,'p_pointer_3','myparser.py',432),
  ('pointer -> * type_qualifier_list pointer','pointer',3,'p_pointer_4','myparser.py',435),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list_1','myparser.py',438),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list_2','myparser.py',441),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list_1','myparser.py',444),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list_2','myparser.py',447),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','myparser.py',450),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','myparser.py',453),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration_1','myparser.py',456),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration_2','myparser.py',459),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration_3','myparser.py',462),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list_1','myparser.py',465),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list_2','myparser.py',468),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name_1','myparser.py',471),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name_2','myparser.py',474),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator_1','myparser.py',477),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator_2','myparser.py',480),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator_3','myparser.py',483),
  ('direct_abstract_declarator -> LPAREN abstract_declarator RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_1','myparser.py',486),
  ('direct_abstract_declarator -> [ RSQUARE','direct_abstract_declarator',2,'p_direct_abstract_declarator_2','myparser.py',489),
  ('direct_abstract_declarator -> [ constant_expression RSQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator_3','myparser.py',492),
  ('direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator_4','myparser.py',495),
  ('direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE','direct_abstract_declarator',4,'p_direct_abstract_declarator_5','myparser.py',498),
  ('direct_abstract_declarator -> LPAREN RPAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator_6','myparser.py',501),
  ('direct_abstract_declarator -> LPAREN parameter_type_list RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_7','myparser.py',504),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_8','myparser.py',507),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator_9','myparser.py',510),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','myparser.py',513),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','myparser.py',516),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_3','myparser.py',519),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list_1','myparser.py',522),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list_2','myparser.py',525),
  ('statement -> labeled_statement','statement',1,'p_statement_1','myparser.py',528),
  ('statement -> compound_statement','statement',1,'p_statement_2','myparser.py',531),
  ('statement -> expression_statement','statement',1,'p_statement_3','myparser.py',534),
  ('statement -> selection_statement','statement',1,'p_statement_4','myparser.py',537),
  ('statement -> iteration_statement','statement',1,'p_statement_5','myparser.py',540),
  ('statement -> jump_statement','statement',1,'p_statement_6','myparser.py',543),
  ('labeled_statement -> ID COLON statement','labeled_statement',3,'p_labeled_statement_1','myparser.py',546),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement_2','myparser.py',549),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement_3','myparser.py',552),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement_1','myparser.py',555),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement_2','myparser.py',558),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement_3','myparser.py',561),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement_4','myparser.py',564),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','myparser.py',567),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','myparser.py',570),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','myparser.py',573),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','myparser.py',576),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement_1','myparser.py',579),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement_2','myparser.py',582),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','myparser.py',585),
  ('selection_statement -> SWITCH LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_3','myparser.py',592),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','myparser.py',595),
  ('iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON','iteration_statement',7,'p_iteration_statement_2','myparser.py',598),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement','iteration_statement',6,'p_iteration_statement_3','myparser.py',601),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement_4','myparser.py',604),
  ('jump_statement -> GOTO ID SEMICOLON','jump_statement',3,'p_jump_statement_1','myparser.py',607),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement_2','myparser.py',610),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement_3','myparser.py',613),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement_4','myparser.py',616),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement_5','myparser.py',619),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit_1','myparser.py',622),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit_2','myparser.py',625),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','myparser.py',628),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','myparser.py',631),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','myparser.py',634),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition_2','myparser.py',637),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_3','myparser.py',640),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition_4','myparser.py',643),
]
