Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    INT_CONST_OCT
    FLOAT_CONST
    RESTRICT
    HEX_XFLOAT_CONST
    ELSE
    TYPEID
    INT_CONST_HEX
    INLINE

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> ID
Rule 2     primary_expression -> INT_CONST_DEC
Rule 3     primary_expression -> STRING_LITERAL
Rule 4     primary_expression -> LPAREN expression RPAREN
Rule 5     postfix_expression -> primary_expression
Rule 6     postfix_expression -> postfix_expression LSQUARE expression RSQUARE
Rule 7     postfix_expression -> postfix_expression LPAREN RPAREN
Rule 8     postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 9     postfix_expression -> postfix_expression DOT ID
Rule 10    postfix_expression -> postfix_expression PTR_OP ID
Rule 11    postfix_expression -> postfix_expression INC
Rule 12    postfix_expression -> postfix_expression DEC
Rule 13    argument_expression_list -> assignment_expression
Rule 14    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 15    unary_expression -> postfix_expression
Rule 16    unary_expression -> INC unary_expression
Rule 17    unary_expression -> DEC unary_expression
Rule 18    unary_expression -> unary_operator cast_expression
Rule 19    unary_expression -> SIZEOF unary_expression
Rule 20    unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 21    unary_operator -> BAND
Rule 22    unary_operator -> TIMES
Rule 23    unary_operator -> PLUS
Rule 24    unary_operator -> MINUS
Rule 25    unary_operator -> BNOT
Rule 26    unary_operator -> LNOT
Rule 27    cast_expression -> unary_expression
Rule 28    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 29    multiplicative_expression -> cast_expression
Rule 30    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 31    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 32    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 33    additive_expression -> multiplicative_expression
Rule 34    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 35    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 36    shift_expression -> additive_expression
Rule 37    shift_expression -> shift_expression LSHIFT additive_expression
Rule 38    shift_expression -> shift_expression RSHIFT additive_expression
Rule 39    relational_expression -> shift_expression
Rule 40    relational_expression -> relational_expression LT shift_expression
Rule 41    relational_expression -> relational_expression GT shift_expression
Rule 42    relational_expression -> relational_expression LEQ shift_expression
Rule 43    relational_expression -> relational_expression GEQ shift_expression
Rule 44    equality_expression -> relational_expression
Rule 45    equality_expression -> equality_expression EQ relational_expression
Rule 46    equality_expression -> equality_expression NEQ relational_expression
Rule 47    and_expression -> equality_expression
Rule 48    and_expression -> and_expression BAND equality_expression
Rule 49    exclusive_or_expression -> and_expression
Rule 50    exclusive_or_expression -> exclusive_or_expression XOR and_expression
Rule 51    inclusive_or_expression -> exclusive_or_expression
Rule 52    inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression
Rule 53    logical_and_expression -> inclusive_or_expression
Rule 54    logical_and_expression -> logical_and_expression LAND inclusive_or_expression
Rule 55    logical_or_expression -> logical_and_expression
Rule 56    logical_or_expression -> logical_or_expression LOR logical_and_expression
Rule 57    conditional_expression -> logical_or_expression
Rule 58    conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression
Rule 59    assignment_expression -> conditional_expression
Rule 60    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 61    assignment_operator -> ASSIGN
Rule 62    assignment_operator -> MUL_ASSIGN
Rule 63    assignment_operator -> DIV_ASSIGN
Rule 64    assignment_operator -> MOD_ASSIGN
Rule 65    assignment_operator -> ADD_ASSIGN
Rule 66    assignment_operator -> SUB_ASSIGN
Rule 67    assignment_operator -> LSHIFT_ASSIGN
Rule 68    assignment_operator -> RSHIFT_ASSIGN
Rule 69    assignment_operator -> AND_ASSIGN
Rule 70    assignment_operator -> XOR_ASSIGN
Rule 71    assignment_operator -> OR_ASSIGN
Rule 72    expression -> assignment_expression
Rule 73    expression -> expression COMMA assignment_expression
Rule 74    constant_expression -> conditional_expression
Rule 75    declaration -> declaration_specifiers SEMICOLON
Rule 76    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 77    declaration_specifiers -> storage_class_specifier
Rule 78    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 79    declaration_specifiers -> type_specifier
Rule 80    declaration_specifiers -> type_specifier declaration_specifiers
Rule 81    declaration_specifiers -> type_qualifier
Rule 82    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 83    init_declarator_list -> init_declarator
Rule 84    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 85    init_declarator -> declarator
Rule 86    init_declarator -> declarator ASSIGN initializer
Rule 87    storage_class_specifier -> TYPEDEF
Rule 88    storage_class_specifier -> EXTERN
Rule 89    storage_class_specifier -> STATIC
Rule 90    storage_class_specifier -> AUTO
Rule 91    storage_class_specifier -> REGISTER
Rule 92    type_specifier -> VOID
Rule 93    type_specifier -> CHAR
Rule 94    type_specifier -> SHORT
Rule 95    type_specifier -> INT
Rule 96    type_specifier -> LONG
Rule 97    type_specifier -> FLOAT
Rule 98    type_specifier -> DOUBLE
Rule 99    type_specifier -> SIGNED
Rule 100   type_specifier -> UNSIGNED
Rule 101   type_specifier -> struct_or_union_specifier
Rule 102   type_specifier -> enum_specifier
Rule 103   struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE
Rule 104   struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE
Rule 105   struct_or_union_specifier -> struct_or_union ID
Rule 106   struct_or_union -> STRUCT
Rule 107   struct_or_union -> UNION
Rule 108   struct_declaration_list -> struct_declaration
Rule 109   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 110   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 111   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 112   specifier_qualifier_list -> type_specifier
Rule 113   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 114   specifier_qualifier_list -> type_qualifier
Rule 115   struct_declarator_list -> struct_declarator
Rule 116   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 117   struct_declarator -> declarator
Rule 118   struct_declarator -> COLON constant_expression
Rule 119   struct_declarator -> declarator COLON constant_expression
Rule 120   enum_specifier -> ENUM LBRACE enumerator_list RBRACE
Rule 121   enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE
Rule 122   enum_specifier -> ENUM ID
Rule 123   enumerator_list -> enumerator
Rule 124   enumerator_list -> enumerator_list COMMA enumerator
Rule 125   enumerator -> ID
Rule 126   enumerator -> ID ASSIGN constant_expression
Rule 127   type_qualifier -> CONST
Rule 128   type_qualifier -> VOLATILE
Rule 129   declarator -> pointer direct_declarator
Rule 130   declarator -> direct_declarator
Rule 131   direct_declarator -> ID
Rule 132   direct_declarator -> LPAREN declarator RPAREN
Rule 133   direct_declarator -> direct_declarator [ constant_expression RSQUARE
Rule 134   direct_declarator -> direct_declarator [ RSQUARE
Rule 135   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 136   direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 137   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 138   pointer -> TIMES
Rule 139   pointer -> * type_qualifier_list
Rule 140   pointer -> * pointer
Rule 141   pointer -> * type_qualifier_list pointer
Rule 142   type_qualifier_list -> type_qualifier
Rule 143   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 144   parameter_type_list -> parameter_list
Rule 145   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 146   parameter_list -> parameter_declaration
Rule 147   parameter_list -> parameter_list COMMA parameter_declaration
Rule 148   parameter_declaration -> declaration_specifiers declarator
Rule 149   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 150   parameter_declaration -> declaration_specifiers
Rule 151   identifier_list -> ID
Rule 152   identifier_list -> identifier_list COMMA ID
Rule 153   type_name -> specifier_qualifier_list
Rule 154   type_name -> specifier_qualifier_list abstract_declarator
Rule 155   abstract_declarator -> pointer
Rule 156   abstract_declarator -> direct_abstract_declarator
Rule 157   abstract_declarator -> pointer direct_abstract_declarator
Rule 158   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 159   direct_abstract_declarator -> [ RSQUARE
Rule 160   direct_abstract_declarator -> [ constant_expression RSQUARE
Rule 161   direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE
Rule 162   direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE
Rule 163   direct_abstract_declarator -> LPAREN RPAREN
Rule 164   direct_abstract_declarator -> LPAREN parameter_type_list RPAREN
Rule 165   direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN
Rule 166   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN
Rule 167   initializer -> assignment_expression
Rule 168   initializer -> LBRACE initializer_list RBRACE
Rule 169   initializer -> LBRACE initializer_list COMMA RBRACE
Rule 170   initializer_list -> initializer
Rule 171   initializer_list -> initializer_list COMMA initializer
Rule 172   statement -> labeled_statement
Rule 173   statement -> compound_statement
Rule 174   statement -> expression_statement
Rule 175   statement -> selection_statement
Rule 176   statement -> iteration_statement
Rule 177   statement -> jump_statement
Rule 178   labeled_statement -> ID COLON statement
Rule 179   labeled_statement -> CASE constant_expression COLON statement
Rule 180   labeled_statement -> DEFAULT COLON statement
Rule 181   compound_statement -> LBRACE RBRACE
Rule 182   compound_statement -> LBRACE statement_list RBRACE
Rule 183   compound_statement -> LBRACE declaration_list RBRACE
Rule 184   compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 185   declaration_list -> declaration
Rule 186   declaration_list -> declaration_list declaration
Rule 187   statement_list -> statement
Rule 188   statement_list -> statement_list statement
Rule 189   expression_statement -> SEMICOLON
Rule 190   expression_statement -> expression SEMICOLON
Rule 191   selection_statement -> IF LPAREN expression RPAREN statement
Rule 192   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 193   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 194   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 195   iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 196   iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 197   jump_statement -> GOTO ID SEMICOLON
Rule 198   jump_statement -> CONTINUE SEMICOLON
Rule 199   jump_statement -> BREAK SEMICOLON
Rule 200   jump_statement -> RETURN SEMICOLON
Rule 201   jump_statement -> RETURN expression SEMICOLON
Rule 202   translation_unit -> external_declaration
Rule 203   translation_unit -> translation_unit external_declaration
Rule 204   external_declaration -> function_definition
Rule 205   external_declaration -> declaration
Rule 206   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 207   function_definition -> declaration_specifiers declarator compound_statement
Rule 208   function_definition -> declarator declaration_list compound_statement
Rule 209   function_definition -> declarator compound_statement

Terminals, with rules where they appear

*                    : 139 140 141
ADD_ASSIGN           : 65
AND_ASSIGN           : 69
ASSIGN               : 61 86 126
AUTO                 : 90
BAND                 : 21 48
BNOT                 : 25
BOR                  : 52
BREAK                : 199
CASE                 : 179
CHAR                 : 93
COLON                : 58 118 119 178 179 180
COMMA                : 14 73 84 116 124 145 147 152 169 171
CONST                : 127
CONTINUE             : 198
DEC                  : 12 17
DEFAULT              : 180
DIVIDE               : 31
DIV_ASSIGN           : 63
DO                   : 194
DOT                  : 9
DOUBLE               : 98
ELLIPSIS             : 145
ELSE                 : 
ENUM                 : 120 121 122
EQ                   : 45
EXTERN               : 88
FLOAT                : 97
FLOAT_CONST          : 
FOR                  : 195 196
GEQ                  : 43
GOTO                 : 197
GT                   : 41
HEX_XFLOAT_CONST     : 
ID                   : 1 9 10 103 105 121 122 125 126 131 151 152 178 197
IF                   : 191
INC                  : 11 16
INLINE               : 
INT                  : 95
INT_CONST_DEC        : 2
INT_CONST_HEX        : 
INT_CONST_OCT        : 
IS_TRUE              : 58
LAND                 : 54
LBRACE               : 103 104 120 121 168 169 181 182 183 184
LEQ                  : 42
LNOT                 : 26
LONG                 : 96
LOR                  : 56
LPAREN               : 4 7 8 20 28 132 135 136 137 158 163 164 165 166 191 192 193 194 195 196
LSHIFT               : 37
LSHIFT_ASSIGN        : 67
LSQUARE              : 6
LT                   : 40
MINUS                : 24 35
MOD                  : 32
MOD_ASSIGN           : 64
MUL_ASSIGN           : 62
NEQ                  : 46
OR_ASSIGN            : 71
PLUS                 : 23 34
PTR_OP               : 10
RBRACE               : 103 104 120 121 168 169 181 182 183 184
REGISTER             : 91
RESTRICT             : 
RETURN               : 200 201
RPAREN               : 4 7 8 20 28 132 135 136 137 158 163 164 165 166 191 192 193 194 195 196
RSHIFT               : 38
RSHIFT_ASSIGN        : 68
RSQUARE              : 6 133 134 159 160 161 162
SEMICOLON            : 75 76 110 189 190 194 197 198 199 200 201
SHORT                : 94
SIGNED               : 99
SIZEOF               : 19 20
STATIC               : 89
STRING_LITERAL       : 3
STRUCT               : 106
SUB_ASSIGN           : 66
SWITCH               : 192
TIMES                : 22 30 138
TYPEDEF              : 87
TYPEID               : 
UNION                : 107
UNSIGNED             : 100
VOID                 : 92
VOLATILE             : 128
WHILE                : 193 194
XOR                  : 50
XOR_ASSIGN           : 70
[                    : 133 134 159 160 161 162
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 149 154 158
additive_expression  : 34 35 36 37 38
and_expression       : 48 49 50
argument_expression_list : 8 14
assignment_expression : 13 14 60 72 73 167
assignment_operator  : 60
cast_expression      : 18 28 29 30 31 32
compound_statement   : 173 206 207 208 209
conditional_expression : 58 59 74
constant_expression  : 118 119 126 133 160 162 179
declaration          : 185 186 205
declaration_list     : 183 184 186 206 208
declaration_specifiers : 75 76 78 80 82 148 149 150 206 207
declarator           : 85 86 117 119 132 148 206 207 208 209
direct_abstract_declarator : 156 157 161 162 165 166
direct_declarator    : 129 130 133 134 135 136 137
enum_specifier       : 102
enumerator           : 123 124
enumerator_list      : 120 121 124
equality_expression  : 45 46 47 48
exclusive_or_expression : 50 51 52
expression           : 4 6 58 73 190 191 192 193 194 196 201
expression_statement : 174 195 195 196 196
external_declaration : 202 203
function_definition  : 204
identifier_list      : 136 152
inclusive_or_expression : 52 53 54
init_declarator      : 83 84
init_declarator_list : 76 84
initializer          : 86 170 171
initializer_list     : 168 169 171
iteration_statement  : 176
jump_statement       : 177
labeled_statement    : 172
logical_and_expression : 54 55 56
logical_or_expression : 56 57 58
multiplicative_expression : 30 31 32 33 34 35
parameter_declaration : 146 147
parameter_list       : 144 145 147
parameter_type_list  : 135 164 166
pointer              : 129 140 141 155 157
postfix_expression   : 6 7 8 9 10 11 12 15
primary_expression   : 5
relational_expression : 40 41 42 43 44 45 46
selection_statement  : 175
shift_expression     : 37 38 39 40 41 42 43
specifier_qualifier_list : 110 111 113 153 154
statement            : 178 179 180 187 188 191 192 193 194 195 196
statement_list       : 182 184 188
storage_class_specifier : 77 78
struct_declaration   : 108 109
struct_declaration_list : 103 104 109
struct_declarator    : 115 116
struct_declarator_list : 110 116
struct_or_union      : 103 104 105
struct_or_union_specifier : 101
translation_unit     : 203 0
type_name            : 20 28
type_qualifier       : 81 82 113 114 142 143
type_qualifier_list  : 139 141 143
type_specifier       : 79 80 111 112
unary_expression     : 16 17 19 27 60
unary_operator       : 18

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (202) translation_unit -> . external_declaration
    (203) translation_unit -> . translation_unit external_declaration
    (204) external_declaration -> . function_definition
    (205) external_declaration -> . declaration
    (206) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (207) function_definition -> . declaration_specifiers declarator compound_statement
    (208) function_definition -> . declarator declaration_list compound_statement
    (209) function_definition -> . declarator compound_statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    pointer                        shift and go to state 12
    external_declaration           shift and go to state 13
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 11
    direct_declarator              shift and go to state 23
    declaration_specifiers         shift and go to state 25
    declaration                    shift and go to state 26
    function_definition            shift and go to state 29
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 33
    translation_unit               shift and go to state 19
    declarator                     shift and go to state 37

state 1

    (77) declaration_specifiers -> storage_class_specifier .
    (78) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    *               reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    ID              reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    [               reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 38

state 2

    (94) type_specifier -> SHORT .

    VOID            reduce using rule 94 (type_specifier -> SHORT .)
    CHAR            reduce using rule 94 (type_specifier -> SHORT .)
    SHORT           reduce using rule 94 (type_specifier -> SHORT .)
    INT             reduce using rule 94 (type_specifier -> SHORT .)
    LONG            reduce using rule 94 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 94 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 94 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 94 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 94 (type_specifier -> SHORT .)
    CONST           reduce using rule 94 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 94 (type_specifier -> SHORT .)
    ENUM            reduce using rule 94 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 94 (type_specifier -> SHORT .)
    UNION           reduce using rule 94 (type_specifier -> SHORT .)
    TIMES           reduce using rule 94 (type_specifier -> SHORT .)
    *               reduce using rule 94 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 94 (type_specifier -> SHORT .)
    [               reduce using rule 94 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 94 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 94 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 94 (type_specifier -> SHORT .)
    STATIC          reduce using rule 94 (type_specifier -> SHORT .)
    AUTO            reduce using rule 94 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 94 (type_specifier -> SHORT .)
    ID              reduce using rule 94 (type_specifier -> SHORT .)
    COMMA           reduce using rule 94 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 94 (type_specifier -> SHORT .)
    COLON           reduce using rule 94 (type_specifier -> SHORT .)


state 3

    (127) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 127 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 127 (type_qualifier -> CONST .)
    STATIC          reduce using rule 127 (type_qualifier -> CONST .)
    AUTO            reduce using rule 127 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 127 (type_qualifier -> CONST .)
    VOID            reduce using rule 127 (type_qualifier -> CONST .)
    CHAR            reduce using rule 127 (type_qualifier -> CONST .)
    SHORT           reduce using rule 127 (type_qualifier -> CONST .)
    INT             reduce using rule 127 (type_qualifier -> CONST .)
    LONG            reduce using rule 127 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 127 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 127 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 127 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 127 (type_qualifier -> CONST .)
    CONST           reduce using rule 127 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 127 (type_qualifier -> CONST .)
    ENUM            reduce using rule 127 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 127 (type_qualifier -> CONST .)
    UNION           reduce using rule 127 (type_qualifier -> CONST .)
    TIMES           reduce using rule 127 (type_qualifier -> CONST .)
    *               reduce using rule 127 (type_qualifier -> CONST .)
    ID              reduce using rule 127 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 127 (type_qualifier -> CONST .)
    [               reduce using rule 127 (type_qualifier -> CONST .)
    COMMA           reduce using rule 127 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 127 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 127 (type_qualifier -> CONST .)
    COLON           reduce using rule 127 (type_qualifier -> CONST .)


state 4

    (132) direct_declarator -> LPAREN . declarator RPAREN
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN

    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    direct_declarator              shift and go to state 23
    declarator                     shift and go to state 39
    pointer                        shift and go to state 12

state 5

    (101) type_specifier -> struct_or_union_specifier .

    VOID            reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    SEMICOLON       reduce using rule 101 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 101 (type_specifier -> struct_or_union_specifier .)


state 6

    (92) type_specifier -> VOID .

    VOID            reduce using rule 92 (type_specifier -> VOID .)
    CHAR            reduce using rule 92 (type_specifier -> VOID .)
    SHORT           reduce using rule 92 (type_specifier -> VOID .)
    INT             reduce using rule 92 (type_specifier -> VOID .)
    LONG            reduce using rule 92 (type_specifier -> VOID .)
    FLOAT           reduce using rule 92 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 92 (type_specifier -> VOID .)
    SIGNED          reduce using rule 92 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 92 (type_specifier -> VOID .)
    CONST           reduce using rule 92 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 92 (type_specifier -> VOID .)
    ENUM            reduce using rule 92 (type_specifier -> VOID .)
    STRUCT          reduce using rule 92 (type_specifier -> VOID .)
    UNION           reduce using rule 92 (type_specifier -> VOID .)
    TIMES           reduce using rule 92 (type_specifier -> VOID .)
    *               reduce using rule 92 (type_specifier -> VOID .)
    LPAREN          reduce using rule 92 (type_specifier -> VOID .)
    [               reduce using rule 92 (type_specifier -> VOID .)
    RPAREN          reduce using rule 92 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 92 (type_specifier -> VOID .)
    EXTERN          reduce using rule 92 (type_specifier -> VOID .)
    STATIC          reduce using rule 92 (type_specifier -> VOID .)
    AUTO            reduce using rule 92 (type_specifier -> VOID .)
    REGISTER        reduce using rule 92 (type_specifier -> VOID .)
    ID              reduce using rule 92 (type_specifier -> VOID .)
    COMMA           reduce using rule 92 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 92 (type_specifier -> VOID .)
    COLON           reduce using rule 92 (type_specifier -> VOID .)


state 7

    (139) pointer -> * . type_qualifier_list
    (140) pointer -> * . pointer
    (141) pointer -> * . type_qualifier_list pointer
    (142) type_qualifier_list -> . type_qualifier
    (143) type_qualifier_list -> . type_qualifier_list type_qualifier
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE

    TIMES           shift and go to state 24
    *               shift and go to state 7
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36

    type_qualifier_list            shift and go to state 40
    pointer                        shift and go to state 42
    type_qualifier                 shift and go to state 41

state 8

    (93) type_specifier -> CHAR .

    VOID            reduce using rule 93 (type_specifier -> CHAR .)
    CHAR            reduce using rule 93 (type_specifier -> CHAR .)
    SHORT           reduce using rule 93 (type_specifier -> CHAR .)
    INT             reduce using rule 93 (type_specifier -> CHAR .)
    LONG            reduce using rule 93 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 93 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 93 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 93 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 93 (type_specifier -> CHAR .)
    CONST           reduce using rule 93 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 93 (type_specifier -> CHAR .)
    ENUM            reduce using rule 93 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 93 (type_specifier -> CHAR .)
    UNION           reduce using rule 93 (type_specifier -> CHAR .)
    TIMES           reduce using rule 93 (type_specifier -> CHAR .)
    *               reduce using rule 93 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 93 (type_specifier -> CHAR .)
    [               reduce using rule 93 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 93 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 93 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 93 (type_specifier -> CHAR .)
    STATIC          reduce using rule 93 (type_specifier -> CHAR .)
    AUTO            reduce using rule 93 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 93 (type_specifier -> CHAR .)
    ID              reduce using rule 93 (type_specifier -> CHAR .)
    COMMA           reduce using rule 93 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 93 (type_specifier -> CHAR .)
    COLON           reduce using rule 93 (type_specifier -> CHAR .)


state 9

    (89) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 89 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 89 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 89 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 89 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 89 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 89 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 89 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 89 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 89 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 89 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 89 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 89 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 89 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 89 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 89 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 89 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 89 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 89 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 89 (storage_class_specifier -> STATIC .)
    SEMICOLON       reduce using rule 89 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 89 (storage_class_specifier -> STATIC .)
    *               reduce using rule 89 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 89 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 89 (storage_class_specifier -> STATIC .)
    [               reduce using rule 89 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 89 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 89 (storage_class_specifier -> STATIC .)


state 10

    (88) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 88 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 88 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 88 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 88 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 88 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    SEMICOLON       reduce using rule 88 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 88 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 88 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 88 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 88 (storage_class_specifier -> EXTERN .)


state 11

    (103) struct_or_union_specifier -> struct_or_union . ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> struct_or_union . LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> struct_or_union . ID

    ID              shift and go to state 44
    LBRACE          shift and go to state 43


state 12

    (129) declarator -> pointer . direct_declarator
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    direct_declarator              shift and go to state 45

state 13

    (202) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 202 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 202 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 202 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 202 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 202 (translation_unit -> external_declaration .)
    VOID            reduce using rule 202 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 202 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 202 (translation_unit -> external_declaration .)
    INT             reduce using rule 202 (translation_unit -> external_declaration .)
    LONG            reduce using rule 202 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 202 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 202 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 202 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 202 (translation_unit -> external_declaration .)
    CONST           reduce using rule 202 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 202 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 202 (translation_unit -> external_declaration .)
    *               reduce using rule 202 (translation_unit -> external_declaration .)
    ID              reduce using rule 202 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 202 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 202 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 202 (translation_unit -> external_declaration .)
    UNION           reduce using rule 202 (translation_unit -> external_declaration .)
    $end            reduce using rule 202 (translation_unit -> external_declaration .)


state 14

    (79) declaration_specifiers -> type_specifier .
    (80) declaration_specifiers -> type_specifier . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 79 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 79 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 79 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 79 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 79 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 79 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 79 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 79 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 46

state 15

    (91) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 91 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 91 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 91 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 91 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 91 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    SEMICOLON       reduce using rule 91 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 91 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 91 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 91 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 91 (storage_class_specifier -> REGISTER .)


state 16

    (100) type_specifier -> UNSIGNED .

    VOID            reduce using rule 100 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 100 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 100 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 100 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 100 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 100 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 100 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 100 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 100 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 100 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 100 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 100 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 100 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 100 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 100 (type_specifier -> UNSIGNED .)
    *               reduce using rule 100 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 100 (type_specifier -> UNSIGNED .)
    [               reduce using rule 100 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 100 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 100 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 100 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 100 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 100 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 100 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 100 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 100 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 100 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 100 (type_specifier -> UNSIGNED .)


state 17

    (96) type_specifier -> LONG .

    VOID            reduce using rule 96 (type_specifier -> LONG .)
    CHAR            reduce using rule 96 (type_specifier -> LONG .)
    SHORT           reduce using rule 96 (type_specifier -> LONG .)
    INT             reduce using rule 96 (type_specifier -> LONG .)
    LONG            reduce using rule 96 (type_specifier -> LONG .)
    FLOAT           reduce using rule 96 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 96 (type_specifier -> LONG .)
    SIGNED          reduce using rule 96 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 96 (type_specifier -> LONG .)
    CONST           reduce using rule 96 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 96 (type_specifier -> LONG .)
    ENUM            reduce using rule 96 (type_specifier -> LONG .)
    STRUCT          reduce using rule 96 (type_specifier -> LONG .)
    UNION           reduce using rule 96 (type_specifier -> LONG .)
    TIMES           reduce using rule 96 (type_specifier -> LONG .)
    *               reduce using rule 96 (type_specifier -> LONG .)
    LPAREN          reduce using rule 96 (type_specifier -> LONG .)
    [               reduce using rule 96 (type_specifier -> LONG .)
    RPAREN          reduce using rule 96 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 96 (type_specifier -> LONG .)
    EXTERN          reduce using rule 96 (type_specifier -> LONG .)
    STATIC          reduce using rule 96 (type_specifier -> LONG .)
    AUTO            reduce using rule 96 (type_specifier -> LONG .)
    REGISTER        reduce using rule 96 (type_specifier -> LONG .)
    ID              reduce using rule 96 (type_specifier -> LONG .)
    COMMA           reduce using rule 96 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 96 (type_specifier -> LONG .)
    COLON           reduce using rule 96 (type_specifier -> LONG .)


state 18

    (107) struct_or_union -> UNION .

    ID              reduce using rule 107 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 107 (struct_or_union -> UNION .)


state 19

    (0) S' -> translation_unit .
    (203) translation_unit -> translation_unit . external_declaration
    (204) external_declaration -> . function_definition
    (205) external_declaration -> . declaration
    (206) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (207) function_definition -> . declaration_specifiers declarator compound_statement
    (208) function_definition -> . declarator declaration_list compound_statement
    (209) function_definition -> . declarator compound_statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 5
    pointer                        shift and go to state 12
    external_declaration           shift and go to state 47
    type_specifier                 shift and go to state 14
    struct_or_union                shift and go to state 11
    direct_declarator              shift and go to state 23
    declaration_specifiers         shift and go to state 25
    declaration                    shift and go to state 26
    function_definition            shift and go to state 29
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 33
    declarator                     shift and go to state 37

state 20

    (87) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    SEMICOLON       reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)


state 21

    (120) enum_specifier -> ENUM . LBRACE enumerator_list RBRACE
    (121) enum_specifier -> ENUM . ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> ENUM . ID

    LBRACE          shift and go to state 49
    ID              shift and go to state 48


state 22

    (90) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 90 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 90 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 90 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 90 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 90 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 90 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 90 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 90 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 90 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 90 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 90 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 90 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 90 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 90 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 90 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 90 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 90 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 90 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 90 (storage_class_specifier -> AUTO .)
    SEMICOLON       reduce using rule 90 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 90 (storage_class_specifier -> AUTO .)
    *               reduce using rule 90 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 90 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 90 (storage_class_specifier -> AUTO .)
    [               reduce using rule 90 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 90 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 90 (storage_class_specifier -> AUTO .)


state 23

    (130) declarator -> direct_declarator .
    (133) direct_declarator -> direct_declarator . [ constant_expression RSQUARE
    (134) direct_declarator -> direct_declarator . [ RSQUARE
    (135) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (137) direct_declarator -> direct_declarator . LPAREN RPAREN

    RPAREN          reduce using rule 130 (declarator -> direct_declarator .)
    COLON           reduce using rule 130 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 130 (declarator -> direct_declarator .)
    COMMA           reduce using rule 130 (declarator -> direct_declarator .)
    ASSIGN          reduce using rule 130 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 130 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 130 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 130 (declarator -> direct_declarator .)
    STATIC          reduce using rule 130 (declarator -> direct_declarator .)
    AUTO            reduce using rule 130 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 130 (declarator -> direct_declarator .)
    VOID            reduce using rule 130 (declarator -> direct_declarator .)
    CHAR            reduce using rule 130 (declarator -> direct_declarator .)
    SHORT           reduce using rule 130 (declarator -> direct_declarator .)
    INT             reduce using rule 130 (declarator -> direct_declarator .)
    LONG            reduce using rule 130 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 130 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 130 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 130 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 130 (declarator -> direct_declarator .)
    CONST           reduce using rule 130 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 130 (declarator -> direct_declarator .)
    ENUM            reduce using rule 130 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 130 (declarator -> direct_declarator .)
    UNION           reduce using rule 130 (declarator -> direct_declarator .)
    [               shift and go to state 51
    LPAREN          shift and go to state 50


state 24

    (138) pointer -> TIMES .

    ID              reduce using rule 138 (pointer -> TIMES .)
    LPAREN          reduce using rule 138 (pointer -> TIMES .)
    [               reduce using rule 138 (pointer -> TIMES .)
    COMMA           reduce using rule 138 (pointer -> TIMES .)
    RPAREN          reduce using rule 138 (pointer -> TIMES .)


state 25

    (206) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (207) function_definition -> declaration_specifiers . declarator compound_statement
    (75) declaration -> declaration_specifiers . SEMICOLON
    (76) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator ASSIGN initializer

    SEMICOLON       shift and go to state 53
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    direct_declarator              shift and go to state 23
    init_declarator                shift and go to state 54
    init_declarator_list           shift and go to state 52
    declarator                     shift and go to state 55
    pointer                        shift and go to state 12

state 26

    (205) external_declaration -> declaration .

    TYPEDEF         reduce using rule 205 (external_declaration -> declaration .)
    EXTERN          reduce using rule 205 (external_declaration -> declaration .)
    STATIC          reduce using rule 205 (external_declaration -> declaration .)
    AUTO            reduce using rule 205 (external_declaration -> declaration .)
    REGISTER        reduce using rule 205 (external_declaration -> declaration .)
    VOID            reduce using rule 205 (external_declaration -> declaration .)
    CHAR            reduce using rule 205 (external_declaration -> declaration .)
    SHORT           reduce using rule 205 (external_declaration -> declaration .)
    INT             reduce using rule 205 (external_declaration -> declaration .)
    LONG            reduce using rule 205 (external_declaration -> declaration .)
    FLOAT           reduce using rule 205 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 205 (external_declaration -> declaration .)
    SIGNED          reduce using rule 205 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 205 (external_declaration -> declaration .)
    CONST           reduce using rule 205 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 205 (external_declaration -> declaration .)
    TIMES           reduce using rule 205 (external_declaration -> declaration .)
    *               reduce using rule 205 (external_declaration -> declaration .)
    ID              reduce using rule 205 (external_declaration -> declaration .)
    LPAREN          reduce using rule 205 (external_declaration -> declaration .)
    ENUM            reduce using rule 205 (external_declaration -> declaration .)
    STRUCT          reduce using rule 205 (external_declaration -> declaration .)
    UNION           reduce using rule 205 (external_declaration -> declaration .)
    $end            reduce using rule 205 (external_declaration -> declaration .)


state 27

    (131) direct_declarator -> ID .

    [               reduce using rule 131 (direct_declarator -> ID .)
    LPAREN          reduce using rule 131 (direct_declarator -> ID .)
    RPAREN          reduce using rule 131 (direct_declarator -> ID .)
    COLON           reduce using rule 131 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 131 (direct_declarator -> ID .)
    COMMA           reduce using rule 131 (direct_declarator -> ID .)
    ASSIGN          reduce using rule 131 (direct_declarator -> ID .)
    LBRACE          reduce using rule 131 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 131 (direct_declarator -> ID .)
    EXTERN          reduce using rule 131 (direct_declarator -> ID .)
    STATIC          reduce using rule 131 (direct_declarator -> ID .)
    AUTO            reduce using rule 131 (direct_declarator -> ID .)
    REGISTER        reduce using rule 131 (direct_declarator -> ID .)
    VOID            reduce using rule 131 (direct_declarator -> ID .)
    CHAR            reduce using rule 131 (direct_declarator -> ID .)
    SHORT           reduce using rule 131 (direct_declarator -> ID .)
    INT             reduce using rule 131 (direct_declarator -> ID .)
    LONG            reduce using rule 131 (direct_declarator -> ID .)
    FLOAT           reduce using rule 131 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 131 (direct_declarator -> ID .)
    SIGNED          reduce using rule 131 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 131 (direct_declarator -> ID .)
    CONST           reduce using rule 131 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 131 (direct_declarator -> ID .)
    ENUM            reduce using rule 131 (direct_declarator -> ID .)
    STRUCT          reduce using rule 131 (direct_declarator -> ID .)
    UNION           reduce using rule 131 (direct_declarator -> ID .)


state 28

    (97) type_specifier -> FLOAT .

    VOID            reduce using rule 97 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 97 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 97 (type_specifier -> FLOAT .)
    INT             reduce using rule 97 (type_specifier -> FLOAT .)
    LONG            reduce using rule 97 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 97 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 97 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 97 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 97 (type_specifier -> FLOAT .)
    CONST           reduce using rule 97 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 97 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 97 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 97 (type_specifier -> FLOAT .)
    UNION           reduce using rule 97 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 97 (type_specifier -> FLOAT .)
    *               reduce using rule 97 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 97 (type_specifier -> FLOAT .)
    [               reduce using rule 97 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 97 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 97 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 97 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 97 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 97 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 97 (type_specifier -> FLOAT .)
    ID              reduce using rule 97 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 97 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 97 (type_specifier -> FLOAT .)
    COLON           reduce using rule 97 (type_specifier -> FLOAT .)


state 29

    (204) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 204 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 204 (external_declaration -> function_definition .)
    STATIC          reduce using rule 204 (external_declaration -> function_definition .)
    AUTO            reduce using rule 204 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 204 (external_declaration -> function_definition .)
    VOID            reduce using rule 204 (external_declaration -> function_definition .)
    CHAR            reduce using rule 204 (external_declaration -> function_definition .)
    SHORT           reduce using rule 204 (external_declaration -> function_definition .)
    INT             reduce using rule 204 (external_declaration -> function_definition .)
    LONG            reduce using rule 204 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 204 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 204 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 204 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 204 (external_declaration -> function_definition .)
    CONST           reduce using rule 204 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 204 (external_declaration -> function_definition .)
    TIMES           reduce using rule 204 (external_declaration -> function_definition .)
    *               reduce using rule 204 (external_declaration -> function_definition .)
    ID              reduce using rule 204 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 204 (external_declaration -> function_definition .)
    ENUM            reduce using rule 204 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 204 (external_declaration -> function_definition .)
    UNION           reduce using rule 204 (external_declaration -> function_definition .)
    $end            reduce using rule 204 (external_declaration -> function_definition .)


state 30

    (106) struct_or_union -> STRUCT .

    ID              reduce using rule 106 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 106 (struct_or_union -> STRUCT .)


state 31

    (95) type_specifier -> INT .

    VOID            reduce using rule 95 (type_specifier -> INT .)
    CHAR            reduce using rule 95 (type_specifier -> INT .)
    SHORT           reduce using rule 95 (type_specifier -> INT .)
    INT             reduce using rule 95 (type_specifier -> INT .)
    LONG            reduce using rule 95 (type_specifier -> INT .)
    FLOAT           reduce using rule 95 (type_specifier -> INT .)
    DOUBLE          reduce using rule 95 (type_specifier -> INT .)
    SIGNED          reduce using rule 95 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 95 (type_specifier -> INT .)
    CONST           reduce using rule 95 (type_specifier -> INT .)
    VOLATILE        reduce using rule 95 (type_specifier -> INT .)
    ENUM            reduce using rule 95 (type_specifier -> INT .)
    STRUCT          reduce using rule 95 (type_specifier -> INT .)
    UNION           reduce using rule 95 (type_specifier -> INT .)
    TIMES           reduce using rule 95 (type_specifier -> INT .)
    *               reduce using rule 95 (type_specifier -> INT .)
    LPAREN          reduce using rule 95 (type_specifier -> INT .)
    [               reduce using rule 95 (type_specifier -> INT .)
    RPAREN          reduce using rule 95 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 95 (type_specifier -> INT .)
    EXTERN          reduce using rule 95 (type_specifier -> INT .)
    STATIC          reduce using rule 95 (type_specifier -> INT .)
    AUTO            reduce using rule 95 (type_specifier -> INT .)
    REGISTER        reduce using rule 95 (type_specifier -> INT .)
    ID              reduce using rule 95 (type_specifier -> INT .)
    COMMA           reduce using rule 95 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 95 (type_specifier -> INT .)
    COLON           reduce using rule 95 (type_specifier -> INT .)


state 32

    (98) type_specifier -> DOUBLE .

    VOID            reduce using rule 98 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 98 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 98 (type_specifier -> DOUBLE .)
    INT             reduce using rule 98 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 98 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 98 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 98 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 98 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 98 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 98 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 98 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 98 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 98 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 98 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 98 (type_specifier -> DOUBLE .)
    *               reduce using rule 98 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 98 (type_specifier -> DOUBLE .)
    [               reduce using rule 98 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 98 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 98 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 98 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 98 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 98 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 98 (type_specifier -> DOUBLE .)
    ID              reduce using rule 98 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 98 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 98 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 98 (type_specifier -> DOUBLE .)


state 33

    (81) declaration_specifiers -> type_qualifier .
    (82) declaration_specifiers -> type_qualifier . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    *               reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    ID              reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    [               reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 56

state 34

    (99) type_specifier -> SIGNED .

    VOID            reduce using rule 99 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 99 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 99 (type_specifier -> SIGNED .)
    INT             reduce using rule 99 (type_specifier -> SIGNED .)
    LONG            reduce using rule 99 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 99 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 99 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 99 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 99 (type_specifier -> SIGNED .)
    CONST           reduce using rule 99 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 99 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 99 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 99 (type_specifier -> SIGNED .)
    UNION           reduce using rule 99 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 99 (type_specifier -> SIGNED .)
    *               reduce using rule 99 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 99 (type_specifier -> SIGNED .)
    [               reduce using rule 99 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 99 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 99 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 99 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 99 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 99 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 99 (type_specifier -> SIGNED .)
    ID              reduce using rule 99 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 99 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 99 (type_specifier -> SIGNED .)
    COLON           reduce using rule 99 (type_specifier -> SIGNED .)


state 35

    (102) type_specifier -> enum_specifier .

    VOID            reduce using rule 102 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 102 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 102 (type_specifier -> enum_specifier .)
    INT             reduce using rule 102 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 102 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 102 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 102 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 102 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 102 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 102 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 102 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 102 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 102 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 102 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 102 (type_specifier -> enum_specifier .)
    *               reduce using rule 102 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 102 (type_specifier -> enum_specifier .)
    [               reduce using rule 102 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 102 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 102 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 102 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 102 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 102 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 102 (type_specifier -> enum_specifier .)
    ID              reduce using rule 102 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 102 (type_specifier -> enum_specifier .)
    SEMICOLON       reduce using rule 102 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 102 (type_specifier -> enum_specifier .)


state 36

    (128) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 128 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 128 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 128 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 128 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 128 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 128 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 128 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 128 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 128 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 128 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 128 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 128 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 128 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 128 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 128 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 128 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 128 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 128 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 128 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 128 (type_qualifier -> VOLATILE .)
    *               reduce using rule 128 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 128 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 128 (type_qualifier -> VOLATILE .)
    [               reduce using rule 128 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 128 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 128 (type_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 128 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 128 (type_qualifier -> VOLATILE .)


state 37

    (208) function_definition -> declarator . declaration_list compound_statement
    (209) function_definition -> declarator . compound_statement
    (185) declaration_list -> . declaration
    (186) declaration_list -> . declaration_list declaration
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    LBRACE          shift and go to state 60
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    compound_statement             shift and go to state 57
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_list               shift and go to state 61
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 58
    declaration                    shift and go to state 59

state 38

    (78) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    *               reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ID              reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    [               reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 39

    (132) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 62


state 40

    (139) pointer -> * type_qualifier_list .
    (141) pointer -> * type_qualifier_list . pointer
    (143) type_qualifier_list -> type_qualifier_list . type_qualifier
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE

    ID              reduce using rule 139 (pointer -> * type_qualifier_list .)
    LPAREN          reduce using rule 139 (pointer -> * type_qualifier_list .)
    [               reduce using rule 139 (pointer -> * type_qualifier_list .)
    COMMA           reduce using rule 139 (pointer -> * type_qualifier_list .)
    RPAREN          reduce using rule 139 (pointer -> * type_qualifier_list .)
    TIMES           shift and go to state 24
    *               shift and go to state 7
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36

    pointer                        shift and go to state 64
    type_qualifier                 shift and go to state 63

state 41

    (142) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    *               reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 142 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 142 (type_qualifier_list -> type_qualifier .)


state 42

    (140) pointer -> * pointer .

    ID              reduce using rule 140 (pointer -> * pointer .)
    LPAREN          reduce using rule 140 (pointer -> * pointer .)
    [               reduce using rule 140 (pointer -> * pointer .)
    COMMA           reduce using rule 140 (pointer -> * pointer .)
    RPAREN          reduce using rule 140 (pointer -> * pointer .)


state 43

    (104) struct_or_union_specifier -> struct_or_union LBRACE . struct_declaration_list RBRACE
    (108) struct_declaration_list -> . struct_declaration
    (109) struct_declaration_list -> . struct_declaration_list struct_declaration
    (110) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 66
    struct_declaration             shift and go to state 67
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 69
    struct_declaration_list        shift and go to state 65

state 44

    (103) struct_or_union_specifier -> struct_or_union ID . LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> struct_or_union ID .

    LBRACE          shift and go to state 70
    TYPEDEF         reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    CONST           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    ENUM            reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    STRUCT          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    UNION           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    SEMICOLON       reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    *               reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    [               reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 105 (struct_or_union_specifier -> struct_or_union ID .)


state 45

    (129) declarator -> pointer direct_declarator .
    (133) direct_declarator -> direct_declarator . [ constant_expression RSQUARE
    (134) direct_declarator -> direct_declarator . [ RSQUARE
    (135) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (137) direct_declarator -> direct_declarator . LPAREN RPAREN

    RPAREN          reduce using rule 129 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 129 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 129 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 129 (declarator -> pointer direct_declarator .)
    ASSIGN          reduce using rule 129 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 129 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 129 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 129 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 129 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 129 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 129 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 129 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 129 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 129 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 129 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 129 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 129 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 129 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 129 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 129 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 129 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 129 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 129 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 129 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 129 (declarator -> pointer direct_declarator .)
    [               shift and go to state 51
    LPAREN          shift and go to state 50


state 46

    (80) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 47

    (203) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    *               reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 203 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 203 (translation_unit -> translation_unit external_declaration .)


state 48

    (121) enum_specifier -> ENUM ID . LBRACE enumerator_list RBRACE
    (122) enum_specifier -> ENUM ID .

    LBRACE          shift and go to state 71
    TYPEDEF         reduce using rule 122 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 122 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 122 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 122 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 122 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 122 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 122 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 122 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 122 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 122 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 122 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 122 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 122 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 122 (enum_specifier -> ENUM ID .)
    CONST           reduce using rule 122 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 122 (enum_specifier -> ENUM ID .)
    ENUM            reduce using rule 122 (enum_specifier -> ENUM ID .)
    STRUCT          reduce using rule 122 (enum_specifier -> ENUM ID .)
    UNION           reduce using rule 122 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 122 (enum_specifier -> ENUM ID .)
    *               reduce using rule 122 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 122 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 122 (enum_specifier -> ENUM ID .)
    [               reduce using rule 122 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 122 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 122 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 122 (enum_specifier -> ENUM ID .)
    SEMICOLON       reduce using rule 122 (enum_specifier -> ENUM ID .)


state 49

    (120) enum_specifier -> ENUM LBRACE . enumerator_list RBRACE
    (123) enumerator_list -> . enumerator
    (124) enumerator_list -> . enumerator_list COMMA enumerator
    (125) enumerator -> . ID
    (126) enumerator -> . ID ASSIGN constant_expression

    ID              shift and go to state 74

    enumerator_list                shift and go to state 73
    enumerator                     shift and go to state 72

state 50

    (135) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (136) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (137) direct_declarator -> direct_declarator LPAREN . RPAREN
    (144) parameter_type_list -> . parameter_list
    (145) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (151) identifier_list -> . ID
    (152) identifier_list -> . identifier_list COMMA ID
    (146) parameter_list -> . parameter_declaration
    (147) parameter_list -> . parameter_list COMMA parameter_declaration
    (148) parameter_declaration -> . declaration_specifiers declarator
    (149) parameter_declaration -> . declaration_specifiers abstract_declarator
    (150) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    RPAREN          shift and go to state 75
    ID              shift and go to state 80
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    parameter_list                 shift and go to state 81
    parameter_type_list            shift and go to state 76
    parameter_declaration          shift and go to state 77
    type_qualifier                 shift and go to state 33
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 78
    identifier_list                shift and go to state 79

state 51

    (133) direct_declarator -> direct_declarator [ . constant_expression RSQUARE
    (134) direct_declarator -> direct_declarator [ . RSQUARE
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    RSQUARE         shift and go to state 87
    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    multiplicative_expression      shift and go to state 108
    unary_expression               shift and go to state 83
    exclusive_or_expression        shift and go to state 93
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 94
    relational_expression          shift and go to state 91

state 52

    (76) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (84) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 114
    COMMA           shift and go to state 113


state 53

    (75) declaration -> declaration_specifiers SEMICOLON .

    LBRACE          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    EXTERN          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    STATIC          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    AUTO            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    REGISTER        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    VOID            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SHORT           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    INT             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    LONG            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SIGNED          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CONST           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    ENUM            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    STRUCT          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    UNION           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    TIMES           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    *               reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    ID              reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    LPAREN          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    $end            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    RBRACE          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CASE            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    IF              reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SWITCH          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    WHILE           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DO              reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    FOR             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    GOTO            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    BREAK           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    RETURN          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    INC             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DEC             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    BAND            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    PLUS            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    MINUS           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    BNOT            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    LNOT            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    INT_CONST_DEC   reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    STRING_LITERAL  reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)


state 54

    (83) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 83 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 83 (init_declarator_list -> init_declarator .)


state 55

    (206) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (207) function_definition -> declaration_specifiers declarator . compound_statement
    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . ASSIGN initializer
    (185) declaration_list -> . declaration
    (186) declaration_list -> . declaration_list declaration
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 85 (init_declarator -> declarator .)
    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 116
    LBRACE          shift and go to state 60
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    compound_statement             shift and go to state 115
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_list               shift and go to state 117
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 58
    declaration                    shift and go to state 59

state 56

    (82) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMICOLON       reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 57

    (209) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 209 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 209 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 209 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 209 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 209 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 209 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 209 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 209 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 209 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 209 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 209 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 209 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 209 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 209 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 209 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 209 (function_definition -> declarator compound_statement .)
    TIMES           reduce using rule 209 (function_definition -> declarator compound_statement .)
    *               reduce using rule 209 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 209 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 209 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 209 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 209 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 209 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 209 (function_definition -> declarator compound_statement .)


state 58

    (75) declaration -> declaration_specifiers . SEMICOLON
    (76) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator ASSIGN initializer
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN

    SEMICOLON       shift and go to state 53
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    direct_declarator              shift and go to state 23
    init_declarator                shift and go to state 54
    declarator                     shift and go to state 118
    init_declarator_list           shift and go to state 52
    pointer                        shift and go to state 12

state 59

    (185) declaration_list -> declaration .

    LBRACE          reduce using rule 185 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 185 (declaration_list -> declaration .)
    EXTERN          reduce using rule 185 (declaration_list -> declaration .)
    STATIC          reduce using rule 185 (declaration_list -> declaration .)
    AUTO            reduce using rule 185 (declaration_list -> declaration .)
    REGISTER        reduce using rule 185 (declaration_list -> declaration .)
    VOID            reduce using rule 185 (declaration_list -> declaration .)
    CHAR            reduce using rule 185 (declaration_list -> declaration .)
    SHORT           reduce using rule 185 (declaration_list -> declaration .)
    INT             reduce using rule 185 (declaration_list -> declaration .)
    LONG            reduce using rule 185 (declaration_list -> declaration .)
    FLOAT           reduce using rule 185 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 185 (declaration_list -> declaration .)
    SIGNED          reduce using rule 185 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 185 (declaration_list -> declaration .)
    CONST           reduce using rule 185 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 185 (declaration_list -> declaration .)
    ENUM            reduce using rule 185 (declaration_list -> declaration .)
    STRUCT          reduce using rule 185 (declaration_list -> declaration .)
    UNION           reduce using rule 185 (declaration_list -> declaration .)
    RBRACE          reduce using rule 185 (declaration_list -> declaration .)
    ID              reduce using rule 185 (declaration_list -> declaration .)
    CASE            reduce using rule 185 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 185 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 185 (declaration_list -> declaration .)
    IF              reduce using rule 185 (declaration_list -> declaration .)
    SWITCH          reduce using rule 185 (declaration_list -> declaration .)
    WHILE           reduce using rule 185 (declaration_list -> declaration .)
    DO              reduce using rule 185 (declaration_list -> declaration .)
    FOR             reduce using rule 185 (declaration_list -> declaration .)
    GOTO            reduce using rule 185 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 185 (declaration_list -> declaration .)
    BREAK           reduce using rule 185 (declaration_list -> declaration .)
    RETURN          reduce using rule 185 (declaration_list -> declaration .)
    INC             reduce using rule 185 (declaration_list -> declaration .)
    DEC             reduce using rule 185 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 185 (declaration_list -> declaration .)
    BAND            reduce using rule 185 (declaration_list -> declaration .)
    TIMES           reduce using rule 185 (declaration_list -> declaration .)
    PLUS            reduce using rule 185 (declaration_list -> declaration .)
    MINUS           reduce using rule 185 (declaration_list -> declaration .)
    BNOT            reduce using rule 185 (declaration_list -> declaration .)
    LNOT            reduce using rule 185 (declaration_list -> declaration .)
    INT_CONST_DEC   reduce using rule 185 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 185 (declaration_list -> declaration .)
    LPAREN          reduce using rule 185 (declaration_list -> declaration .)


state 60

    (181) compound_statement -> LBRACE . RBRACE
    (182) compound_statement -> LBRACE . statement_list RBRACE
    (183) compound_statement -> LBRACE . declaration_list RBRACE
    (184) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (187) statement_list -> . statement
    (188) statement_list -> . statement_list statement
    (185) declaration_list -> . declaration
    (186) declaration_list -> . declaration_list declaration
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 140
    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    storage_class_specifier        shift and go to state 1
    unary_expression               shift and go to state 125
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    type_specifier                 shift and go to state 14
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    selection_statement            shift and go to state 141
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 136
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    struct_or_union                shift and go to state 11
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    declaration_specifiers         shift and go to state 58
    declaration                    shift and go to state 59
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 33
    labeled_statement              shift and go to state 122
    declaration_list               shift and go to state 123
    conditional_expression         shift and go to state 146
    statement_list                 shift and go to state 129
    expression                     shift and go to state 130

state 61

    (208) function_definition -> declarator declaration_list . compound_statement
    (186) declaration_list -> declaration_list . declaration
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    LBRACE          shift and go to state 60
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    compound_statement             shift and go to state 147
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 58
    declaration                    shift and go to state 148

state 62

    (132) direct_declarator -> LPAREN declarator RPAREN .

    [               reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 132 (direct_declarator -> LPAREN declarator RPAREN .)


state 63

    (143) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    *               reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 143 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 64

    (141) pointer -> * type_qualifier_list pointer .

    ID              reduce using rule 141 (pointer -> * type_qualifier_list pointer .)
    LPAREN          reduce using rule 141 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 141 (pointer -> * type_qualifier_list pointer .)
    COMMA           reduce using rule 141 (pointer -> * type_qualifier_list pointer .)
    RPAREN          reduce using rule 141 (pointer -> * type_qualifier_list pointer .)


state 65

    (104) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list . RBRACE
    (109) struct_declaration_list -> struct_declaration_list . struct_declaration
    (110) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    RBRACE          shift and go to state 150
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 66
    struct_declaration             shift and go to state 149
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 69

state 66

    (111) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (112) specifier_qualifier_list -> type_specifier .
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    COLON           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 66
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 151

state 67

    (108) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 108 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 108 (struct_declaration_list -> struct_declaration .)


state 68

    (113) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (114) specifier_qualifier_list -> type_qualifier .
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    COLON           reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    ID              reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    [               reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 114 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 66
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 152

state 69

    (110) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON
    (115) struct_declarator_list -> . struct_declarator
    (116) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (117) struct_declarator -> . declarator
    (118) struct_declarator -> . COLON constant_expression
    (119) struct_declarator -> . declarator COLON constant_expression
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN

    COLON           shift and go to state 155
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    struct_declarator              shift and go to state 153
    struct_declarator_list         shift and go to state 156
    direct_declarator              shift and go to state 23
    declarator                     shift and go to state 154
    pointer                        shift and go to state 12

state 70

    (103) struct_or_union_specifier -> struct_or_union ID LBRACE . struct_declaration_list RBRACE
    (108) struct_declaration_list -> . struct_declaration
    (109) struct_declaration_list -> . struct_declaration_list struct_declaration
    (110) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 66
    struct_declaration             shift and go to state 67
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 69
    struct_declaration_list        shift and go to state 157

state 71

    (121) enum_specifier -> ENUM ID LBRACE . enumerator_list RBRACE
    (123) enumerator_list -> . enumerator
    (124) enumerator_list -> . enumerator_list COMMA enumerator
    (125) enumerator -> . ID
    (126) enumerator -> . ID ASSIGN constant_expression

    ID              shift and go to state 74

    enumerator_list                shift and go to state 158
    enumerator                     shift and go to state 72

state 72

    (123) enumerator_list -> enumerator .

    RBRACE          reduce using rule 123 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 123 (enumerator_list -> enumerator .)


state 73

    (120) enum_specifier -> ENUM LBRACE enumerator_list . RBRACE
    (124) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 159
    COMMA           shift and go to state 160


state 74

    (125) enumerator -> ID .
    (126) enumerator -> ID . ASSIGN constant_expression

    RBRACE          reduce using rule 125 (enumerator -> ID .)
    COMMA           reduce using rule 125 (enumerator -> ID .)
    ASSIGN          shift and go to state 161


state 75

    (137) direct_declarator -> direct_declarator LPAREN RPAREN .

    [               reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COLON           reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ASSIGN          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    TYPEDEF         reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    EXTERN          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STATIC          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    AUTO            reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    REGISTER        reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOID            reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CHAR            reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SHORT           reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    INT             reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LONG            reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    FLOAT           reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    DOUBLE          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SIGNED          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNSIGNED        reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    CONST           reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    VOLATILE        reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ENUM            reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    STRUCT          reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    UNION           reduce using rule 137 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 76

    (135) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 162


state 77

    (146) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 146 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 146 (parameter_list -> parameter_declaration .)


state 78

    (148) parameter_declaration -> declaration_specifiers . declarator
    (149) parameter_declaration -> declaration_specifiers . abstract_declarator
    (150) parameter_declaration -> declaration_specifiers .
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (155) abstract_declarator -> . pointer
    (156) abstract_declarator -> . direct_abstract_declarator
    (157) abstract_declarator -> . pointer direct_abstract_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN
    (158) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (159) direct_abstract_declarator -> . [ RSQUARE
    (160) direct_abstract_declarator -> . [ constant_expression RSQUARE
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ RSQUARE
    (162) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression RSQUARE
    (163) direct_abstract_declarator -> . LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (165) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (166) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    COMMA           reduce using rule 150 (parameter_declaration -> declaration_specifiers .)
    RPAREN          reduce using rule 150 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 163
    [               shift and go to state 167

    direct_declarator              shift and go to state 23
    abstract_declarator            shift and go to state 164
    declarator                     shift and go to state 165
    direct_abstract_declarator     shift and go to state 166
    pointer                        shift and go to state 168

state 79

    (136) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (152) identifier_list -> identifier_list . COMMA ID

    RPAREN          shift and go to state 169
    COMMA           shift and go to state 170


state 80

    (151) identifier_list -> ID .

    RPAREN          reduce using rule 151 (identifier_list -> ID .)
    COMMA           reduce using rule 151 (identifier_list -> ID .)


state 81

    (144) parameter_type_list -> parameter_list .
    (145) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (147) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 144 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 171


state 82

    (26) unary_operator -> LNOT .

    LPAREN          reduce using rule 26 (unary_operator -> LNOT .)
    INC             reduce using rule 26 (unary_operator -> LNOT .)
    DEC             reduce using rule 26 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 26 (unary_operator -> LNOT .)
    BAND            reduce using rule 26 (unary_operator -> LNOT .)
    TIMES           reduce using rule 26 (unary_operator -> LNOT .)
    PLUS            reduce using rule 26 (unary_operator -> LNOT .)
    MINUS           reduce using rule 26 (unary_operator -> LNOT .)
    BNOT            reduce using rule 26 (unary_operator -> LNOT .)
    LNOT            reduce using rule 26 (unary_operator -> LNOT .)
    ID              reduce using rule 26 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 26 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> LNOT .)


state 83

    (27) cast_expression -> unary_expression .

    TIMES           reduce using rule 27 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 27 (cast_expression -> unary_expression .)
    MOD             reduce using rule 27 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 27 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 27 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 27 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 27 (cast_expression -> unary_expression .)
    LT              reduce using rule 27 (cast_expression -> unary_expression .)
    GT              reduce using rule 27 (cast_expression -> unary_expression .)
    LEQ             reduce using rule 27 (cast_expression -> unary_expression .)
    GEQ             reduce using rule 27 (cast_expression -> unary_expression .)
    EQ              reduce using rule 27 (cast_expression -> unary_expression .)
    NEQ             reduce using rule 27 (cast_expression -> unary_expression .)
    BAND            reduce using rule 27 (cast_expression -> unary_expression .)
    XOR             reduce using rule 27 (cast_expression -> unary_expression .)
    BOR             reduce using rule 27 (cast_expression -> unary_expression .)
    LAND            reduce using rule 27 (cast_expression -> unary_expression .)
    IS_TRUE         reduce using rule 27 (cast_expression -> unary_expression .)
    LOR             reduce using rule 27 (cast_expression -> unary_expression .)
    RSQUARE         reduce using rule 27 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 27 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 27 (cast_expression -> unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 27 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 27 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 27 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 27 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 27 (cast_expression -> unary_expression .)
    COLON           reduce using rule 27 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 27 (cast_expression -> unary_expression .)


state 84

    (19) unary_expression -> SIZEOF . unary_expression
    (20) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 172
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 173
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110

state 85

    (17) unary_expression -> DEC . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 174

    unary_expression               shift and go to state 175
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110

state 86

    (49) exclusive_or_expression -> and_expression .
    (48) and_expression -> and_expression . BAND equality_expression

    XOR             reduce using rule 49 (exclusive_or_expression -> and_expression .)
    BOR             reduce using rule 49 (exclusive_or_expression -> and_expression .)
    LAND            reduce using rule 49 (exclusive_or_expression -> and_expression .)
    IS_TRUE         reduce using rule 49 (exclusive_or_expression -> and_expression .)
    LOR             reduce using rule 49 (exclusive_or_expression -> and_expression .)
    RSQUARE         reduce using rule 49 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 49 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 49 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 49 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 49 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 49 (exclusive_or_expression -> and_expression .)
    BAND            shift and go to state 176


state 87

    (134) direct_declarator -> direct_declarator [ RSQUARE .

    [               reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    LPAREN          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    RPAREN          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    COLON           reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    SEMICOLON       reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    COMMA           reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    ASSIGN          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    LBRACE          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    TYPEDEF         reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    EXTERN          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    STATIC          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    AUTO            reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    REGISTER        reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    VOID            reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    CHAR            reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    SHORT           reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    INT             reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    LONG            reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    FLOAT           reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    DOUBLE          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    SIGNED          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    UNSIGNED        reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    CONST           reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    VOLATILE        reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    ENUM            reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    STRUCT          reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)
    UNION           reduce using rule 134 (direct_declarator -> direct_declarator [ RSQUARE .)


state 88

    (53) logical_and_expression -> inclusive_or_expression .
    (52) inclusive_or_expression -> inclusive_or_expression . BOR exclusive_or_expression

    LAND            reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    IS_TRUE         reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    LOR             reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    RSQUARE         reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    BOR             shift and go to state 177


state 89

    (15) unary_expression -> postfix_expression .
    (6) postfix_expression -> postfix_expression . LSQUARE expression RSQUARE
    (7) postfix_expression -> postfix_expression . LPAREN RPAREN
    (8) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> postfix_expression . DOT ID
    (10) postfix_expression -> postfix_expression . PTR_OP ID
    (11) postfix_expression -> postfix_expression . INC
    (12) postfix_expression -> postfix_expression . DEC

    TIMES           reduce using rule 15 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 15 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 15 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 15 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 15 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 15 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 15 (unary_expression -> postfix_expression .)
    LT              reduce using rule 15 (unary_expression -> postfix_expression .)
    GT              reduce using rule 15 (unary_expression -> postfix_expression .)
    LEQ             reduce using rule 15 (unary_expression -> postfix_expression .)
    GEQ             reduce using rule 15 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 15 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 15 (unary_expression -> postfix_expression .)
    BAND            reduce using rule 15 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 15 (unary_expression -> postfix_expression .)
    BOR             reduce using rule 15 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 15 (unary_expression -> postfix_expression .)
    IS_TRUE         reduce using rule 15 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 15 (unary_expression -> postfix_expression .)
    RSQUARE         reduce using rule 15 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 15 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 15 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 15 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 15 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 15 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 15 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    LSHIFT_ASSIGN   reduce using rule 15 (unary_expression -> postfix_expression .)
    RSHIFT_ASSIGN   reduce using rule 15 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 15 (unary_expression -> postfix_expression .)
    LSQUARE         shift and go to state 178
    LPAREN          shift and go to state 179
    DOT             shift and go to state 182
    PTR_OP          shift and go to state 180
    INC             shift and go to state 183
    DEC             shift and go to state 181


state 90

    (24) unary_operator -> MINUS .

    LPAREN          reduce using rule 24 (unary_operator -> MINUS .)
    INC             reduce using rule 24 (unary_operator -> MINUS .)
    DEC             reduce using rule 24 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 24 (unary_operator -> MINUS .)
    BAND            reduce using rule 24 (unary_operator -> MINUS .)
    TIMES           reduce using rule 24 (unary_operator -> MINUS .)
    PLUS            reduce using rule 24 (unary_operator -> MINUS .)
    MINUS           reduce using rule 24 (unary_operator -> MINUS .)
    BNOT            reduce using rule 24 (unary_operator -> MINUS .)
    LNOT            reduce using rule 24 (unary_operator -> MINUS .)
    ID              reduce using rule 24 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 24 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> MINUS .)


state 91

    (44) equality_expression -> relational_expression .
    (40) relational_expression -> relational_expression . LT shift_expression
    (41) relational_expression -> relational_expression . GT shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression
    (43) relational_expression -> relational_expression . GEQ shift_expression

    EQ              reduce using rule 44 (equality_expression -> relational_expression .)
    NEQ             reduce using rule 44 (equality_expression -> relational_expression .)
    BAND            reduce using rule 44 (equality_expression -> relational_expression .)
    XOR             reduce using rule 44 (equality_expression -> relational_expression .)
    BOR             reduce using rule 44 (equality_expression -> relational_expression .)
    LAND            reduce using rule 44 (equality_expression -> relational_expression .)
    IS_TRUE         reduce using rule 44 (equality_expression -> relational_expression .)
    LOR             reduce using rule 44 (equality_expression -> relational_expression .)
    RSQUARE         reduce using rule 44 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 44 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 44 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 44 (equality_expression -> relational_expression .)
    COLON           reduce using rule 44 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 44 (equality_expression -> relational_expression .)
    LT              shift and go to state 187
    GT              shift and go to state 185
    LEQ             shift and go to state 186
    GEQ             shift and go to state 184


state 92

    (23) unary_operator -> PLUS .

    LPAREN          reduce using rule 23 (unary_operator -> PLUS .)
    INC             reduce using rule 23 (unary_operator -> PLUS .)
    DEC             reduce using rule 23 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 23 (unary_operator -> PLUS .)
    BAND            reduce using rule 23 (unary_operator -> PLUS .)
    TIMES           reduce using rule 23 (unary_operator -> PLUS .)
    PLUS            reduce using rule 23 (unary_operator -> PLUS .)
    MINUS           reduce using rule 23 (unary_operator -> PLUS .)
    BNOT            reduce using rule 23 (unary_operator -> PLUS .)
    LNOT            reduce using rule 23 (unary_operator -> PLUS .)
    ID              reduce using rule 23 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 23 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 23 (unary_operator -> PLUS .)


state 93

    (51) inclusive_or_expression -> exclusive_or_expression .
    (50) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    BOR             reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    LAND            reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    IS_TRUE         reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    LOR             reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    RSQUARE         reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    XOR             shift and go to state 188


state 94

    (133) direct_declarator -> direct_declarator [ constant_expression . RSQUARE

    RSQUARE         shift and go to state 189


state 95

    (25) unary_operator -> BNOT .

    LPAREN          reduce using rule 25 (unary_operator -> BNOT .)
    INC             reduce using rule 25 (unary_operator -> BNOT .)
    DEC             reduce using rule 25 (unary_operator -> BNOT .)
    SIZEOF          reduce using rule 25 (unary_operator -> BNOT .)
    BAND            reduce using rule 25 (unary_operator -> BNOT .)
    TIMES           reduce using rule 25 (unary_operator -> BNOT .)
    PLUS            reduce using rule 25 (unary_operator -> BNOT .)
    MINUS           reduce using rule 25 (unary_operator -> BNOT .)
    BNOT            reduce using rule 25 (unary_operator -> BNOT .)
    LNOT            reduce using rule 25 (unary_operator -> BNOT .)
    ID              reduce using rule 25 (unary_operator -> BNOT .)
    INT_CONST_DEC   reduce using rule 25 (unary_operator -> BNOT .)
    STRING_LITERAL  reduce using rule 25 (unary_operator -> BNOT .)


state 96

    (22) unary_operator -> TIMES .

    LPAREN          reduce using rule 22 (unary_operator -> TIMES .)
    INC             reduce using rule 22 (unary_operator -> TIMES .)
    DEC             reduce using rule 22 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 22 (unary_operator -> TIMES .)
    BAND            reduce using rule 22 (unary_operator -> TIMES .)
    TIMES           reduce using rule 22 (unary_operator -> TIMES .)
    PLUS            reduce using rule 22 (unary_operator -> TIMES .)
    MINUS           reduce using rule 22 (unary_operator -> TIMES .)
    BNOT            reduce using rule 22 (unary_operator -> TIMES .)
    LNOT            reduce using rule 22 (unary_operator -> TIMES .)
    ID              reduce using rule 22 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 22 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 22 (unary_operator -> TIMES .)


state 97

    (21) unary_operator -> BAND .

    LPAREN          reduce using rule 21 (unary_operator -> BAND .)
    INC             reduce using rule 21 (unary_operator -> BAND .)
    DEC             reduce using rule 21 (unary_operator -> BAND .)
    SIZEOF          reduce using rule 21 (unary_operator -> BAND .)
    BAND            reduce using rule 21 (unary_operator -> BAND .)
    TIMES           reduce using rule 21 (unary_operator -> BAND .)
    PLUS            reduce using rule 21 (unary_operator -> BAND .)
    MINUS           reduce using rule 21 (unary_operator -> BAND .)
    BNOT            reduce using rule 21 (unary_operator -> BAND .)
    LNOT            reduce using rule 21 (unary_operator -> BAND .)
    ID              reduce using rule 21 (unary_operator -> BAND .)
    INT_CONST_DEC   reduce using rule 21 (unary_operator -> BAND .)
    STRING_LITERAL  reduce using rule 21 (unary_operator -> BAND .)


state 98

    (36) shift_expression -> additive_expression .
    (34) additive_expression -> additive_expression . PLUS multiplicative_expression
    (35) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 36 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 36 (shift_expression -> additive_expression .)
    LT              reduce using rule 36 (shift_expression -> additive_expression .)
    GT              reduce using rule 36 (shift_expression -> additive_expression .)
    LEQ             reduce using rule 36 (shift_expression -> additive_expression .)
    GEQ             reduce using rule 36 (shift_expression -> additive_expression .)
    EQ              reduce using rule 36 (shift_expression -> additive_expression .)
    NEQ             reduce using rule 36 (shift_expression -> additive_expression .)
    BAND            reduce using rule 36 (shift_expression -> additive_expression .)
    XOR             reduce using rule 36 (shift_expression -> additive_expression .)
    BOR             reduce using rule 36 (shift_expression -> additive_expression .)
    LAND            reduce using rule 36 (shift_expression -> additive_expression .)
    IS_TRUE         reduce using rule 36 (shift_expression -> additive_expression .)
    LOR             reduce using rule 36 (shift_expression -> additive_expression .)
    RSQUARE         reduce using rule 36 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 36 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 36 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 36 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 36 (shift_expression -> additive_expression .)
    COLON           reduce using rule 36 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 191


state 99

    (2) primary_expression -> INT_CONST_DEC .

    LSQUARE         reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LPAREN          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    DOT             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    PTR_OP          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    INC             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    DEC             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    ASSIGN          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LSHIFT_ASSIGN   reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    RSHIFT_ASSIGN   reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    TIMES           reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    MOD             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    PLUS            reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    MINUS           reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LT              reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    GT              reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LEQ             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    GEQ             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    EQ              reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    NEQ             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    BAND            reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    XOR             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    BOR             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LAND            reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    IS_TRUE         reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    LOR             reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    SEMICOLON       reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    COMMA           reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    RBRACE          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    RSQUARE         reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    RPAREN          reduce using rule 2 (primary_expression -> INT_CONST_DEC .)
    COLON           reduce using rule 2 (primary_expression -> INT_CONST_DEC .)


state 100

    (5) postfix_expression -> primary_expression .

    LSQUARE         reduce using rule 5 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 5 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 5 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 5 (postfix_expression -> primary_expression .)
    INC             reduce using rule 5 (postfix_expression -> primary_expression .)
    DEC             reduce using rule 5 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 5 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    LSHIFT_ASSIGN   reduce using rule 5 (postfix_expression -> primary_expression .)
    RSHIFT_ASSIGN   reduce using rule 5 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 5 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 5 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 5 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 5 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 5 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 5 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 5 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 5 (postfix_expression -> primary_expression .)
    LT              reduce using rule 5 (postfix_expression -> primary_expression .)
    GT              reduce using rule 5 (postfix_expression -> primary_expression .)
    LEQ             reduce using rule 5 (postfix_expression -> primary_expression .)
    GEQ             reduce using rule 5 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 5 (postfix_expression -> primary_expression .)
    NEQ             reduce using rule 5 (postfix_expression -> primary_expression .)
    BAND            reduce using rule 5 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 5 (postfix_expression -> primary_expression .)
    BOR             reduce using rule 5 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 5 (postfix_expression -> primary_expression .)
    IS_TRUE         reduce using rule 5 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 5 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 5 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 5 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 5 (postfix_expression -> primary_expression .)
    RSQUARE         reduce using rule 5 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 5 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 5 (postfix_expression -> primary_expression .)


state 101

    (28) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (4) primary_expression -> LPAREN . expression RPAREN
    (153) type_name -> . specifier_qualifier_list
    (154) type_name -> . specifier_qualifier_list abstract_declarator
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    ENUM            shift and go to state 21
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 93
    and_expression                 shift and go to state 86
    type_specifier                 shift and go to state 66
    inclusive_or_expression        shift and go to state 88
    type_name                      shift and go to state 192
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    struct_or_union                shift and go to state 11
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 193
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 194

state 102

    (29) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 29 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LSHIFT          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    RSHIFT          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 29 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LEQ             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    GEQ             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 29 (multiplicative_expression -> cast_expression .)
    NEQ             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    BAND            reduce using rule 29 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    BOR             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LAND            reduce using rule 29 (multiplicative_expression -> cast_expression .)
    IS_TRUE         reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LOR             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    RSQUARE         reduce using rule 29 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 29 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 29 (multiplicative_expression -> cast_expression .)


state 103

    (55) logical_or_expression -> logical_and_expression .
    (54) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    IS_TRUE         reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    LOR             reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    RSQUARE         reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    LAND            shift and go to state 195


state 104

    (1) primary_expression -> ID .

    LSQUARE         reduce using rule 1 (primary_expression -> ID .)
    LPAREN          reduce using rule 1 (primary_expression -> ID .)
    DOT             reduce using rule 1 (primary_expression -> ID .)
    PTR_OP          reduce using rule 1 (primary_expression -> ID .)
    INC             reduce using rule 1 (primary_expression -> ID .)
    DEC             reduce using rule 1 (primary_expression -> ID .)
    ASSIGN          reduce using rule 1 (primary_expression -> ID .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    LSHIFT_ASSIGN   reduce using rule 1 (primary_expression -> ID .)
    RSHIFT_ASSIGN   reduce using rule 1 (primary_expression -> ID .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> ID .)
    TIMES           reduce using rule 1 (primary_expression -> ID .)
    DIVIDE          reduce using rule 1 (primary_expression -> ID .)
    MOD             reduce using rule 1 (primary_expression -> ID .)
    PLUS            reduce using rule 1 (primary_expression -> ID .)
    MINUS           reduce using rule 1 (primary_expression -> ID .)
    LSHIFT          reduce using rule 1 (primary_expression -> ID .)
    RSHIFT          reduce using rule 1 (primary_expression -> ID .)
    LT              reduce using rule 1 (primary_expression -> ID .)
    GT              reduce using rule 1 (primary_expression -> ID .)
    LEQ             reduce using rule 1 (primary_expression -> ID .)
    GEQ             reduce using rule 1 (primary_expression -> ID .)
    EQ              reduce using rule 1 (primary_expression -> ID .)
    NEQ             reduce using rule 1 (primary_expression -> ID .)
    BAND            reduce using rule 1 (primary_expression -> ID .)
    XOR             reduce using rule 1 (primary_expression -> ID .)
    BOR             reduce using rule 1 (primary_expression -> ID .)
    LAND            reduce using rule 1 (primary_expression -> ID .)
    IS_TRUE         reduce using rule 1 (primary_expression -> ID .)
    LOR             reduce using rule 1 (primary_expression -> ID .)
    RBRACE          reduce using rule 1 (primary_expression -> ID .)
    COMMA           reduce using rule 1 (primary_expression -> ID .)
    RSQUARE         reduce using rule 1 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 1 (primary_expression -> ID .)
    RPAREN          reduce using rule 1 (primary_expression -> ID .)
    COLON           reduce using rule 1 (primary_expression -> ID .)


state 105

    (39) relational_expression -> shift_expression .
    (37) shift_expression -> shift_expression . LSHIFT additive_expression
    (38) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 39 (relational_expression -> shift_expression .)
    GT              reduce using rule 39 (relational_expression -> shift_expression .)
    LEQ             reduce using rule 39 (relational_expression -> shift_expression .)
    GEQ             reduce using rule 39 (relational_expression -> shift_expression .)
    EQ              reduce using rule 39 (relational_expression -> shift_expression .)
    NEQ             reduce using rule 39 (relational_expression -> shift_expression .)
    BAND            reduce using rule 39 (relational_expression -> shift_expression .)
    XOR             reduce using rule 39 (relational_expression -> shift_expression .)
    BOR             reduce using rule 39 (relational_expression -> shift_expression .)
    LAND            reduce using rule 39 (relational_expression -> shift_expression .)
    IS_TRUE         reduce using rule 39 (relational_expression -> shift_expression .)
    LOR             reduce using rule 39 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 39 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 39 (relational_expression -> shift_expression .)
    RSQUARE         reduce using rule 39 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 39 (relational_expression -> shift_expression .)
    COLON           reduce using rule 39 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 39 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 197
    RSHIFT          shift and go to state 196


state 106

    (47) and_expression -> equality_expression .
    (45) equality_expression -> equality_expression . EQ relational_expression
    (46) equality_expression -> equality_expression . NEQ relational_expression

    BAND            reduce using rule 47 (and_expression -> equality_expression .)
    XOR             reduce using rule 47 (and_expression -> equality_expression .)
    BOR             reduce using rule 47 (and_expression -> equality_expression .)
    LAND            reduce using rule 47 (and_expression -> equality_expression .)
    IS_TRUE         reduce using rule 47 (and_expression -> equality_expression .)
    LOR             reduce using rule 47 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 47 (and_expression -> equality_expression .)
    COMMA           reduce using rule 47 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 47 (and_expression -> equality_expression .)
    RSQUARE         reduce using rule 47 (and_expression -> equality_expression .)
    COLON           reduce using rule 47 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 47 (and_expression -> equality_expression .)
    EQ              shift and go to state 198
    NEQ             shift and go to state 199


state 107

    (3) primary_expression -> STRING_LITERAL .

    LSQUARE         reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DOT             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    INC             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DEC             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    ASSIGN          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    TIMES           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LSHIFT          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RSHIFT          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LEQ             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    GEQ             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    EQ              reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    NEQ             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    BAND            reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    XOR             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    BOR             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LAND            reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    IS_TRUE         reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LOR             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RSQUARE         reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 3 (primary_expression -> STRING_LITERAL .)


state 108

    (33) additive_expression -> multiplicative_expression .
    (30) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (31) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (32) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 33 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 33 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 33 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 33 (additive_expression -> multiplicative_expression .)
    NEQ             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    BAND            reduce using rule 33 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    BOR             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 33 (additive_expression -> multiplicative_expression .)
    IS_TRUE         reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 33 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    RSQUARE         reduce using rule 33 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 33 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 33 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 202
    DIVIDE          shift and go to state 201
    MOD             shift and go to state 200


state 109

    (57) conditional_expression -> logical_or_expression .
    (58) conditional_expression -> logical_or_expression . IS_TRUE expression COLON conditional_expression
    (56) logical_or_expression -> logical_or_expression . LOR logical_and_expression

    SEMICOLON       reduce using rule 57 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 57 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 57 (conditional_expression -> logical_or_expression .)
    RSQUARE         reduce using rule 57 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 57 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 57 (conditional_expression -> logical_or_expression .)
    IS_TRUE         shift and go to state 204
    LOR             shift and go to state 203


state 110

    (18) unary_expression -> unary_operator . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    cast_expression                shift and go to state 205
    unary_operator                 shift and go to state 110

state 111

    (74) constant_expression -> conditional_expression .

    RBRACE          reduce using rule 74 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 74 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 74 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 74 (constant_expression -> conditional_expression .)
    RSQUARE         reduce using rule 74 (constant_expression -> conditional_expression .)


state 112

    (16) unary_expression -> INC . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 174

    unary_expression               shift and go to state 206
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110

state 113

    (84) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator ASSIGN initializer
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN

    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    direct_declarator              shift and go to state 23
    init_declarator                shift and go to state 207
    declarator                     shift and go to state 118
    pointer                        shift and go to state 12

state 114

    (76) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    LBRACE          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    REGISTER        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ENUM            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNION           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TIMES           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    *               reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ID              reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    $end            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GOTO            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INC             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEC             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BAND            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BNOT            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LNOT            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT_CONST_DEC   reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)


state 115

    (207) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    TIMES           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    *               reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 207 (function_definition -> declaration_specifiers declarator compound_statement .)


state 116

    (86) init_declarator -> declarator ASSIGN . initializer
    (167) initializer -> . assignment_expression
    (168) initializer -> . LBRACE initializer_list RBRACE
    (169) initializer -> . LBRACE initializer_list COMMA RBRACE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 210
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    initializer                    shift and go to state 208
    and_expression                 shift and go to state 86
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 209
    multiplicative_expression      shift and go to state 108
    conditional_expression         shift and go to state 146
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106

state 117

    (206) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (186) declaration_list -> declaration_list . declaration
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    LBRACE          shift and go to state 60
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    compound_statement             shift and go to state 211
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 33
    declaration_specifiers         shift and go to state 58
    declaration                    shift and go to state 148

state 118

    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . ASSIGN initializer

    SEMICOLON       reduce using rule 85 (init_declarator -> declarator .)
    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 116


state 119

    (174) statement -> expression_statement .

    RBRACE          reduce using rule 174 (statement -> expression_statement .)
    ID              reduce using rule 174 (statement -> expression_statement .)
    CASE            reduce using rule 174 (statement -> expression_statement .)
    DEFAULT         reduce using rule 174 (statement -> expression_statement .)
    LBRACE          reduce using rule 174 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 174 (statement -> expression_statement .)
    IF              reduce using rule 174 (statement -> expression_statement .)
    SWITCH          reduce using rule 174 (statement -> expression_statement .)
    WHILE           reduce using rule 174 (statement -> expression_statement .)
    DO              reduce using rule 174 (statement -> expression_statement .)
    FOR             reduce using rule 174 (statement -> expression_statement .)
    GOTO            reduce using rule 174 (statement -> expression_statement .)
    CONTINUE        reduce using rule 174 (statement -> expression_statement .)
    BREAK           reduce using rule 174 (statement -> expression_statement .)
    RETURN          reduce using rule 174 (statement -> expression_statement .)
    INC             reduce using rule 174 (statement -> expression_statement .)
    DEC             reduce using rule 174 (statement -> expression_statement .)
    SIZEOF          reduce using rule 174 (statement -> expression_statement .)
    BAND            reduce using rule 174 (statement -> expression_statement .)
    TIMES           reduce using rule 174 (statement -> expression_statement .)
    PLUS            reduce using rule 174 (statement -> expression_statement .)
    MINUS           reduce using rule 174 (statement -> expression_statement .)
    BNOT            reduce using rule 174 (statement -> expression_statement .)
    LNOT            reduce using rule 174 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 174 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 174 (statement -> expression_statement .)
    LPAREN          reduce using rule 174 (statement -> expression_statement .)


state 120

    (176) statement -> iteration_statement .

    RBRACE          reduce using rule 176 (statement -> iteration_statement .)
    ID              reduce using rule 176 (statement -> iteration_statement .)
    CASE            reduce using rule 176 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 176 (statement -> iteration_statement .)
    LBRACE          reduce using rule 176 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 176 (statement -> iteration_statement .)
    IF              reduce using rule 176 (statement -> iteration_statement .)
    SWITCH          reduce using rule 176 (statement -> iteration_statement .)
    WHILE           reduce using rule 176 (statement -> iteration_statement .)
    DO              reduce using rule 176 (statement -> iteration_statement .)
    FOR             reduce using rule 176 (statement -> iteration_statement .)
    GOTO            reduce using rule 176 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 176 (statement -> iteration_statement .)
    BREAK           reduce using rule 176 (statement -> iteration_statement .)
    RETURN          reduce using rule 176 (statement -> iteration_statement .)
    INC             reduce using rule 176 (statement -> iteration_statement .)
    DEC             reduce using rule 176 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 176 (statement -> iteration_statement .)
    BAND            reduce using rule 176 (statement -> iteration_statement .)
    TIMES           reduce using rule 176 (statement -> iteration_statement .)
    PLUS            reduce using rule 176 (statement -> iteration_statement .)
    MINUS           reduce using rule 176 (statement -> iteration_statement .)
    BNOT            reduce using rule 176 (statement -> iteration_statement .)
    LNOT            reduce using rule 176 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 176 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 176 (statement -> iteration_statement .)
    LPAREN          reduce using rule 176 (statement -> iteration_statement .)


state 121

    (197) jump_statement -> GOTO . ID SEMICOLON

    ID              shift and go to state 212


state 122

    (172) statement -> labeled_statement .

    RBRACE          reduce using rule 172 (statement -> labeled_statement .)
    ID              reduce using rule 172 (statement -> labeled_statement .)
    CASE            reduce using rule 172 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 172 (statement -> labeled_statement .)
    LBRACE          reduce using rule 172 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 172 (statement -> labeled_statement .)
    IF              reduce using rule 172 (statement -> labeled_statement .)
    SWITCH          reduce using rule 172 (statement -> labeled_statement .)
    WHILE           reduce using rule 172 (statement -> labeled_statement .)
    DO              reduce using rule 172 (statement -> labeled_statement .)
    FOR             reduce using rule 172 (statement -> labeled_statement .)
    GOTO            reduce using rule 172 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 172 (statement -> labeled_statement .)
    BREAK           reduce using rule 172 (statement -> labeled_statement .)
    RETURN          reduce using rule 172 (statement -> labeled_statement .)
    INC             reduce using rule 172 (statement -> labeled_statement .)
    DEC             reduce using rule 172 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 172 (statement -> labeled_statement .)
    BAND            reduce using rule 172 (statement -> labeled_statement .)
    TIMES           reduce using rule 172 (statement -> labeled_statement .)
    PLUS            reduce using rule 172 (statement -> labeled_statement .)
    MINUS           reduce using rule 172 (statement -> labeled_statement .)
    BNOT            reduce using rule 172 (statement -> labeled_statement .)
    LNOT            reduce using rule 172 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 172 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 172 (statement -> labeled_statement .)
    LPAREN          reduce using rule 172 (statement -> labeled_statement .)


state 123

    (183) compound_statement -> LBRACE declaration_list . RBRACE
    (184) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (186) declaration_list -> declaration_list . declaration
    (187) statement_list -> . statement
    (188) statement_list -> . statement_list statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 214
    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    storage_class_specifier        shift and go to state 1
    unary_expression               shift and go to state 125
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    type_specifier                 shift and go to state 14
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    selection_statement            shift and go to state 141
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 136
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    struct_or_union                shift and go to state 11
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    declaration_specifiers         shift and go to state 58
    declaration                    shift and go to state 148
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 33
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    statement_list                 shift and go to state 213
    expression                     shift and go to state 130

state 124

    (200) jump_statement -> RETURN . SEMICOLON
    (201) jump_statement -> RETURN . expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 215
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 142
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    expression                     shift and go to state 216
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 125

    (60) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (27) cast_expression -> unary_expression .
    (61) assignment_operator -> . ASSIGN
    (62) assignment_operator -> . MUL_ASSIGN
    (63) assignment_operator -> . DIV_ASSIGN
    (64) assignment_operator -> . MOD_ASSIGN
    (65) assignment_operator -> . ADD_ASSIGN
    (66) assignment_operator -> . SUB_ASSIGN
    (67) assignment_operator -> . LSHIFT_ASSIGN
    (68) assignment_operator -> . RSHIFT_ASSIGN
    (69) assignment_operator -> . AND_ASSIGN
    (70) assignment_operator -> . XOR_ASSIGN
    (71) assignment_operator -> . OR_ASSIGN

    TIMES           reduce using rule 27 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 27 (cast_expression -> unary_expression .)
    MOD             reduce using rule 27 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 27 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 27 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 27 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 27 (cast_expression -> unary_expression .)
    LT              reduce using rule 27 (cast_expression -> unary_expression .)
    GT              reduce using rule 27 (cast_expression -> unary_expression .)
    LEQ             reduce using rule 27 (cast_expression -> unary_expression .)
    GEQ             reduce using rule 27 (cast_expression -> unary_expression .)
    EQ              reduce using rule 27 (cast_expression -> unary_expression .)
    NEQ             reduce using rule 27 (cast_expression -> unary_expression .)
    BAND            reduce using rule 27 (cast_expression -> unary_expression .)
    XOR             reduce using rule 27 (cast_expression -> unary_expression .)
    BOR             reduce using rule 27 (cast_expression -> unary_expression .)
    LAND            reduce using rule 27 (cast_expression -> unary_expression .)
    IS_TRUE         reduce using rule 27 (cast_expression -> unary_expression .)
    LOR             reduce using rule 27 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 27 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 27 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 27 (cast_expression -> unary_expression .)
    RSQUARE         reduce using rule 27 (cast_expression -> unary_expression .)
    COLON           reduce using rule 27 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 27 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 227
    MUL_ASSIGN      shift and go to state 225
    DIV_ASSIGN      shift and go to state 226
    MOD_ASSIGN      shift and go to state 218
    ADD_ASSIGN      shift and go to state 222
    SUB_ASSIGN      shift and go to state 217
    LSHIFT_ASSIGN   shift and go to state 223
    RSHIFT_ASSIGN   shift and go to state 220
    AND_ASSIGN      shift and go to state 224
    XOR_ASSIGN      shift and go to state 219
    OR_ASSIGN       shift and go to state 221

    assignment_operator            shift and go to state 228

state 126

    (173) statement -> compound_statement .

    RBRACE          reduce using rule 173 (statement -> compound_statement .)
    ID              reduce using rule 173 (statement -> compound_statement .)
    CASE            reduce using rule 173 (statement -> compound_statement .)
    DEFAULT         reduce using rule 173 (statement -> compound_statement .)
    LBRACE          reduce using rule 173 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 173 (statement -> compound_statement .)
    IF              reduce using rule 173 (statement -> compound_statement .)
    SWITCH          reduce using rule 173 (statement -> compound_statement .)
    WHILE           reduce using rule 173 (statement -> compound_statement .)
    DO              reduce using rule 173 (statement -> compound_statement .)
    FOR             reduce using rule 173 (statement -> compound_statement .)
    GOTO            reduce using rule 173 (statement -> compound_statement .)
    CONTINUE        reduce using rule 173 (statement -> compound_statement .)
    BREAK           reduce using rule 173 (statement -> compound_statement .)
    RETURN          reduce using rule 173 (statement -> compound_statement .)
    INC             reduce using rule 173 (statement -> compound_statement .)
    DEC             reduce using rule 173 (statement -> compound_statement .)
    SIZEOF          reduce using rule 173 (statement -> compound_statement .)
    BAND            reduce using rule 173 (statement -> compound_statement .)
    TIMES           reduce using rule 173 (statement -> compound_statement .)
    PLUS            reduce using rule 173 (statement -> compound_statement .)
    MINUS           reduce using rule 173 (statement -> compound_statement .)
    BNOT            reduce using rule 173 (statement -> compound_statement .)
    LNOT            reduce using rule 173 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 173 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 173 (statement -> compound_statement .)
    LPAREN          reduce using rule 173 (statement -> compound_statement .)


state 127

    (195) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 229


state 128

    (198) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 230


state 129

    (182) compound_statement -> LBRACE statement_list . RBRACE
    (188) statement_list -> statement_list . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 232
    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 231
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 130

    (190) expression_statement -> expression . SEMICOLON
    (73) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 234
    COMMA           shift and go to state 233


state 131

    (180) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 235


state 132

    (193) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 236


state 133

    (179) labeled_statement -> CASE . constant_expression COLON statement
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_operator                 shift and go to state 110
    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 237
    relational_expression          shift and go to state 91

state 134

    (189) expression_statement -> SEMICOLON .

    RBRACE          reduce using rule 189 (expression_statement -> SEMICOLON .)
    ID              reduce using rule 189 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 189 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 189 (expression_statement -> SEMICOLON .)
    LBRACE          reduce using rule 189 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 189 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 189 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 189 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 189 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 189 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 189 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 189 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 189 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 189 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 189 (expression_statement -> SEMICOLON .)
    INC             reduce using rule 189 (expression_statement -> SEMICOLON .)
    DEC             reduce using rule 189 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 189 (expression_statement -> SEMICOLON .)
    BAND            reduce using rule 189 (expression_statement -> SEMICOLON .)
    TIMES           reduce using rule 189 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 189 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 189 (expression_statement -> SEMICOLON .)
    BNOT            reduce using rule 189 (expression_statement -> SEMICOLON .)
    LNOT            reduce using rule 189 (expression_statement -> SEMICOLON .)
    INT_CONST_DEC   reduce using rule 189 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 189 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 189 (expression_statement -> SEMICOLON .)
    RPAREN          reduce using rule 189 (expression_statement -> SEMICOLON .)


state 135

    (192) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 238


state 136

    (187) statement_list -> statement .

    RBRACE          reduce using rule 187 (statement_list -> statement .)
    ID              reduce using rule 187 (statement_list -> statement .)
    CASE            reduce using rule 187 (statement_list -> statement .)
    DEFAULT         reduce using rule 187 (statement_list -> statement .)
    LBRACE          reduce using rule 187 (statement_list -> statement .)
    SEMICOLON       reduce using rule 187 (statement_list -> statement .)
    IF              reduce using rule 187 (statement_list -> statement .)
    SWITCH          reduce using rule 187 (statement_list -> statement .)
    WHILE           reduce using rule 187 (statement_list -> statement .)
    DO              reduce using rule 187 (statement_list -> statement .)
    FOR             reduce using rule 187 (statement_list -> statement .)
    GOTO            reduce using rule 187 (statement_list -> statement .)
    CONTINUE        reduce using rule 187 (statement_list -> statement .)
    BREAK           reduce using rule 187 (statement_list -> statement .)
    RETURN          reduce using rule 187 (statement_list -> statement .)
    INC             reduce using rule 187 (statement_list -> statement .)
    DEC             reduce using rule 187 (statement_list -> statement .)
    SIZEOF          reduce using rule 187 (statement_list -> statement .)
    BAND            reduce using rule 187 (statement_list -> statement .)
    TIMES           reduce using rule 187 (statement_list -> statement .)
    PLUS            reduce using rule 187 (statement_list -> statement .)
    MINUS           reduce using rule 187 (statement_list -> statement .)
    BNOT            reduce using rule 187 (statement_list -> statement .)
    LNOT            reduce using rule 187 (statement_list -> statement .)
    INT_CONST_DEC   reduce using rule 187 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 187 (statement_list -> statement .)
    LPAREN          reduce using rule 187 (statement_list -> statement .)


state 137

    (177) statement -> jump_statement .

    RBRACE          reduce using rule 177 (statement -> jump_statement .)
    ID              reduce using rule 177 (statement -> jump_statement .)
    CASE            reduce using rule 177 (statement -> jump_statement .)
    DEFAULT         reduce using rule 177 (statement -> jump_statement .)
    LBRACE          reduce using rule 177 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 177 (statement -> jump_statement .)
    IF              reduce using rule 177 (statement -> jump_statement .)
    SWITCH          reduce using rule 177 (statement -> jump_statement .)
    WHILE           reduce using rule 177 (statement -> jump_statement .)
    DO              reduce using rule 177 (statement -> jump_statement .)
    FOR             reduce using rule 177 (statement -> jump_statement .)
    GOTO            reduce using rule 177 (statement -> jump_statement .)
    CONTINUE        reduce using rule 177 (statement -> jump_statement .)
    BREAK           reduce using rule 177 (statement -> jump_statement .)
    RETURN          reduce using rule 177 (statement -> jump_statement .)
    INC             reduce using rule 177 (statement -> jump_statement .)
    DEC             reduce using rule 177 (statement -> jump_statement .)
    SIZEOF          reduce using rule 177 (statement -> jump_statement .)
    BAND            reduce using rule 177 (statement -> jump_statement .)
    TIMES           reduce using rule 177 (statement -> jump_statement .)
    PLUS            reduce using rule 177 (statement -> jump_statement .)
    MINUS           reduce using rule 177 (statement -> jump_statement .)
    BNOT            reduce using rule 177 (statement -> jump_statement .)
    LNOT            reduce using rule 177 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 177 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 177 (statement -> jump_statement .)
    LPAREN          reduce using rule 177 (statement -> jump_statement .)


state 138

    (199) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 239


state 139

    (194) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 240
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 140

    (181) compound_statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    GOTO            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    INC             reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    DEC             reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    SIZEOF          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    BAND            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    BNOT            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    INT_CONST_DEC   reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    *               reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    ENUM            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    STRUCT          reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    UNION           reduce using rule 181 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 181 (compound_statement -> LBRACE RBRACE .)


state 141

    (175) statement -> selection_statement .

    RBRACE          reduce using rule 175 (statement -> selection_statement .)
    ID              reduce using rule 175 (statement -> selection_statement .)
    CASE            reduce using rule 175 (statement -> selection_statement .)
    DEFAULT         reduce using rule 175 (statement -> selection_statement .)
    LBRACE          reduce using rule 175 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 175 (statement -> selection_statement .)
    IF              reduce using rule 175 (statement -> selection_statement .)
    SWITCH          reduce using rule 175 (statement -> selection_statement .)
    WHILE           reduce using rule 175 (statement -> selection_statement .)
    DO              reduce using rule 175 (statement -> selection_statement .)
    FOR             reduce using rule 175 (statement -> selection_statement .)
    GOTO            reduce using rule 175 (statement -> selection_statement .)
    CONTINUE        reduce using rule 175 (statement -> selection_statement .)
    BREAK           reduce using rule 175 (statement -> selection_statement .)
    RETURN          reduce using rule 175 (statement -> selection_statement .)
    INC             reduce using rule 175 (statement -> selection_statement .)
    DEC             reduce using rule 175 (statement -> selection_statement .)
    SIZEOF          reduce using rule 175 (statement -> selection_statement .)
    BAND            reduce using rule 175 (statement -> selection_statement .)
    TIMES           reduce using rule 175 (statement -> selection_statement .)
    PLUS            reduce using rule 175 (statement -> selection_statement .)
    MINUS           reduce using rule 175 (statement -> selection_statement .)
    BNOT            reduce using rule 175 (statement -> selection_statement .)
    LNOT            reduce using rule 175 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 175 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 175 (statement -> selection_statement .)
    LPAREN          reduce using rule 175 (statement -> selection_statement .)


state 142

    (72) expression -> assignment_expression .

    SEMICOLON       reduce using rule 72 (expression -> assignment_expression .)
    COMMA           reduce using rule 72 (expression -> assignment_expression .)
    RPAREN          reduce using rule 72 (expression -> assignment_expression .)
    COLON           reduce using rule 72 (expression -> assignment_expression .)
    RSQUARE         reduce using rule 72 (expression -> assignment_expression .)


state 143

    (4) primary_expression -> LPAREN . expression RPAREN
    (28) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (153) type_name -> . specifier_qualifier_list
    (154) type_name -> . specifier_qualifier_list abstract_declarator
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ENUM            shift and go to state 21
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    unary_expression               shift and go to state 125
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 93
    and_expression                 shift and go to state 86
    type_specifier                 shift and go to state 66
    inclusive_or_expression        shift and go to state 88
    type_name                      shift and go to state 192
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    struct_or_union                shift and go to state 11
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 193
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 194

state 144

    (178) labeled_statement -> ID . COLON statement
    (1) primary_expression -> ID .

    COLON           shift and go to state 241
    LSQUARE         reduce using rule 1 (primary_expression -> ID .)
    LPAREN          reduce using rule 1 (primary_expression -> ID .)
    DOT             reduce using rule 1 (primary_expression -> ID .)
    PTR_OP          reduce using rule 1 (primary_expression -> ID .)
    INC             reduce using rule 1 (primary_expression -> ID .)
    DEC             reduce using rule 1 (primary_expression -> ID .)
    ASSIGN          reduce using rule 1 (primary_expression -> ID .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    LSHIFT_ASSIGN   reduce using rule 1 (primary_expression -> ID .)
    RSHIFT_ASSIGN   reduce using rule 1 (primary_expression -> ID .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> ID .)
    TIMES           reduce using rule 1 (primary_expression -> ID .)
    DIVIDE          reduce using rule 1 (primary_expression -> ID .)
    MOD             reduce using rule 1 (primary_expression -> ID .)
    PLUS            reduce using rule 1 (primary_expression -> ID .)
    MINUS           reduce using rule 1 (primary_expression -> ID .)
    LSHIFT          reduce using rule 1 (primary_expression -> ID .)
    RSHIFT          reduce using rule 1 (primary_expression -> ID .)
    LT              reduce using rule 1 (primary_expression -> ID .)
    GT              reduce using rule 1 (primary_expression -> ID .)
    LEQ             reduce using rule 1 (primary_expression -> ID .)
    GEQ             reduce using rule 1 (primary_expression -> ID .)
    EQ              reduce using rule 1 (primary_expression -> ID .)
    NEQ             reduce using rule 1 (primary_expression -> ID .)
    BAND            reduce using rule 1 (primary_expression -> ID .)
    XOR             reduce using rule 1 (primary_expression -> ID .)
    BOR             reduce using rule 1 (primary_expression -> ID .)
    LAND            reduce using rule 1 (primary_expression -> ID .)
    IS_TRUE         reduce using rule 1 (primary_expression -> ID .)
    LOR             reduce using rule 1 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 1 (primary_expression -> ID .)
    COMMA           reduce using rule 1 (primary_expression -> ID .)


state 145

    (191) selection_statement -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 242


state 146

    (59) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 59 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 59 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 59 (assignment_expression -> conditional_expression .)
    RSQUARE         reduce using rule 59 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 59 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 59 (assignment_expression -> conditional_expression .)


state 147

    (208) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    TIMES           reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    *               reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    ID              reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 208 (function_definition -> declarator declaration_list compound_statement .)


state 148

    (186) declaration_list -> declaration_list declaration .

    LBRACE          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 186 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 186 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 186 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 186 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 186 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 186 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 186 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 186 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 186 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 186 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 186 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 186 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    INC             reduce using rule 186 (declaration_list -> declaration_list declaration .)
    DEC             reduce using rule 186 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 186 (declaration_list -> declaration_list declaration .)
    BAND            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 186 (declaration_list -> declaration_list declaration .)
    BNOT            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    LNOT            reduce using rule 186 (declaration_list -> declaration_list declaration .)
    INT_CONST_DEC   reduce using rule 186 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 186 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 186 (declaration_list -> declaration_list declaration .)


state 149

    (109) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 109 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 150

    (104) struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .

    TYPEDEF         reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    SEMICOLON       reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    *               reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    [               reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 104 (struct_or_union_specifier -> struct_or_union LBRACE struct_declaration_list RBRACE .)


state 151

    (111) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    TIMES           reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LPAREN          reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RPAREN          reduce using rule 111 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 152

    (113) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    TIMES           reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LPAREN          reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    [               reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RPAREN          reduce using rule 113 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 153

    (115) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 115 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 115 (struct_declarator_list -> struct_declarator .)


state 154

    (117) struct_declarator -> declarator .
    (119) struct_declarator -> declarator . COLON constant_expression

    SEMICOLON       reduce using rule 117 (struct_declarator -> declarator .)
    COMMA           reduce using rule 117 (struct_declarator -> declarator .)
    COLON           shift and go to state 243


state 155

    (118) struct_declarator -> COLON . constant_expression
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 244
    relational_expression          shift and go to state 91

state 156

    (110) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON
    (116) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 246
    COMMA           shift and go to state 245


state 157

    (103) struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list . RBRACE
    (109) struct_declaration_list -> struct_declaration_list . struct_declaration
    (110) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    RBRACE          shift and go to state 247
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 66
    struct_declaration             shift and go to state 149
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 69

state 158

    (121) enum_specifier -> ENUM ID LBRACE enumerator_list . RBRACE
    (124) enumerator_list -> enumerator_list . COMMA enumerator

    RBRACE          shift and go to state 248
    COMMA           shift and go to state 160


state 159

    (120) enum_specifier -> ENUM LBRACE enumerator_list RBRACE .

    TYPEDEF         reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    *               reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    [               reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)
    SEMICOLON       reduce using rule 120 (enum_specifier -> ENUM LBRACE enumerator_list RBRACE .)


state 160

    (124) enumerator_list -> enumerator_list COMMA . enumerator
    (125) enumerator -> . ID
    (126) enumerator -> . ID ASSIGN constant_expression

    ID              shift and go to state 74

    enumerator                     shift and go to state 249

state 161

    (126) enumerator -> ID ASSIGN . constant_expression
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 250
    relational_expression          shift and go to state 91

state 162

    (135) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    [               reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ASSIGN          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 135 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 163

    (132) direct_declarator -> LPAREN . declarator RPAREN
    (158) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (163) direct_abstract_declarator -> LPAREN . RPAREN
    (164) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (155) abstract_declarator -> . pointer
    (156) abstract_declarator -> . direct_abstract_declarator
    (157) abstract_declarator -> . pointer direct_abstract_declarator
    (144) parameter_type_list -> . parameter_list
    (145) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN
    (158) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (159) direct_abstract_declarator -> . [ RSQUARE
    (160) direct_abstract_declarator -> . [ constant_expression RSQUARE
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ RSQUARE
    (162) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression RSQUARE
    (163) direct_abstract_declarator -> . LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (165) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (166) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (146) parameter_list -> . parameter_declaration
    (147) parameter_list -> . parameter_list COMMA parameter_declaration
    (148) parameter_declaration -> . declaration_specifiers declarator
    (149) parameter_declaration -> . declaration_specifiers abstract_declarator
    (150) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    RPAREN          shift and go to state 251
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 163
    [               shift and go to state 167
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    parameter_list                 shift and go to state 81
    type_qualifier                 shift and go to state 33
    parameter_type_list            shift and go to state 252
    parameter_declaration          shift and go to state 77
    direct_declarator              shift and go to state 23
    abstract_declarator            shift and go to state 253
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 78
    declarator                     shift and go to state 39
    direct_abstract_declarator     shift and go to state 166
    pointer                        shift and go to state 168

state 164

    (149) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 149 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RPAREN          reduce using rule 149 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 165

    (148) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 148 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 148 (parameter_declaration -> declaration_specifiers declarator .)


state 166

    (156) abstract_declarator -> direct_abstract_declarator .
    (161) direct_abstract_declarator -> direct_abstract_declarator . [ RSQUARE
    (162) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression RSQUARE
    (165) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (166) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 156 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 156 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 255
    LPAREN          shift and go to state 254


state 167

    (159) direct_abstract_declarator -> [ . RSQUARE
    (160) direct_abstract_declarator -> [ . constant_expression RSQUARE
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    RSQUARE         shift and go to state 256
    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 257
    relational_expression          shift and go to state 91

state 168

    (129) declarator -> pointer . direct_declarator
    (155) abstract_declarator -> pointer .
    (157) abstract_declarator -> pointer . direct_abstract_declarator
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN
    (158) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (159) direct_abstract_declarator -> . [ RSQUARE
    (160) direct_abstract_declarator -> . [ constant_expression RSQUARE
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ RSQUARE
    (162) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression RSQUARE
    (163) direct_abstract_declarator -> . LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (165) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (166) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 155 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 155 (abstract_declarator -> pointer .)
    ID              shift and go to state 27
    LPAREN          shift and go to state 163
    [               shift and go to state 167

    direct_declarator              shift and go to state 45
    direct_abstract_declarator     shift and go to state 258

state 169

    (136) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    [               reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COLON           reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMICOLON       reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ASSIGN          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    TYPEDEF         reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    EXTERN          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STATIC          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    AUTO            reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    REGISTER        reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SHORT           reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LONG            reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    DOUBLE          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SIGNED          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNSIGNED        reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CONST           reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOLATILE        reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ENUM            reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    STRUCT          reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    UNION           reduce using rule 136 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 170

    (152) identifier_list -> identifier_list COMMA . ID

    ID              shift and go to state 259


state 171

    (145) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (147) parameter_list -> parameter_list COMMA . parameter_declaration
    (148) parameter_declaration -> . declaration_specifiers declarator
    (149) parameter_declaration -> . declaration_specifiers abstract_declarator
    (150) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 260
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    enum_specifier                 shift and go to state 35
    parameter_declaration          shift and go to state 261
    type_qualifier                 shift and go to state 33
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 78

state 172

    (20) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (4) primary_expression -> LPAREN . expression RPAREN
    (153) type_name -> . specifier_qualifier_list
    (154) type_name -> . specifier_qualifier_list abstract_declarator
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (111) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (114) specifier_qualifier_list -> . type_qualifier
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    ENUM            shift and go to state 21
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    struct_or_union_specifier      shift and go to state 5
    exclusive_or_expression        shift and go to state 93
    and_expression                 shift and go to state 86
    type_specifier                 shift and go to state 66
    inclusive_or_expression        shift and go to state 88
    type_name                      shift and go to state 262
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    struct_or_union                shift and go to state 11
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    enum_specifier                 shift and go to state 35
    type_qualifier                 shift and go to state 68
    specifier_qualifier_list       shift and go to state 193
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 194

state 173

    (19) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LEQ             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    GEQ             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    NEQ             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    BAND            reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    BOR             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    IS_TRUE         reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RSQUARE         reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    ASSIGN          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)


state 174

    (4) primary_expression -> LPAREN . expression RPAREN
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 142
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    expression                     shift and go to state 194
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 175

    (17) unary_expression -> DEC unary_expression .

    TIMES           reduce using rule 17 (unary_expression -> DEC unary_expression .)
    DIVIDE          reduce using rule 17 (unary_expression -> DEC unary_expression .)
    MOD             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    PLUS            reduce using rule 17 (unary_expression -> DEC unary_expression .)
    MINUS           reduce using rule 17 (unary_expression -> DEC unary_expression .)
    LSHIFT          reduce using rule 17 (unary_expression -> DEC unary_expression .)
    RSHIFT          reduce using rule 17 (unary_expression -> DEC unary_expression .)
    LT              reduce using rule 17 (unary_expression -> DEC unary_expression .)
    GT              reduce using rule 17 (unary_expression -> DEC unary_expression .)
    LEQ             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    GEQ             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    EQ              reduce using rule 17 (unary_expression -> DEC unary_expression .)
    NEQ             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    BAND            reduce using rule 17 (unary_expression -> DEC unary_expression .)
    XOR             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    BOR             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    LAND            reduce using rule 17 (unary_expression -> DEC unary_expression .)
    IS_TRUE         reduce using rule 17 (unary_expression -> DEC unary_expression .)
    LOR             reduce using rule 17 (unary_expression -> DEC unary_expression .)
    RSQUARE         reduce using rule 17 (unary_expression -> DEC unary_expression .)
    SEMICOLON       reduce using rule 17 (unary_expression -> DEC unary_expression .)
    COMMA           reduce using rule 17 (unary_expression -> DEC unary_expression .)
    RPAREN          reduce using rule 17 (unary_expression -> DEC unary_expression .)
    COLON           reduce using rule 17 (unary_expression -> DEC unary_expression .)
    RBRACE          reduce using rule 17 (unary_expression -> DEC unary_expression .)
    ASSIGN          reduce using rule 17 (unary_expression -> DEC unary_expression .)
    MUL_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    DIV_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    MOD_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    ADD_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    SUB_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 17 (unary_expression -> DEC unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 17 (unary_expression -> DEC unary_expression .)
    AND_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    XOR_ASSIGN      reduce using rule 17 (unary_expression -> DEC unary_expression .)
    OR_ASSIGN       reduce using rule 17 (unary_expression -> DEC unary_expression .)


state 176

    (48) and_expression -> and_expression BAND . equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    equality_expression            shift and go to state 263
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91

state 177

    (52) inclusive_or_expression -> inclusive_or_expression BOR . exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    exclusive_or_expression        shift and go to state 264
    postfix_expression             shift and go to state 89
    additive_expression            shift and go to state 98
    and_expression                 shift and go to state 86
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    relational_expression          shift and go to state 91

state 178

    (6) postfix_expression -> postfix_expression LSQUARE . expression RSQUARE
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 142
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    expression                     shift and go to state 265
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 179

    (7) postfix_expression -> postfix_expression LPAREN . RPAREN
    (8) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (13) argument_expression_list -> . assignment_expression
    (14) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 266
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 267
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    argument_expression_list       shift and go to state 268
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 180

    (10) postfix_expression -> postfix_expression PTR_OP . ID

    ID              shift and go to state 269


state 181

    (12) postfix_expression -> postfix_expression DEC .

    LSQUARE         reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LPAREN          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    DOT             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    INC             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    DEC             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    ASSIGN          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LSHIFT_ASSIGN   reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    RSHIFT_ASSIGN   reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    TIMES           reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LSHIFT          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    RSHIFT          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LT              reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    GT              reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LEQ             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    GEQ             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    EQ              reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    NEQ             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    BAND            reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    XOR             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    BOR             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LAND            reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    IS_TRUE         reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    LOR             reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    SEMICOLON       reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    RPAREN          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    RSQUARE         reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression DEC .)
    RBRACE          reduce using rule 12 (postfix_expression -> postfix_expression DEC .)


state 182

    (9) postfix_expression -> postfix_expression DOT . ID

    ID              shift and go to state 270


state 183

    (11) postfix_expression -> postfix_expression INC .

    LSQUARE         reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LPAREN          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    DOT             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    INC             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    DEC             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    ASSIGN          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LSHIFT_ASSIGN   reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    RSHIFT_ASSIGN   reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    TIMES           reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    DIVIDE          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    MOD             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LSHIFT          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    RSHIFT          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LT              reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    GT              reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LEQ             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    GEQ             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    EQ              reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    NEQ             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    BAND            reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    XOR             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    BOR             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LAND            reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    IS_TRUE         reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    LOR             reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    SEMICOLON       reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    RPAREN          reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    RSQUARE         reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression INC .)
    RBRACE          reduce using rule 11 (postfix_expression -> postfix_expression INC .)


state 184

    (43) relational_expression -> relational_expression GEQ . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 271
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100

state 185

    (41) relational_expression -> relational_expression GT . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 272
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100

state 186

    (42) relational_expression -> relational_expression LEQ . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 273
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100

state 187

    (40) relational_expression -> relational_expression LT . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 274
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100

state 188

    (50) exclusive_or_expression -> exclusive_or_expression XOR . and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    and_expression                 shift and go to state 275
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    equality_expression            shift and go to state 106
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91

state 189

    (133) direct_declarator -> direct_declarator [ constant_expression RSQUARE .

    [               reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    LPAREN          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    RPAREN          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    COLON           reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    SEMICOLON       reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    COMMA           reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    ASSIGN          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    LBRACE          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    TYPEDEF         reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    EXTERN          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    STATIC          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    AUTO            reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    REGISTER        reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    VOID            reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    CHAR            reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    SHORT           reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    INT             reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    LONG            reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    FLOAT           reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    DOUBLE          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    SIGNED          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    UNSIGNED        reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    CONST           reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    VOLATILE        reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    ENUM            reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    STRUCT          reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)
    UNION           reduce using rule 133 (direct_declarator -> direct_declarator [ constant_expression RSQUARE .)


state 190

    (34) additive_expression -> additive_expression PLUS . multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 276
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    primary_expression             shift and go to state 100

state 191

    (35) additive_expression -> additive_expression MINUS . multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 277
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    primary_expression             shift and go to state 100

state 192

    (28) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 278


state 193

    (153) type_name -> specifier_qualifier_list .
    (154) type_name -> specifier_qualifier_list . abstract_declarator
    (155) abstract_declarator -> . pointer
    (156) abstract_declarator -> . direct_abstract_declarator
    (157) abstract_declarator -> . pointer direct_abstract_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (158) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (159) direct_abstract_declarator -> . [ RSQUARE
    (160) direct_abstract_declarator -> . [ constant_expression RSQUARE
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ RSQUARE
    (162) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression RSQUARE
    (163) direct_abstract_declarator -> . LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (165) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (166) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 153 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 24
    *               shift and go to state 7
    LPAREN          shift and go to state 279
    [               shift and go to state 167

    abstract_declarator            shift and go to state 280
    direct_abstract_declarator     shift and go to state 166
    pointer                        shift and go to state 281

state 194

    (4) primary_expression -> LPAREN expression . RPAREN
    (73) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 282
    COMMA           shift and go to state 233


state 195

    (54) logical_and_expression -> logical_and_expression LAND . inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 283
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    additive_expression            shift and go to state 98
    and_expression                 shift and go to state 86
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    relational_expression          shift and go to state 91

state 196

    (38) shift_expression -> shift_expression RSHIFT . additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    additive_expression            shift and go to state 284
    primary_expression             shift and go to state 100

state 197

    (37) shift_expression -> shift_expression LSHIFT . additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    additive_expression            shift and go to state 285
    primary_expression             shift and go to state 100

state 198

    (45) equality_expression -> equality_expression EQ . relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 286
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100

state 199

    (46) equality_expression -> equality_expression NEQ . relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 287
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100

state 200

    (32) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    cast_expression                shift and go to state 288
    unary_operator                 shift and go to state 110

state 201

    (31) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    cast_expression                shift and go to state 289
    unary_operator                 shift and go to state 110

state 202

    (30) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    cast_expression                shift and go to state 290
    unary_operator                 shift and go to state 110

state 203

    (56) logical_or_expression -> logical_or_expression LOR . logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    and_expression                 shift and go to state 86
    primary_expression             shift and go to state 100
    unary_operator                 shift and go to state 110
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 291
    equality_expression            shift and go to state 106
    relational_expression          shift and go to state 91

state 204

    (58) conditional_expression -> logical_or_expression IS_TRUE . expression COLON conditional_expression
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 142
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    expression                     shift and go to state 292
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 205

    (18) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LEQ             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    GEQ             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    NEQ             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    BAND            reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    BOR             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    IS_TRUE         reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RSQUARE         reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    ASSIGN          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LSHIFT_ASSIGN   reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RSHIFT_ASSIGN   reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 18 (unary_expression -> unary_operator cast_expression .)


state 206

    (16) unary_expression -> INC unary_expression .

    TIMES           reduce using rule 16 (unary_expression -> INC unary_expression .)
    DIVIDE          reduce using rule 16 (unary_expression -> INC unary_expression .)
    MOD             reduce using rule 16 (unary_expression -> INC unary_expression .)
    PLUS            reduce using rule 16 (unary_expression -> INC unary_expression .)
    MINUS           reduce using rule 16 (unary_expression -> INC unary_expression .)
    LSHIFT          reduce using rule 16 (unary_expression -> INC unary_expression .)
    RSHIFT          reduce using rule 16 (unary_expression -> INC unary_expression .)
    LT              reduce using rule 16 (unary_expression -> INC unary_expression .)
    GT              reduce using rule 16 (unary_expression -> INC unary_expression .)
    LEQ             reduce using rule 16 (unary_expression -> INC unary_expression .)
    GEQ             reduce using rule 16 (unary_expression -> INC unary_expression .)
    EQ              reduce using rule 16 (unary_expression -> INC unary_expression .)
    NEQ             reduce using rule 16 (unary_expression -> INC unary_expression .)
    BAND            reduce using rule 16 (unary_expression -> INC unary_expression .)
    XOR             reduce using rule 16 (unary_expression -> INC unary_expression .)
    BOR             reduce using rule 16 (unary_expression -> INC unary_expression .)
    LAND            reduce using rule 16 (unary_expression -> INC unary_expression .)
    IS_TRUE         reduce using rule 16 (unary_expression -> INC unary_expression .)
    LOR             reduce using rule 16 (unary_expression -> INC unary_expression .)
    RSQUARE         reduce using rule 16 (unary_expression -> INC unary_expression .)
    SEMICOLON       reduce using rule 16 (unary_expression -> INC unary_expression .)
    COMMA           reduce using rule 16 (unary_expression -> INC unary_expression .)
    RPAREN          reduce using rule 16 (unary_expression -> INC unary_expression .)
    COLON           reduce using rule 16 (unary_expression -> INC unary_expression .)
    RBRACE          reduce using rule 16 (unary_expression -> INC unary_expression .)
    ASSIGN          reduce using rule 16 (unary_expression -> INC unary_expression .)
    MUL_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    DIV_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    MOD_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    ADD_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    SUB_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    LSHIFT_ASSIGN   reduce using rule 16 (unary_expression -> INC unary_expression .)
    RSHIFT_ASSIGN   reduce using rule 16 (unary_expression -> INC unary_expression .)
    AND_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    XOR_ASSIGN      reduce using rule 16 (unary_expression -> INC unary_expression .)
    OR_ASSIGN       reduce using rule 16 (unary_expression -> INC unary_expression .)


state 207

    (84) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 84 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 84 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 208

    (86) init_declarator -> declarator ASSIGN initializer .

    SEMICOLON       reduce using rule 86 (init_declarator -> declarator ASSIGN initializer .)
    COMMA           reduce using rule 86 (init_declarator -> declarator ASSIGN initializer .)


state 209

    (167) initializer -> assignment_expression .

    RBRACE          reduce using rule 167 (initializer -> assignment_expression .)
    COMMA           reduce using rule 167 (initializer -> assignment_expression .)
    SEMICOLON       reduce using rule 167 (initializer -> assignment_expression .)


state 210

    (168) initializer -> LBRACE . initializer_list RBRACE
    (169) initializer -> LBRACE . initializer_list COMMA RBRACE
    (170) initializer_list -> . initializer
    (171) initializer_list -> . initializer_list COMMA initializer
    (167) initializer -> . assignment_expression
    (168) initializer -> . LBRACE initializer_list RBRACE
    (169) initializer -> . LBRACE initializer_list COMMA RBRACE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 210
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    initializer                    shift and go to state 293
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 209
    multiplicative_expression      shift and go to state 108
    conditional_expression         shift and go to state 146
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    initializer_list               shift and go to state 294

state 211

    (206) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TIMES           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    *               reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ID              reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LPAREN          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 206 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 212

    (197) jump_statement -> GOTO ID . SEMICOLON

    SEMICOLON       shift and go to state 295


state 213

    (184) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (188) statement_list -> statement_list . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 296
    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 231
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 214

    (183) compound_statement -> LBRACE declaration_list RBRACE .

    RBRACE          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    CASE            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEFAULT         reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMICOLON       reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    SWITCH          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    DO              reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    GOTO            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONTINUE        reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    INC             reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEC             reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIZEOF          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    BAND            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    TIMES           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    BNOT            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    LNOT            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT_CONST_DEC   reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING_LITERAL  reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    TYPEDEF         reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    EXTERN          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    STATIC          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    AUTO            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    REGISTER        reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    SHORT           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    LONG            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIGNED          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNSIGNED        reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONST           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOLATILE        reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    *               reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    ENUM            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRUCT          reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNION           reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 183 (compound_statement -> LBRACE declaration_list RBRACE .)


state 215

    (200) jump_statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    INC             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    DEC             reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    BAND            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    BNOT            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    LNOT            reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    INT_CONST_DEC   reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 200 (jump_statement -> RETURN SEMICOLON .)


state 216

    (201) jump_statement -> RETURN expression . SEMICOLON
    (73) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 297
    COMMA           shift and go to state 233


state 217

    (66) assignment_operator -> SUB_ASSIGN .

    INC             reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    DEC             reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    BAND            reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    TIMES           reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    BNOT            reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    LNOT            reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    ID              reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    INT_CONST_DEC   reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    LPAREN          reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)


state 218

    (64) assignment_operator -> MOD_ASSIGN .

    INC             reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    DEC             reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    BAND            reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    TIMES           reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    BNOT            reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    LNOT            reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    ID              reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    INT_CONST_DEC   reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)


state 219

    (70) assignment_operator -> XOR_ASSIGN .

    INC             reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    DEC             reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    BAND            reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    TIMES           reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    BNOT            reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    LNOT            reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    ID              reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST_DEC   reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    LPAREN          reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)


state 220

    (68) assignment_operator -> RSHIFT_ASSIGN .

    INC             reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    DEC             reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    BAND            reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    TIMES           reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUS            reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUS           reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    BNOT            reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    LNOT            reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    ID              reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    INT_CONST_DEC   reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)
    LPAREN          reduce using rule 68 (assignment_operator -> RSHIFT_ASSIGN .)


state 221

    (71) assignment_operator -> OR_ASSIGN .

    INC             reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    DEC             reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    BAND            reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    TIMES           reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    BNOT            reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    LNOT            reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    ID              reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    INT_CONST_DEC   reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    LPAREN          reduce using rule 71 (assignment_operator -> OR_ASSIGN .)


state 222

    (65) assignment_operator -> ADD_ASSIGN .

    INC             reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    DEC             reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    BAND            reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    TIMES           reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    BNOT            reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    LNOT            reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    ID              reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    INT_CONST_DEC   reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)


state 223

    (67) assignment_operator -> LSHIFT_ASSIGN .

    INC             reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    DEC             reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    SIZEOF          reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    BAND            reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    TIMES           reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUS            reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUS           reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    BNOT            reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    LNOT            reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    ID              reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    INT_CONST_DEC   reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)
    LPAREN          reduce using rule 67 (assignment_operator -> LSHIFT_ASSIGN .)


state 224

    (69) assignment_operator -> AND_ASSIGN .

    INC             reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    DEC             reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    BAND            reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    TIMES           reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    BNOT            reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    LNOT            reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    ID              reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    INT_CONST_DEC   reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    LPAREN          reduce using rule 69 (assignment_operator -> AND_ASSIGN .)


state 225

    (62) assignment_operator -> MUL_ASSIGN .

    INC             reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    DEC             reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    BAND            reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    TIMES           reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    BNOT            reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    LNOT            reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    ID              reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    INT_CONST_DEC   reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)


state 226

    (63) assignment_operator -> DIV_ASSIGN .

    INC             reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    DEC             reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    BAND            reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    TIMES           reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    BNOT            reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    LNOT            reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    ID              reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    INT_CONST_DEC   reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)


state 227

    (61) assignment_operator -> ASSIGN .

    INC             reduce using rule 61 (assignment_operator -> ASSIGN .)
    DEC             reduce using rule 61 (assignment_operator -> ASSIGN .)
    SIZEOF          reduce using rule 61 (assignment_operator -> ASSIGN .)
    BAND            reduce using rule 61 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 61 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 61 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 61 (assignment_operator -> ASSIGN .)
    BNOT            reduce using rule 61 (assignment_operator -> ASSIGN .)
    LNOT            reduce using rule 61 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 61 (assignment_operator -> ASSIGN .)
    INT_CONST_DEC   reduce using rule 61 (assignment_operator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 61 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 61 (assignment_operator -> ASSIGN .)


state 228

    (60) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 298
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 229

    (195) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 134
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 299
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 230

    (198) jump_statement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    INC             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    DEC             reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    BAND            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    BNOT            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    LNOT            reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    INT_CONST_DEC   reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 198 (jump_statement -> CONTINUE SEMICOLON .)


state 231

    (188) statement_list -> statement_list statement .

    RBRACE          reduce using rule 188 (statement_list -> statement_list statement .)
    ID              reduce using rule 188 (statement_list -> statement_list statement .)
    CASE            reduce using rule 188 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 188 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 188 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 188 (statement_list -> statement_list statement .)
    IF              reduce using rule 188 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 188 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 188 (statement_list -> statement_list statement .)
    DO              reduce using rule 188 (statement_list -> statement_list statement .)
    FOR             reduce using rule 188 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 188 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 188 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 188 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 188 (statement_list -> statement_list statement .)
    INC             reduce using rule 188 (statement_list -> statement_list statement .)
    DEC             reduce using rule 188 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 188 (statement_list -> statement_list statement .)
    BAND            reduce using rule 188 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 188 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 188 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 188 (statement_list -> statement_list statement .)
    BNOT            reduce using rule 188 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 188 (statement_list -> statement_list statement .)
    INT_CONST_DEC   reduce using rule 188 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 188 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 188 (statement_list -> statement_list statement .)


state 232

    (182) compound_statement -> LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    GOTO            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    INC             reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    DEC             reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    SIZEOF          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    BAND            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    BNOT            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    INT_CONST_DEC   reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING_LITERAL  reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    TYPEDEF         reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    EXTERN          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    STATIC          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    AUTO            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    REGISTER        reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    SHORT           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    LONG            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    SIGNED          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    UNSIGNED        reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    CONST           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    VOLATILE        reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    *               reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    ENUM            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    STRUCT          reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    UNION           reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 182 (compound_statement -> LBRACE statement_list RBRACE .)


state 233

    (73) expression -> expression COMMA . assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 300
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 234

    (190) expression_statement -> expression SEMICOLON .

    RBRACE          reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    INC             reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    DEC             reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    BAND            reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    TIMES           reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    BNOT            reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    LNOT            reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    INT_CONST_DEC   reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 190 (expression_statement -> expression SEMICOLON .)
    RPAREN          reduce using rule 190 (expression_statement -> expression SEMICOLON .)


state 235

    (180) labeled_statement -> DEFAULT COLON . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 301
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 236

    (193) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 302

state 237

    (179) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 303


state 238

    (192) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 304

state 239

    (199) jump_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    INC             reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    DEC             reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    BAND            reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    BNOT            reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    LNOT            reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    INT_CONST_DEC   reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 199 (jump_statement -> BREAK SEMICOLON .)


state 240

    (194) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 305


state 241

    (178) labeled_statement -> ID COLON . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 306
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 242

    (191) selection_statement -> IF LPAREN . expression RPAREN statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 307

state 243

    (119) struct_declarator -> declarator COLON . constant_expression
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 308
    relational_expression          shift and go to state 91

state 244

    (118) struct_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 118 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 118 (struct_declarator -> COLON constant_expression .)


state 245

    (116) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (117) struct_declarator -> . declarator
    (118) struct_declarator -> . COLON constant_expression
    (119) struct_declarator -> . declarator COLON constant_expression
    (129) declarator -> . pointer direct_declarator
    (130) declarator -> . direct_declarator
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (131) direct_declarator -> . ID
    (132) direct_declarator -> . LPAREN declarator RPAREN
    (133) direct_declarator -> . direct_declarator [ constant_expression RSQUARE
    (134) direct_declarator -> . direct_declarator [ RSQUARE
    (135) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (136) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (137) direct_declarator -> . direct_declarator LPAREN RPAREN

    COLON           shift and go to state 155
    TIMES           shift and go to state 24
    *               shift and go to state 7
    ID              shift and go to state 27
    LPAREN          shift and go to state 4

    struct_declarator              shift and go to state 309
    direct_declarator              shift and go to state 23
    declarator                     shift and go to state 154
    pointer                        shift and go to state 12

state 246

    (110) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .

    RBRACE          reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SHORT           reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    LONG            reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CONST           reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    ENUM            reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNION           reduce using rule 110 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)


state 247

    (103) struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .

    TYPEDEF         reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    EXTERN          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    STATIC          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    AUTO            reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    REGISTER        reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    VOID            reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    CHAR            reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    SHORT           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    INT             reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    LONG            reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    FLOAT           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    DOUBLE          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    SIGNED          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    UNSIGNED        reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    CONST           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    VOLATILE        reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    ENUM            reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    STRUCT          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    UNION           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    SEMICOLON       reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    TIMES           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    *               reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    ID              reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    LPAREN          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    [               reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    COMMA           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    RPAREN          reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)
    COLON           reduce using rule 103 (struct_or_union_specifier -> struct_or_union ID LBRACE struct_declaration_list RBRACE .)


state 248

    (121) enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .

    TYPEDEF         reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    EXTERN          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    STATIC          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    AUTO            reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    REGISTER        reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    VOID            reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    CHAR            reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    SHORT           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    INT             reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    LONG            reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    FLOAT           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    DOUBLE          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    SIGNED          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    UNSIGNED        reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    CONST           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    VOLATILE        reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    ENUM            reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    STRUCT          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    UNION           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    TIMES           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    *               reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    ID              reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    LPAREN          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    [               reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    COMMA           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    RPAREN          reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    COLON           reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)
    SEMICOLON       reduce using rule 121 (enum_specifier -> ENUM ID LBRACE enumerator_list RBRACE .)


state 249

    (124) enumerator_list -> enumerator_list COMMA enumerator .

    RBRACE          reduce using rule 124 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 124 (enumerator_list -> enumerator_list COMMA enumerator .)


state 250

    (126) enumerator -> ID ASSIGN constant_expression .

    RBRACE          reduce using rule 126 (enumerator -> ID ASSIGN constant_expression .)
    COMMA           reduce using rule 126 (enumerator -> ID ASSIGN constant_expression .)


state 251

    (163) direct_abstract_declarator -> LPAREN RPAREN .

    [               reduce using rule 163 (direct_abstract_declarator -> LPAREN RPAREN .)
    LPAREN          reduce using rule 163 (direct_abstract_declarator -> LPAREN RPAREN .)
    COMMA           reduce using rule 163 (direct_abstract_declarator -> LPAREN RPAREN .)
    RPAREN          reduce using rule 163 (direct_abstract_declarator -> LPAREN RPAREN .)


state 252

    (164) direct_abstract_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 310


state 253

    (158) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 311


state 254

    (165) direct_abstract_declarator -> direct_abstract_declarator LPAREN . RPAREN
    (166) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list RPAREN
    (144) parameter_type_list -> . parameter_list
    (145) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (146) parameter_list -> . parameter_declaration
    (147) parameter_list -> . parameter_list COMMA parameter_declaration
    (148) parameter_declaration -> . declaration_specifiers declarator
    (149) parameter_declaration -> . declaration_specifiers abstract_declarator
    (150) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    RPAREN          shift and go to state 312
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    parameter_list                 shift and go to state 81
    parameter_type_list            shift and go to state 313
    parameter_declaration          shift and go to state 77
    type_qualifier                 shift and go to state 33
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 78

state 255

    (161) direct_abstract_declarator -> direct_abstract_declarator [ . RSQUARE
    (162) direct_abstract_declarator -> direct_abstract_declarator [ . constant_expression RSQUARE
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    RSQUARE         shift and go to state 314
    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    and_expression                 shift and go to state 86
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 111
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    constant_expression            shift and go to state 315
    relational_expression          shift and go to state 91

state 256

    (159) direct_abstract_declarator -> [ RSQUARE .

    [               reduce using rule 159 (direct_abstract_declarator -> [ RSQUARE .)
    LPAREN          reduce using rule 159 (direct_abstract_declarator -> [ RSQUARE .)
    COMMA           reduce using rule 159 (direct_abstract_declarator -> [ RSQUARE .)
    RPAREN          reduce using rule 159 (direct_abstract_declarator -> [ RSQUARE .)


state 257

    (160) direct_abstract_declarator -> [ constant_expression . RSQUARE

    RSQUARE         shift and go to state 316


state 258

    (157) abstract_declarator -> pointer direct_abstract_declarator .
    (161) direct_abstract_declarator -> direct_abstract_declarator . [ RSQUARE
    (162) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression RSQUARE
    (165) direct_abstract_declarator -> direct_abstract_declarator . LPAREN RPAREN
    (166) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 157 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 157 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 255
    LPAREN          shift and go to state 254


state 259

    (152) identifier_list -> identifier_list COMMA ID .

    RPAREN          reduce using rule 152 (identifier_list -> identifier_list COMMA ID .)
    COMMA           reduce using rule 152 (identifier_list -> identifier_list COMMA ID .)


state 260

    (145) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 145 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 261

    (147) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 147 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 147 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 262

    (20) unary_expression -> SIZEOF LPAREN type_name . RPAREN

    RPAREN          shift and go to state 317


state 263

    (48) and_expression -> and_expression BAND equality_expression .
    (45) equality_expression -> equality_expression . EQ relational_expression
    (46) equality_expression -> equality_expression . NEQ relational_expression

    BAND            reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    XOR             reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    BOR             reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    LAND            reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    IS_TRUE         reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    LOR             reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    RPAREN          reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    COMMA           reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    SEMICOLON       reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    RSQUARE         reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    COLON           reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    RBRACE          reduce using rule 48 (and_expression -> and_expression BAND equality_expression .)
    EQ              shift and go to state 198
    NEQ             shift and go to state 199


state 264

    (52) inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .
    (50) exclusive_or_expression -> exclusive_or_expression . XOR and_expression

    BOR             reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    LAND            reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    IS_TRUE         reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    LOR             reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    SEMICOLON       reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    COMMA           reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    RSQUARE         reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    RPAREN          reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    COLON           reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    RBRACE          reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression BOR exclusive_or_expression .)
    XOR             shift and go to state 188


state 265

    (6) postfix_expression -> postfix_expression LSQUARE expression . RSQUARE
    (73) expression -> expression . COMMA assignment_expression

    RSQUARE         shift and go to state 318
    COMMA           shift and go to state 233


state 266

    (7) postfix_expression -> postfix_expression LPAREN RPAREN .

    LSQUARE         reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOT             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PTR_OP          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR_ASSIGN       reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LEQ             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GEQ             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQ             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BAND            reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BOR             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    IS_TRUE         reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSQUARE         reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 7 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 267

    (13) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 13 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 13 (argument_expression_list -> assignment_expression .)


state 268

    (8) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (14) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 319
    COMMA           shift and go to state 320


state 269

    (10) postfix_expression -> postfix_expression PTR_OP ID .

    LSQUARE         reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LPAREN          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    DOT             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    INC             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    DEC             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    ASSIGN          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LSHIFT_ASSIGN   reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    RSHIFT_ASSIGN   reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    TIMES           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    DIVIDE          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    MOD             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    PLUS            reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    MINUS           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LSHIFT          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    RSHIFT          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LT              reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    GT              reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LEQ             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    GEQ             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    EQ              reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    NEQ             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    BAND            reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    XOR             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    BOR             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LAND            reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    IS_TRUE         reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    LOR             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    SEMICOLON       reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    COMMA           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    RPAREN          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    RSQUARE         reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    COLON           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)
    RBRACE          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP ID .)


state 270

    (9) postfix_expression -> postfix_expression DOT ID .

    LSQUARE         reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LPAREN          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    DOT             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    PTR_OP          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    INC             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    DEC             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    ASSIGN          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    MUL_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    DIV_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    MOD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    SUB_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LSHIFT_ASSIGN   reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    RSHIFT_ASSIGN   reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    AND_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    XOR_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    OR_ASSIGN       reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    TIMES           reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    DIVIDE          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    MOD             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    PLUS            reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    MINUS           reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LSHIFT          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    RSHIFT          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LT              reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    GT              reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LEQ             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    GEQ             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    EQ              reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    NEQ             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    BAND            reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    XOR             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    BOR             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LAND            reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    IS_TRUE         reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    LOR             reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    SEMICOLON       reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    COMMA           reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    RPAREN          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    RSQUARE         reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    COLON           reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)
    RBRACE          reduce using rule 9 (postfix_expression -> postfix_expression DOT ID .)


state 271

    (43) relational_expression -> relational_expression GEQ shift_expression .
    (37) shift_expression -> shift_expression . LSHIFT additive_expression
    (38) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    GT              reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LEQ             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    GEQ             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    EQ              reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    NEQ             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    BAND            reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    XOR             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    BOR             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LAND            reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    IS_TRUE         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LOR             reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    RSQUARE         reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    RBRACE          reduce using rule 43 (relational_expression -> relational_expression GEQ shift_expression .)
    LSHIFT          shift and go to state 197
    RSHIFT          shift and go to state 196


state 272

    (41) relational_expression -> relational_expression GT shift_expression .
    (37) shift_expression -> shift_expression . LSHIFT additive_expression
    (38) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    LEQ             reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    GEQ             reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    EQ              reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    NEQ             reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    BAND            reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    XOR             reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    BOR             reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    LAND            reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    IS_TRUE         reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    LOR             reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    SEMICOLON       reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    RSQUARE         reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    RPAREN          reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    COLON           reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    RBRACE          reduce using rule 41 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 197
    RSHIFT          shift and go to state 196


state 273

    (42) relational_expression -> relational_expression LEQ shift_expression .
    (37) shift_expression -> shift_expression . LSHIFT additive_expression
    (38) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    GT              reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    GEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    EQ              reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    NEQ             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    BAND            reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    XOR             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    BOR             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LAND            reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    IS_TRUE         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LOR             reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RSQUARE         reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    RBRACE          reduce using rule 42 (relational_expression -> relational_expression LEQ shift_expression .)
    LSHIFT          shift and go to state 197
    RSHIFT          shift and go to state 196


state 274

    (40) relational_expression -> relational_expression LT shift_expression .
    (37) shift_expression -> shift_expression . LSHIFT additive_expression
    (38) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    LEQ             reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    GEQ             reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    EQ              reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    NEQ             reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    BAND            reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    XOR             reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    BOR             reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    LAND            reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    IS_TRUE         reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    LOR             reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    SEMICOLON       reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    RSQUARE         reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    RPAREN          reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    COLON           reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    RBRACE          reduce using rule 40 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 197
    RSHIFT          shift and go to state 196


state 275

    (50) exclusive_or_expression -> exclusive_or_expression XOR and_expression .
    (48) and_expression -> and_expression . BAND equality_expression

    XOR             reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    BOR             reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LAND            reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    IS_TRUE         reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    LOR             reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RSQUARE         reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    SEMICOLON       reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COMMA           reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RPAREN          reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    COLON           reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    RBRACE          reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression XOR and_expression .)
    BAND            shift and go to state 176


state 276

    (34) additive_expression -> additive_expression PLUS multiplicative_expression .
    (30) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (31) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (32) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQ             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BAND            reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BOR             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_TRUE         reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSQUARE         reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 202
    DIVIDE          shift and go to state 201
    MOD             shift and go to state 200


state 277

    (35) additive_expression -> additive_expression MINUS multiplicative_expression .
    (30) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (31) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (32) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQ             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BAND            reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BOR             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IS_TRUE         reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSQUARE         reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 202
    DIVIDE          shift and go to state 201
    MOD             shift and go to state 200


state 278

    (28) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 100
    cast_expression                shift and go to state 321
    unary_operator                 shift and go to state 110

state 279

    (158) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (163) direct_abstract_declarator -> LPAREN . RPAREN
    (164) direct_abstract_declarator -> LPAREN . parameter_type_list RPAREN
    (155) abstract_declarator -> . pointer
    (156) abstract_declarator -> . direct_abstract_declarator
    (157) abstract_declarator -> . pointer direct_abstract_declarator
    (144) parameter_type_list -> . parameter_list
    (145) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (138) pointer -> . TIMES
    (139) pointer -> . * type_qualifier_list
    (140) pointer -> . * pointer
    (141) pointer -> . * type_qualifier_list pointer
    (158) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (159) direct_abstract_declarator -> . [ RSQUARE
    (160) direct_abstract_declarator -> . [ constant_expression RSQUARE
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ RSQUARE
    (162) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression RSQUARE
    (163) direct_abstract_declarator -> . LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (165) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (166) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN
    (146) parameter_list -> . parameter_declaration
    (147) parameter_list -> . parameter_list COMMA parameter_declaration
    (148) parameter_declaration -> . declaration_specifiers declarator
    (149) parameter_declaration -> . declaration_specifiers abstract_declarator
    (150) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . FLOAT
    (98) type_specifier -> . DOUBLE
    (99) type_specifier -> . SIGNED
    (100) type_specifier -> . UNSIGNED
    (101) type_specifier -> . struct_or_union_specifier
    (102) type_specifier -> . enum_specifier
    (127) type_qualifier -> . CONST
    (128) type_qualifier -> . VOLATILE
    (103) struct_or_union_specifier -> . struct_or_union ID LBRACE struct_declaration_list RBRACE
    (104) struct_or_union_specifier -> . struct_or_union LBRACE struct_declaration_list RBRACE
    (105) struct_or_union_specifier -> . struct_or_union ID
    (120) enum_specifier -> . ENUM LBRACE enumerator_list RBRACE
    (121) enum_specifier -> . ENUM ID LBRACE enumerator_list RBRACE
    (122) enum_specifier -> . ENUM ID
    (106) struct_or_union -> . STRUCT
    (107) struct_or_union -> . UNION

    RPAREN          shift and go to state 251
    TIMES           shift and go to state 24
    *               shift and go to state 7
    LPAREN          shift and go to state 279
    [               shift and go to state 167
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 9
    AUTO            shift and go to state 22
    REGISTER        shift and go to state 15
    VOID            shift and go to state 6
    CHAR            shift and go to state 8
    SHORT           shift and go to state 2
    INT             shift and go to state 31
    LONG            shift and go to state 17
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 34
    UNSIGNED        shift and go to state 16
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 36
    ENUM            shift and go to state 21
    STRUCT          shift and go to state 30
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 11
    type_specifier                 shift and go to state 14
    parameter_list                 shift and go to state 81
    type_qualifier                 shift and go to state 33
    parameter_type_list            shift and go to state 252
    parameter_declaration          shift and go to state 77
    abstract_declarator            shift and go to state 253
    enum_specifier                 shift and go to state 35
    struct_or_union_specifier      shift and go to state 5
    declaration_specifiers         shift and go to state 78
    direct_abstract_declarator     shift and go to state 166
    pointer                        shift and go to state 281

state 280

    (154) type_name -> specifier_qualifier_list abstract_declarator .

    RPAREN          reduce using rule 154 (type_name -> specifier_qualifier_list abstract_declarator .)


state 281

    (155) abstract_declarator -> pointer .
    (157) abstract_declarator -> pointer . direct_abstract_declarator
    (158) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (159) direct_abstract_declarator -> . [ RSQUARE
    (160) direct_abstract_declarator -> . [ constant_expression RSQUARE
    (161) direct_abstract_declarator -> . direct_abstract_declarator [ RSQUARE
    (162) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression RSQUARE
    (163) direct_abstract_declarator -> . LPAREN RPAREN
    (164) direct_abstract_declarator -> . LPAREN parameter_type_list RPAREN
    (165) direct_abstract_declarator -> . direct_abstract_declarator LPAREN RPAREN
    (166) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 155 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 279
    [               shift and go to state 167

    direct_abstract_declarator     shift and go to state 258

state 282

    (4) primary_expression -> LPAREN expression RPAREN .

    LSQUARE         reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    PTR_OP          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    INC             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DEC             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    BAND            reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    BOR             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    IS_TRUE         reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RSQUARE         reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 4 (primary_expression -> LPAREN expression RPAREN .)


state 283

    (54) logical_and_expression -> logical_and_expression LAND inclusive_or_expression .
    (52) inclusive_or_expression -> inclusive_or_expression . BOR exclusive_or_expression

    LAND            reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    IS_TRUE         reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    LOR             reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RSQUARE         reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    SEMICOLON       reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COMMA           reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RPAREN          reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    COLON           reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    RBRACE          reduce using rule 54 (logical_and_expression -> logical_and_expression LAND inclusive_or_expression .)
    BOR             shift and go to state 177


state 284

    (38) shift_expression -> shift_expression RSHIFT additive_expression .
    (34) additive_expression -> additive_expression . PLUS multiplicative_expression
    (35) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LEQ             reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GEQ             reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQ             reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BAND            reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    XOR             reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BOR             reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LAND            reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    IS_TRUE         reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LOR             reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSQUARE         reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RBRACE          reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RPAREN          reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COLON           reduce using rule 38 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 191


state 285

    (37) shift_expression -> shift_expression LSHIFT additive_expression .
    (34) additive_expression -> additive_expression . PLUS multiplicative_expression
    (35) additive_expression -> additive_expression . MINUS multiplicative_expression

    LSHIFT          reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LEQ             reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GEQ             reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQ             reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BAND            reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    XOR             reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BOR             reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LAND            reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    IS_TRUE         reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LOR             reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSQUARE         reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RBRACE          reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RPAREN          reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COLON           reduce using rule 37 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 191


state 286

    (45) equality_expression -> equality_expression EQ relational_expression .
    (40) relational_expression -> relational_expression . LT shift_expression
    (41) relational_expression -> relational_expression . GT shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression
    (43) relational_expression -> relational_expression . GEQ shift_expression

    EQ              reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    NEQ             reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    BAND            reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    XOR             reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    BOR             reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    IS_TRUE         reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    RSQUARE         reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 45 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 187
    GT              shift and go to state 185
    LEQ             shift and go to state 186
    GEQ             shift and go to state 184


state 287

    (46) equality_expression -> equality_expression NEQ relational_expression .
    (40) relational_expression -> relational_expression . LT shift_expression
    (41) relational_expression -> relational_expression . GT shift_expression
    (42) relational_expression -> relational_expression . LEQ shift_expression
    (43) relational_expression -> relational_expression . GEQ shift_expression

    EQ              reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    NEQ             reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    BAND            reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    XOR             reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    BOR             reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    LAND            reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    IS_TRUE         reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    LOR             reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    RSQUARE         reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    SEMICOLON       reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    COMMA           reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    RPAREN          reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    COLON           reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACE          reduce using rule 46 (equality_expression -> equality_expression NEQ relational_expression .)
    LT              shift and go to state 187
    GT              shift and go to state 185
    LEQ             shift and go to state 186
    GEQ             shift and go to state 184


state 288

    (32) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LSHIFT          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSHIFT          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LT              reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GT              reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEQ             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GEQ             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ              reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NEQ             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BAND            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    XOR             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    BOR             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LAND            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    IS_TRUE         reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LOR             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RPAREN          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RSQUARE         reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMICOLON       reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RBRACE          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 289

    (31) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LSHIFT          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSHIFT          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEQ             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GEQ             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NEQ             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BAND            reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BOR             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LAND            reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    IS_TRUE         reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOR             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RSQUARE         reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 290

    (30) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LSHIFT          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSHIFT          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LEQ             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GEQ             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NEQ             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    BAND            reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    XOR             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    BOR             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LAND            reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    IS_TRUE         reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LOR             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RSQUARE         reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMICOLON       reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 291

    (56) logical_or_expression -> logical_or_expression LOR logical_and_expression .
    (54) logical_and_expression -> logical_and_expression . LAND inclusive_or_expression

    IS_TRUE         reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LOR             reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    SEMICOLON       reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COMMA           reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RPAREN          reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RSQUARE         reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    COLON           reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    RBRACE          reduce using rule 56 (logical_or_expression -> logical_or_expression LOR logical_and_expression .)
    LAND            shift and go to state 195


state 292

    (58) conditional_expression -> logical_or_expression IS_TRUE expression . COLON conditional_expression
    (73) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 322
    COMMA           shift and go to state 233


state 293

    (170) initializer_list -> initializer .

    RBRACE          reduce using rule 170 (initializer_list -> initializer .)
    COMMA           reduce using rule 170 (initializer_list -> initializer .)


state 294

    (168) initializer -> LBRACE initializer_list . RBRACE
    (169) initializer -> LBRACE initializer_list . COMMA RBRACE
    (171) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 324
    COMMA           shift and go to state 323


state 295

    (197) jump_statement -> GOTO ID SEMICOLON .

    RBRACE          reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    ID              reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    CASE            reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    DEFAULT         reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    LBRACE          reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    SEMICOLON       reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    IF              reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    SWITCH          reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    WHILE           reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    DO              reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    FOR             reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    GOTO            reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    CONTINUE        reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    BREAK           reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    RETURN          reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    INC             reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    DEC             reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    SIZEOF          reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    BAND            reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    TIMES           reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    PLUS            reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    MINUS           reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    BNOT            reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    LNOT            reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    INT_CONST_DEC   reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    STRING_LITERAL  reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)
    LPAREN          reduce using rule 197 (jump_statement -> GOTO ID SEMICOLON .)


state 296

    (184) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    RBRACE          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CASE            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEFAULT         reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMICOLON       reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SWITCH          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DO              reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    GOTO            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONTINUE        reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INC             reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEC             reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIZEOF          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BAND            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TIMES           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BNOT            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LNOT            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT_CONST_DEC   reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING_LITERAL  reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TYPEDEF         reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    EXTERN          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STATIC          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AUTO            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    REGISTER        reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SHORT           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LONG            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIGNED          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNSIGNED        reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONST           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOLATILE        reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    *               reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ENUM            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRUCT          reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNION           reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 184 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 297

    (201) jump_statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    INC             reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    DEC             reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    BAND            reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    BNOT            reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    LNOT            reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    INT_CONST_DEC   reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 201 (jump_statement -> RETURN expression SEMICOLON .)


state 298

    (60) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSQUARE         reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 299

    (195) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (196) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       shift and go to state 134
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 325
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 300

    (73) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    RSQUARE         reduce using rule 73 (expression -> expression COMMA assignment_expression .)


state 301

    (180) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    ID              reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    INC             reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    DEC             reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    BAND            reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    BNOT            reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_DEC   reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 180 (labeled_statement -> DEFAULT COLON statement .)


state 302

    (193) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (73) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 326
    COMMA           shift and go to state 233


state 303

    (179) labeled_statement -> CASE constant_expression COLON . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 327
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 304

    (192) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (73) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 328
    COMMA           shift and go to state 233


state 305

    (194) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 329


state 306

    (178) labeled_statement -> ID COLON statement .

    RBRACE          reduce using rule 178 (labeled_statement -> ID COLON statement .)
    ID              reduce using rule 178 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 178 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 178 (labeled_statement -> ID COLON statement .)
    LBRACE          reduce using rule 178 (labeled_statement -> ID COLON statement .)
    SEMICOLON       reduce using rule 178 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 178 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 178 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 178 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 178 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 178 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 178 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 178 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 178 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 178 (labeled_statement -> ID COLON statement .)
    INC             reduce using rule 178 (labeled_statement -> ID COLON statement .)
    DEC             reduce using rule 178 (labeled_statement -> ID COLON statement .)
    SIZEOF          reduce using rule 178 (labeled_statement -> ID COLON statement .)
    BAND            reduce using rule 178 (labeled_statement -> ID COLON statement .)
    TIMES           reduce using rule 178 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 178 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 178 (labeled_statement -> ID COLON statement .)
    BNOT            reduce using rule 178 (labeled_statement -> ID COLON statement .)
    LNOT            reduce using rule 178 (labeled_statement -> ID COLON statement .)
    INT_CONST_DEC   reduce using rule 178 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 178 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 178 (labeled_statement -> ID COLON statement .)


state 307

    (191) selection_statement -> IF LPAREN expression . RPAREN statement
    (73) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 330
    COMMA           shift and go to state 233


state 308

    (119) struct_declarator -> declarator COLON constant_expression .

    SEMICOLON       reduce using rule 119 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 119 (struct_declarator -> declarator COLON constant_expression .)


state 309

    (116) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 116 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 116 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 310

    (164) direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .

    [               reduce using rule 164 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 164 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 164 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 164 (direct_abstract_declarator -> LPAREN parameter_type_list RPAREN .)


state 311

    (158) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    [               reduce using rule 158 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 158 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 158 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 158 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 312

    (165) direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .

    [               reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LPAREN RPAREN .)


state 313

    (166) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 331


state 314

    (161) direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE .

    [               reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE .)
    LPAREN          reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE .)
    COMMA           reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE .)
    RPAREN          reduce using rule 161 (direct_abstract_declarator -> direct_abstract_declarator [ RSQUARE .)


state 315

    (162) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression . RSQUARE

    RSQUARE         shift and go to state 332


state 316

    (160) direct_abstract_declarator -> [ constant_expression RSQUARE .

    [               reduce using rule 160 (direct_abstract_declarator -> [ constant_expression RSQUARE .)
    LPAREN          reduce using rule 160 (direct_abstract_declarator -> [ constant_expression RSQUARE .)
    COMMA           reduce using rule 160 (direct_abstract_declarator -> [ constant_expression RSQUARE .)
    RPAREN          reduce using rule 160 (direct_abstract_declarator -> [ constant_expression RSQUARE .)


state 317

    (20) unary_expression -> SIZEOF LPAREN type_name RPAREN .

    TIMES           reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LEQ             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GEQ             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NEQ             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BAND            reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    BOR             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    IS_TRUE         reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSQUARE         reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMICOLON       reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ASSIGN          reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)


state 318

    (6) postfix_expression -> postfix_expression LSQUARE expression RSQUARE .

    LSQUARE         reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LPAREN          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DOT             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    PTR_OP          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    INC             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DEC             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    ASSIGN          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MUL_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DIV_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MOD_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    ADD_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    SUB_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LSHIFT_ASSIGN   reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RSHIFT_ASSIGN   reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    AND_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    XOR_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    OR_ASSIGN       reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    TIMES           reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MOD             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LSHIFT          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RSHIFT          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LT              reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    GT              reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LEQ             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    GEQ             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    EQ              reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    NEQ             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    BAND            reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    XOR             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    BOR             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LAND            reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    IS_TRUE         reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LOR             reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    COMMA           reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RPAREN          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    COLON           reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RBRACE          reduce using rule 6 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)


state 319

    (8) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LSQUARE         reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOT             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PTR_OP          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT_ASSIGN   reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT_ASSIGN   reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR_ASSIGN       reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LEQ             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GEQ             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NEQ             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    BAND            reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    BOR             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    IS_TRUE         reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSQUARE         reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 8 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 320

    (14) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    additive_expression            shift and go to state 98
    relational_expression          shift and go to state 91
    assignment_expression          shift and go to state 333
    unary_expression               shift and go to state 125
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    and_expression                 shift and go to state 86
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    primary_expression             shift and go to state 100

state 321

    (28) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LEQ             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GEQ             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NEQ             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BAND            reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    BOR             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    IS_TRUE         reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSQUARE         reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ASSIGN          reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MUL_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIV_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ADD_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SUB_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT_ASSIGN   reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT_ASSIGN   reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR_ASSIGN      reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR_ASSIGN       reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 28 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 322

    (58) conditional_expression -> logical_or_expression IS_TRUE expression COLON . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 101
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 83
    multiplicative_expression      shift and go to state 108
    inclusive_or_expression        shift and go to state 88
    exclusive_or_expression        shift and go to state 93
    postfix_expression             shift and go to state 89
    shift_expression               shift and go to state 105
    additive_expression            shift and go to state 98
    equality_expression            shift and go to state 106
    unary_operator                 shift and go to state 110
    conditional_expression         shift and go to state 334
    cast_expression                shift and go to state 102
    logical_and_expression         shift and go to state 103
    primary_expression             shift and go to state 100
    logical_or_expression          shift and go to state 109
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91

state 323

    (169) initializer -> LBRACE initializer_list COMMA . RBRACE
    (171) initializer_list -> initializer_list COMMA . initializer
    (167) initializer -> . assignment_expression
    (168) initializer -> . LBRACE initializer_list RBRACE
    (169) initializer -> . LBRACE initializer_list COMMA RBRACE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 336
    LBRACE          shift and go to state 210
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    initializer                    shift and go to state 335
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 209
    multiplicative_expression      shift and go to state 108
    conditional_expression         shift and go to state 146
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106

state 324

    (168) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 168 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 168 (initializer -> LBRACE initializer_list RBRACE .)
    SEMICOLON       reduce using rule 168 (initializer -> LBRACE initializer_list RBRACE .)


state 325

    (195) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (196) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 337
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 338

state 326

    (193) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 339
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 327

    (179) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    ID              reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    INC             reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC             reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    BAND            reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    BNOT            reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_DEC   reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 179 (labeled_statement -> CASE constant_expression COLON statement .)


state 328

    (192) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 340
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 329

    (194) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    ID              shift and go to state 104
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    additive_expression            shift and go to state 98
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    and_expression                 shift and go to state 86
    relational_expression          shift and go to state 91
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 341

state 330

    (191) selection_statement -> IF LPAREN expression RPAREN . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 342
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 331

    (166) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .

    [               reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list RPAREN .)


state 332

    (162) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE .

    [               reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE .)
    LPAREN          reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE .)
    COMMA           reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE .)
    RPAREN          reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression RSQUARE .)


state 333

    (14) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 14 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 14 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 334

    (58) conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .

    SEMICOLON       reduce using rule 58 (conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .)
    COMMA           reduce using rule 58 (conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .)
    RBRACE          reduce using rule 58 (conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .)
    RSQUARE         reduce using rule 58 (conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .)
    RPAREN          reduce using rule 58 (conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .)
    COLON           reduce using rule 58 (conditional_expression -> logical_or_expression IS_TRUE expression COLON conditional_expression .)


state 335

    (171) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 171 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 171 (initializer_list -> initializer_list COMMA initializer .)


state 336

    (169) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 169 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 169 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMICOLON       reduce using rule 169 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 337

    (195) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 343
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 338

    (196) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (73) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 344
    COMMA           shift and go to state 233


state 339

    (193) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC             reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC             reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BAND            reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BNOT            reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 193 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 340

    (192) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC             reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC             reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BAND            reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BNOT            reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 192 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 341

    (194) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (73) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 345
    COMMA           shift and go to state 233


state 342

    (191) selection_statement -> IF LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC             reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC             reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BAND            reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BNOT            reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 191 (selection_statement -> IF LPAREN expression RPAREN statement .)


state 343

    (195) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    GOTO            reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INC             reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEC             reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SIZEOF          reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BAND            reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TIMES           reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BNOT            reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LNOT            reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INT_CONST_DEC   reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING_LITERAL  reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 195 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)


state 344

    (196) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (172) statement -> . labeled_statement
    (173) statement -> . compound_statement
    (174) statement -> . expression_statement
    (175) statement -> . selection_statement
    (176) statement -> . iteration_statement
    (177) statement -> . jump_statement
    (178) labeled_statement -> . ID COLON statement
    (179) labeled_statement -> . CASE constant_expression COLON statement
    (180) labeled_statement -> . DEFAULT COLON statement
    (181) compound_statement -> . LBRACE RBRACE
    (182) compound_statement -> . LBRACE statement_list RBRACE
    (183) compound_statement -> . LBRACE declaration_list RBRACE
    (184) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (189) expression_statement -> . SEMICOLON
    (190) expression_statement -> . expression SEMICOLON
    (191) selection_statement -> . IF LPAREN expression RPAREN statement
    (192) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (193) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (194) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (195) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (196) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (197) jump_statement -> . GOTO ID SEMICOLON
    (198) jump_statement -> . CONTINUE SEMICOLON
    (199) jump_statement -> . BREAK SEMICOLON
    (200) jump_statement -> . RETURN SEMICOLON
    (201) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression IS_TRUE expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC unary_expression
    (17) unary_expression -> . DEC unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression LOR logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (7) postfix_expression -> . postfix_expression LPAREN RPAREN
    (8) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (9) postfix_expression -> . postfix_expression DOT ID
    (10) postfix_expression -> . postfix_expression PTR_OP ID
    (11) postfix_expression -> . postfix_expression INC
    (12) postfix_expression -> . postfix_expression DEC
    (21) unary_operator -> . BAND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . BNOT
    (26) unary_operator -> . LNOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression LAND inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . INT_CONST_DEC
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . LPAREN expression RPAREN
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression BOR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression XOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression BAND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ relational_expression
    (46) equality_expression -> . equality_expression NEQ relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression LT shift_expression
    (41) relational_expression -> . relational_expression GT shift_expression
    (42) relational_expression -> . relational_expression LEQ shift_expression
    (43) relational_expression -> . relational_expression GEQ shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LSHIFT additive_expression
    (38) shift_expression -> . shift_expression RSHIFT additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . LPAREN type_name RPAREN cast_expression

    ID              shift and go to state 144
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 131
    LBRACE          shift and go to state 60
    SEMICOLON       shift and go to state 134
    IF              shift and go to state 145
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 132
    DO              shift and go to state 139
    FOR             shift and go to state 127
    GOTO            shift and go to state 121
    CONTINUE        shift and go to state 128
    BREAK           shift and go to state 138
    RETURN          shift and go to state 124
    INC             shift and go to state 112
    DEC             shift and go to state 85
    SIZEOF          shift and go to state 84
    BAND            shift and go to state 97
    TIMES           shift and go to state 96
    PLUS            shift and go to state 92
    MINUS           shift and go to state 90
    BNOT            shift and go to state 95
    LNOT            shift and go to state 82
    INT_CONST_DEC   shift and go to state 99
    STRING_LITERAL  shift and go to state 107
    LPAREN          shift and go to state 143

    expression_statement           shift and go to state 119
    selection_statement            shift and go to state 141
    unary_expression               shift and go to state 125
    exclusive_or_expression        shift and go to state 93
    iteration_statement            shift and go to state 120
    and_expression                 shift and go to state 86
    compound_statement             shift and go to state 126
    inclusive_or_expression        shift and go to state 88
    postfix_expression             shift and go to state 89
    relational_expression          shift and go to state 91
    statement                      shift and go to state 346
    cast_expression                shift and go to state 102
    logical_or_expression          shift and go to state 109
    unary_operator                 shift and go to state 110
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 108
    additive_expression            shift and go to state 98
    primary_expression             shift and go to state 100
    logical_and_expression         shift and go to state 103
    shift_expression               shift and go to state 105
    equality_expression            shift and go to state 106
    jump_statement                 shift and go to state 137
    labeled_statement              shift and go to state 122
    conditional_expression         shift and go to state 146
    expression                     shift and go to state 130

state 345

    (194) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 347


state 346

    (196) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    GOTO            reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INC             reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEC             reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SIZEOF          reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BAND            reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TIMES           reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BNOT            reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LNOT            reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 196 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 347

    (194) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INC             reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEC             reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SIZEOF          reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BAND            reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BNOT            reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LNOT            reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INT_CONST_DEC   reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 194 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)

